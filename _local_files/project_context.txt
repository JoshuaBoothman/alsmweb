# Project Overview
This file contains the concatenated source code of my web project, prepared for analysis by Google Gemini.

**Project Purpose:** [A web dev project for my TAFE course and new business, MVW.]
**Technologies Used:** [PHP, Apache, MySQL, CSS, JavaScript.]
**Analysis Goal:** [Analyze for security, performance, and suggest refactoring for modern best practices.]

--- Directory Structure ---
[_local_files]/
    20250624-1128-schema.json
    202506241211-alsm_db.sql
    Generate-GeminiContext.ps1
    project_context.txt
[admin]/
    add_attribute.php
    add_category.php
    add_event.php
    add_option.php
    add_product.php
    add_variant.php
    delete_attribute.php
    delete_category.php
    delete_event.php
    delete_option.php
    delete_product.php
    delete_variant.php
    edit_attribute.php
    edit_category.php
    edit_event.php
    edit_option.php
    edit_product.php
    edit_variant.php
    index.php
    manage_attributes.php
    manage_categories.php
    manage_events.php
    manage_options.php
    manage_products.php
    manage_variants.php
[config]/
    db_config.php
[lib]/
[public_html]/
    [assets]/
        [css]/
            reset.css
            style.css
            style.css.map
        [images]/
        [js]/
            main.js
    about.html
    campsite_booking.html
    cart_actions.php
    checkout.php
    contact.html
    diagnose.php
    event_detail.html
    events.html
    index.html
    login.php
    logout.php
    merchandise.php
    order_confirmation.php
    place_order.php
    product_detail.php
    profile.php
    register.php
    test_db.php
    view_cart.php
[scss]/
    [abstracts]/
        _variables.scss
    [layout]/
        _footer.scss
        _header.scss
        _navigation.scss
    style.scss
[templates]/
    footer.php
    header.php
project_context.txt

--- File Contents ---

--- START FILE: project_context.txt ---
`$language
# Project Overview
This file contains the concatenated source code of my web project, prepared for analysis by Google Gemini.

**Project Purpose:** [A web dev project for my TAFE course and new business, MVW.]
**Technologies Used:** [PHP, Apache, MySQL, CSS, JavaScript.]
**Analysis Goal:** [Analyze for security, performance, and suggest refactoring for modern best practices.]

--- Directory Structure ---
[_local_files]/
    20250624-1128-schema.json
    202506241211-alsm_db.sql
    Generate-GeminiContext.ps1
    project_context.txt
[admin]/
    add_attribute.php
    add_category.php
    add_event.php
    add_option.php
    add_product.php
    add_variant.php
    delete_attribute.php
    delete_category.php
    delete_event.php
    delete_option.php
    delete_product.php
    delete_variant.php
    edit_attribute.php
    edit_category.php
    edit_event.php
    edit_option.php
    edit_product.php
    edit_variant.php
    index.php
    manage_attributes.php
    manage_categories.php
    manage_events.php
    manage_options.php
    manage_products.php
    manage_variants.php
[config]/
    db_config.php
[lib]/
[public_html]/
    [assets]/
        [css]/
            reset.css
            style.css
            style.css.map
        [images]/
        [js]/
            main.js
    about.html
    campsite_booking.html
    cart_actions.php
    checkout.php
    contact.html
    diagnose.php
    event_detail.html
    events.html
    index.html
    login.php
    logout.php
    merchandise.php
    order_confirmation.php
    place_order.php
    product_detail.php
    profile.php
    register.php
    test_db.php
    view_cart.php
[scss]/
    [abstracts]/
        _variables.scss
    [layout]/
        _footer.scss
        _header.scss
        _navigation.scss
    style.scss
[templates]/
    footer.php
    header.php
project_context.txt

--- File Contents ---

--- START FILE: project_context.txt ---
`$language
# Project Overview
This file contains the concatenated source code of my web project, prepared for analysis by Google Gemini.

**Project Purpose:** [A web dev project for my TAFE course and new business, MVW.]
**Technologies Used:** [PHP, Apache, MySQL, CSS, JavaScript.]
**Analysis Goal:** [Analyze for security, performance, and suggest refactoring for modern best practices.]

--- Directory Structure ---
[_local_files]/
    20250624-1128-schema.json
    202506241211-alsm_db.sql
    Generate-GeminiContext.ps1
    project_context.txt
[admin]/
    add_attribute.php
    add_category.php
    add_event.php
    add_option.php
    add_product.php
    add_variant.php
    delete_attribute.php
    delete_category.php
    delete_event.php
    delete_option.php
    delete_product.php
    delete_variant.php
    edit_attribute.php
    edit_category.php
    edit_event.php
    edit_option.php
    edit_product.php
    edit_variant.php
    index.php
    manage_attributes.php
    manage_categories.php
    manage_events.php
    manage_options.php
    manage_products.php
    manage_variants.php
[config]/
    db_config.php
[lib]/
[public_html]/
    [assets]/
        [css]/
            reset.css
            style.css
            style.css.map
        [images]/
        [js]/
            main.js
    about.html
    campsite_booking.html
    cart_actions.php
    checkout.php
    contact.html
    diagnose.php
    event_detail.html
    events.html
    index.html
    login.php
    logout.php
    merchandise.php
    order_confirmation.php
    place_order.php
    product_detail.php
    profile.php
    register.php
    test_db.php
    view_cart.php
[scss]/
    [abstracts]/
        _variables.scss
    [layout]/
        _footer.scss
        _header.scss
        _navigation.scss
    style.scss
[templates]/
    footer.php
    header.php
project_context.txt

--- File Contents ---

--- START FILE: project_context.txt ---
`$language

--- END FILE: project_context.txt ---
--- START FILE: admin/add_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
$error_message = '';
$success_message = '';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_name = trim($_POST['attribute_name']);
    $errors = [];

    // Validation
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicate attribute name
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attributes WHERE name = :name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "An attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attributes (name) VALUES (:name)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name]);

            $_SESSION['success_message'] = "Attribute '".htmlspecialchars($attribute_name)."' was created successfully!";
            header("Location: manage_attributes.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <form action="add_attribute.php" method="POST">
            <div class="mb-3">
                <label for="attribute_name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="attribute_name" name="attribute_name" placeholder="e.g., Color, Size, Material" value="<?= isset($_POST['attribute_name']) ? htmlspecialchars($_POST['attribute_name']) : '' ?>" required>
                <div class="form-text">This is the type of variation (e.g., "Color"). You will add the specific options (e.g., "Red", "Blue") in the next step.</div>
            </div>

            <button type="submit" class="btn btn-primary">Save Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_attribute.php ---
--- START FILE: admin/add_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access this page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new category data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the "Add Category" form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize the form data
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    }

    // 3. Check for duplicate category name before inserting
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM categories WHERE category_name = :category_name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "A category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes and no duplicates are found, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO categories (category_name, description) VALUES (:category_name, :description)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description
            ]);

            // Set a success message in the session and redirect back to the main management page.
            // This is a good pattern, as it prevents form resubmission on refresh.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was created successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, set a generic error message.
            $error_message = "Database Error: Could not create the category. " . $e->getMessage();
        }
    } else {
        // If there were validation errors, combine them into a single message.
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_category.php" method="POST">
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= isset($_POST['category_name']) ? htmlspecialchars($_POST['category_name']) : '' ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Save Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_category.php ---
--- START FILE: admin/add_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access the page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new event data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any success or error messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and trim the form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    // Description is not trimmed to allow for intentional whitespace.
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } else {
        // 3. If validation passes, proceed with database insertion.
        try {
            $sql = "INSERT INTO Events (event_name, description, start_date, end_date, location, created_by_user_id) VALUES (:event_name, :description, :start_date, :end_date, :location, :admin_id)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'] // Log which admin created the event
            ]);

            // Set a success message and redirect back to the main management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was created successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, show an error.
            $error_message = "Database Error: Could not create the event. " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_event.php" method="POST">
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" required>
            </div>

            <button type="submit" class="btn btn-primary">Save Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_event.php ---
--- START FILE: admin/add_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING (for page context) ---
try {
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }
} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate attribute_id from the hidden form field
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['option_value']);
    $errors = [];

    // Validation
    if (!$attribute_id_post || $attribute_id_post != $attribute_id) {
        $errors[] = "Attribute ID mismatch.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value is required.";
    }

    // Check for duplicate option value for this specific attribute
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }
    
    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attribute_options (attribute_id, value) VALUES (:attribute_id, :value)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);

            $_SESSION['success_message'] = "Option '".htmlspecialchars($option_value)."' was added successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if (!$attribute && !$error_message): ?>
            <div class="alert alert-danger">Attribute not found.</div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">Add New Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>

            <?php if ($error_message): ?>
                <div class="alert alert-danger"><?= $error_message ?></div>
            <?php endif; ?>

            <form action="add_option.php?attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="attribute_id" value="<?= $attribute_id ?>">
                <div class="mb-3">
                    <label for="option_value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="option_value" name="option_value" placeholder="e.g., Red, Large, Cotton" value="<?= isset($_POST['option_value']) ? htmlspecialchars($_POST['option_value']) : '' ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Save Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_option.php ---
--- START FILE: admin/add_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$categories = [];

// --- DATA FETCHING for Category Dropdown ---
// This part runs on every page load to populate the category dropdown.
try {
    $stmt = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
// This block only runs when the form is submitted via POST.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize form data
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }
    
    // 3. If validation passes, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO products (product_name, description, category_id, base_price, stock_quantity) VALUES (:product_name, :description, :category_id, :base_price, :stock_quantity)";
            $stmt = $pdo->prepare($sql);
            
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity
            ]);

            // Set success message and redirect
            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was created successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if (empty($categories) && $_SERVER["REQUEST_METHOD"] != "POST"): ?>
            <div class="alert alert-warning">
                You must <a href="add_category.php">create a category</a> before you can add a product.
            </div>
        <?php else: ?>
        <form action="add_product.php" method="POST">
            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= isset($_POST['product_name']) ? htmlspecialchars($_POST['product_name']) : '' ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= (isset($_POST['category_id']) && $_POST['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= isset($_POST['base_price']) ? htmlspecialchars($_POST['base_price']) : '' ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= isset($_POST['stock_quantity']) ? htmlspecialchars($_POST['stock_quantity']) : '' ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Save Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_product.php ---
--- START FILE: admin/add_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$attributes = [];
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    header("Location: manage_products.php?error=noproductid");
    exit();
}

// --- DATA FETCHING (Product Name and Attributes with their Options) ---
try {
    // 1. Fetch the parent product name
    $sql_product = "SELECT product_name FROM products WHERE product_id = :product_id";
    $stmt_product = $pdo->prepare($sql_product);
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        throw new Exception("Product not found.");
    }

    // 2. Fetch all attributes and their options to build the form
    $sql_attrs = "SELECT a.attribute_id, a.name, ao.option_id, ao.value 
                  FROM attributes a
                  JOIN attribute_options ao ON a.attribute_id = ao.attribute_id
                  ORDER BY a.name, ao.value";
    $stmt_attrs = $pdo->query($sql_attrs);
    $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);

    // Group options by attribute for easy form generation
    foreach ($all_options as $option) {
        $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
        $attributes[$option['name']]['options'][] = [
            'option_id' => $option['option_id'],
            'value' => $option['value']
        ];
    }

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id_post = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $sku = trim($_POST['sku']);
    $price = trim($_POST['price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $selected_options = $_POST['options'] ?? [];
    
    // --- Validation ---
    $errors = [];
    if ($product_id_post != $product_id) $errors[] = "Product ID mismatch.";
    if ($stock_quantity === false || $stock_quantity < 0) $errors[] = "Stock quantity must be a valid, non-negative integer.";
    if (!empty($price) && (!is_numeric($price) || $price < 0)) $errors[] = "Price must be a valid, non-negative number if specified.";
    if (empty($selected_options)) $errors[] = "You must select at least one option for the variant.";

    if (empty($errors)) {
        $pdo->beginTransaction();
        try {
            // Step 1: Insert the main variant record
            $sql_variant = "INSERT INTO product_variants (product_id, sku, price, stock_quantity) VALUES (:product_id, :sku, :price, :stock_quantity)";
            $stmt_variant = $pdo->prepare($sql_variant);
            $stmt_variant->execute([
                ':product_id' => $product_id,
                ':sku' => !empty($sku) ? $sku : null,
                ':price' => !empty($price) ? $price : null,
                ':stock_quantity' => $stock_quantity
            ]);
            $variant_id = $pdo->lastInsertId();

            // Step 2: Link the selected options to the new variant
            $sql_link = "INSERT INTO product_variant_options (variant_id, option_id) VALUES (:variant_id, :option_id)";
            $stmt_link = $pdo->prepare($sql_link);
            foreach ($selected_options as $option_id) {
                $stmt_link->execute([
                    ':variant_id' => $variant_id,
                    ':option_id' => $option_id
                ]);
            }
            
            // If everything was successful, commit the transaction
            $pdo->commit();
            
            $_SESSION['success_message'] = "New variant was created successfully!";
            header("Location: manage_variants.php?product_id=" . $product_id);
            exit();

        } catch (Exception $e) {
            // If any part fails, roll back the transaction
            $pdo->rollBack();
            $error_message = "Database transaction failed: " . $e->getMessage();
        }
    } else {
        $error_message = implode("<br>", $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
            <h1 class="mb-4">Add Variant for: <strong><?= htmlspecialchars($product['product_name']) ?></strong></h1>

            <form action="add_variant.php?product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="product_id" value="<?= $product_id ?>">

                <div class="card p-3 mb-4">
                    <h5>Variant Attributes</h5>
                    <p class="text-muted">Select one option from each relevant attribute group to define this unique variant.</p>
                    <div class="row">
                        <?php if (!empty($attributes)): ?>
                            <?php foreach ($attributes as $name => $data): ?>
                                <div class="col-md-4 mb-3">
                                    <label for="option_<?= $data['attribute_id'] ?>" class="form-label"><strong><?= htmlspecialchars($name) ?></strong></label>
                                    <select class="form-select" name="options[]" id="option_<?= $data['attribute_id'] ?>">
                                        <option value="">-- Select <?= htmlspecialchars($name) ?> --</option>
                                        <?php foreach ($data['options'] as $option): ?>
                                            <option value="<?= $option['option_id'] ?>"><?= htmlspecialchars($option['value']) ?></option>
                                        <?php endforeach; ?>
                                    </select>
                                </div>
                            <?php endforeach; ?>
                        <?php else: ?>
                            <div class="col">
                                <p class="text-warning">No attributes have been defined yet. Please <a href="manage_attributes.php">add attributes and options</a> first.</p>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <div class="card p-3">
                    <h5>Variant Details</h5>
                     <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="sku" class="form-label">SKU (Optional)</label>
                            <input type="text" class="form-control" id="sku" name="sku" placeholder="Unique product code">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="price" class="form-label">Specific Price (Optional)</label>
                             <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" placeholder="Overrides base price">
                            </div>
                        </div>
                         <div class="col-md-4 mb-3">
                            <label for="stock_quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="0" required>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary" <?= empty($attributes) ? 'disabled' : '' ?>>Save Variant</button>
                    <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_variant.php ---
--- START FILE: admin/delete_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute_name = '';
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// This is the most important part of the script. Before we can delete an attribute,
// we must check if any of its options are being used by any product variants.
function isAttributeInUse($pdo, $attribute_id) {
    $sql = "SELECT COUNT(*) 
            FROM product_variant_options pvo
            JOIN attribute_options ao ON pvo.option_id = ao.option_id
            WHERE ao.attribute_id = :attribute_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':attribute_id' => $attribute_id]);
    return $stmt->fetchColumn() > 0;
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);

    if ($attribute_id) {
        if (isAttributeInUse($pdo, $attribute_id)) {
            $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
        } else {
            try {
                // Because the foreign key has ON DELETE CASCADE, deleting the attribute
                // will automatically delete all its associated options.
                $sql = "DELETE FROM attributes WHERE attribute_id = :attribute_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':attribute_id' => $attribute_id]);

                $_SESSION['success_message'] = "The attribute and all its options were successfully deleted.";
                header("Location: manage_attributes.php");
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the attribute. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Attribute ID. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    if (isAttributeInUse($pdo, $attribute_id)) {
        $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
    } else {
        try {
            $sql = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':attribute_id' => $attribute_id]);
            $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($attribute) {
                $attribute_name = $attribute['name'];
            } else {
                $error_message = "No attribute found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: " . $e->getMessage();
        }
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the attribute: <strong><?= htmlspecialchars($attribute_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This will also delete all of its associated options (e.g., deleting 'Color' will also delete 'Red', 'Blue', etc.). This action cannot be undone.</p>
            </div>

            <form action="delete_attribute.php" method="POST">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_attribute.php ---
--- START FILE: admin/delete_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category_name = '';
$category_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    if ($category_id) {
        try {
            // First, check if any products are using this category.
            // This prevents orphaning products and maintains data integrity.
            $sql_check = "SELECT COUNT(*) FROM products WHERE category_id = :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_id' => $category_id]);
            
            if ($stmt_check->fetchColumn() > 0) {
                // If products are using this category, prevent deletion.
                $error_message = "Cannot delete this category because it is currently assigned to one or more products. Please reassign the products to another category before deleting this one.";
            } else {
                // If no products are using it, proceed with deletion.
                $sql = "DELETE FROM categories WHERE category_id = :category_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':category_id' => $category_id]);

                // Set a success message and redirect back to the management page.
                $_SESSION['success_message'] = "The category was successfully deleted.";
                header("Location: manage_categories.php");
                exit();
            }

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not delete the category. " . $e->getMessage();
        }
    } else {
        $error_message = "Invalid Category ID. Deletion failed.";
    }

// --- DATA FETCHING FOR CONFIRMATION PAGE (HANDLE GET REQUEST) ---
} else {
    $category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($category_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT category_name FROM categories WHERE category_id = :category_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':category_id' => $category_id]);
            $category = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($category) {
                $category_name = $category['category_name'];
            } else {
                $error_message = "No category found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Category ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_categories.php" class="btn btn-secondary">Back to Category Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the category: <strong><?= htmlspecialchars($category_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone. Any products in this category will need to be reassigned.</p>
            </div>

            <form action="delete_category.php" method="POST">
                <input type="hidden" name="category_id" value="<?= htmlspecialchars($category_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_category.php ---
--- START FILE: admin/delete_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event_name = '';
$event_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    if ($event_id) {
        try {
            // NOTE: For a more advanced system, you would first check if this event has
            // associated sub-events or registrations and prevent deletion if it does.
            // For now, we will proceed with a direct delete.
            $sql = "DELETE FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "The event was successfully deleted.";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // Handle potential foreign key constraint errors if sub-events exist
            if ($e->getCode() == '23000') {
                 $error_message = "Cannot delete this event because it has associated data (like sub-events or registrations). Please remove the associated data first.";
            } else {
                $error_message = "Database Error: Could not delete the event. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Event ID. Deletion failed.";
    }
} else {
    // --- DATA FETCHING FOR CONFIRMATION (HANDLE GET REQUEST) ---
    $event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($event_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT event_name FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);
            $event = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($event) {
                $event_name = $event['event_name'];
            } else {
                $error_message = "No event found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Event ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_events.php" class="btn btn-secondary">Back to Event Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the event: <strong><?= htmlspecialchars($event_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_event.php" method="POST">
                <input type="hidden" name="event_id" value="<?= htmlspecialchars($event_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_event.php ---
--- START FILE: admin/delete_option.php ---
`$language
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute = null;
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $attribute_name = trim($_POST['name']);
    $errors = [];

    // Validation
    if (!$attribute_id) {
        $errors[] = "Invalid Attribute ID.";
    }
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicates (excluding the current attribute)
    if (empty($errors)) {
        try {
            $sql_check = "SELECT attribute_id FROM attributes WHERE name = :name AND attribute_id != :attribute_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, perform the update
    if (empty($errors)) {
        try {
            $sql = "UPDATE attributes SET name = :name WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);

            $_SESSION['success_message'] = "Attribute name updated successfully!";
            header("Location: manage_attributes.php");
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // Repopulate attribute array for form redisplay on error
    $attribute = ['attribute_id' => $attribute_id, 'name' => $attribute_name];

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    try {
        $sql = "SELECT * FROM attributes WHERE attribute_id = :attribute_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute) {
            $error_message = "Attribute not found.";
            $attribute = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch attribute. " . $e->getMessage();
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($attribute): ?>
        <form action="edit_attribute.php?id=<?= htmlspecialchars($attribute_id) ?>" method="POST">
            <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute['attribute_id']) ?>">
            
            <div class="mb-3">
                <label for="name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="name" name="name" value="<?= htmlspecialchars($attribute['name']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_attributes.php" class="btn btn-primary">Back to Attribute Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_attribute.php ---
--- START FILE: admin/edit_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category = null; // This will hold the category data we are editing.
$category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get category ID from the URL.

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the edit form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the category_id from a hidden field in the form.
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and sanitize the submitted form data.
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation.
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    } elseif (!$category_id) {
        $errors[] = "Invalid Category ID. Cannot update.";
    }

    // 3. Check for duplicates (but exclude the current category being edited).
    if (empty($errors)) {
        try {
            $sql_check = "SELECT category_id FROM categories WHERE category_name = :category_name AND category_id != :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name, ':category_id' => $category_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes, proceed with the database UPDATE.
    if (empty($errors)) {
        try {
            $sql = "UPDATE categories SET 
                        category_name = :category_name, 
                        description = :description 
                    WHERE category_id = :category_id";

            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description,
                ':category_id' => $category_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was updated successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the category. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // If there was a validation error, we need to repopulate the $category variable to refill the form with the attempted values.
    $category = $_POST;
    // We need to ensure category_id is still in the array for the form's hidden field.
    $category['category_id'] = $category_id;


} elseif ($category_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded to get the category data from the DB.
    try {
        $sql = "SELECT * FROM categories WHERE category_id = :category_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':category_id' => $category_id]);
        $category = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$category) {
            $error_message = "No category found with this ID.";
            $category = null; // Ensure the form doesn't try to render.
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Category ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($category): // Only show the form if we successfully found a category to edit ?>
        <form action="edit_category.php?id=<?= htmlspecialchars($category_id) ?>" method="POST">
            <input type="hidden" name="category_id" value="<?= htmlspecialchars($category['category_id']) ?>">
            
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= htmlspecialchars($category['category_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($category['description']) ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Update Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <p>The requested category could not be found.</p>
            <a href="manage_categories.php" class="btn btn-primary">Back to Category Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_category.php ---
--- START FILE: admin/edit_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event = null; // This will hold the event data we fetch.
$event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get event ID from URL

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the event_id from a hidden field in the form
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and trim the submitted form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } elseif (!$event_id) {
        $error_message = "Invalid Event ID. Cannot update.";
    } else {
        // 3. If validation passes, proceed with the database UPDATE.
        try {
            $sql = "UPDATE Events SET 
                event_name = :event_name, 
                description = :description, 
                start_date = :start_date, 
                end_date = :end_date, 
                location = :location, 
                event_UpdatedByUser_Id = :admin_id 
            WHERE event_id = :event_id";

            $stmt = $pdo->prepare($sql);

            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'],
                ':event_id' => $event_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was updated successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the event. " . $e->getMessage();
        }
    }
    // If there was a validation error, we need to repopulate the $event variable to refill the form
    $event = $_POST;

} elseif ($event_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded, to get the data from the DB.
    try {
        $sql = "SELECT * FROM Events WHERE event_id = :event_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':event_id' => $event_id]);
        $event = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$event) {
            $error_message = "No event found with this ID.";
            $event = null; // Ensure the form doesn't try to render
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Event ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>

        <?php if ($event): // Only show the form if we successfully found an event to edit ?>
        <form action="edit_event.php?id=<?= htmlspecialchars($event_id) ?>" method="POST">
            <input type="hidden" name="event_id" value="<?= htmlspecialchars($event['event_id']) ?>">
            
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" value="<?= htmlspecialchars($event['event_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($event['description']) ?></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" value="<?= htmlspecialchars($event['start_date']) ?>" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" value="<?= htmlspecialchars($event['end_date']) ?>" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" value="<?= htmlspecialchars($event['location']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_events.php" class="btn btn-primary">Back to Event Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_event.php ---
--- START FILE: admin/edit_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$option = null;
$attribute = null;
$option_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE IDs ---
if (!$option_id || !$attribute_id) {
    header("Location: manage_attributes.php?error=invalidids");
    exit();
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate IDs from hidden form fields
    $option_id_post = filter_input(INPUT_POST, 'option_id', FILTER_VALIDATE_INT);
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['value']);
    $errors = [];

    // Validation
    if ($option_id_post !== $option_id || $attribute_id_post !== $attribute_id) {
        $errors[] = "ID mismatch. Update failed.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value cannot be empty.";
    }

    // Check for duplicate option value for this attribute, excluding the current option
    if (empty($errors)) {
        try {
            $sql_check = "SELECT option_id FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value AND option_id != :option_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value,
                ':option_id' => $option_id
            ]);
            if ($stmt_check->fetch()) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE attribute_options SET value = :value WHERE option_id = :option_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':value' => $option_value, ':option_id' => $option_id]);

            $_SESSION['success_message'] = "Option updated successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
     // Repopulate arrays for form redisplay on error
    $option = ['option_id' => $option_id, 'value' => $option_value, 'attribute_id' => $attribute_id];
    $attribute = ['attribute_id' => $attribute_id, 'name' => $_POST['attribute_name']];


// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    try {
        // Fetch the attribute details for context
        $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
        $stmt_attr = $pdo->prepare($sql_attr);
        $stmt_attr->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

        // Fetch the specific option to be edited
        $sql_opt = "SELECT * FROM attribute_options WHERE option_id = :option_id";
        $stmt_opt = $pdo->prepare($sql_opt);
        $stmt_opt->execute([':option_id' => $option_id]);
        $option = $stmt_opt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute || !$option) {
            $error_message = "Attribute or Option not found.";
            $option = null; // Prevent form rendering
        }

    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch details. " . $e->getMessage();
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php elseif ($option && $attribute): ?>
            <h1 class="mb-4">Edit Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>
            
            <form action="edit_option.php?id=<?= $option_id ?>&attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="option_id" value="<?= htmlspecialchars($option['option_id']) ?>">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <input type="hidden" name="attribute_name" value="<?= htmlspecialchars($attribute['name']) ?>">


                <div class="mb-3">
                    <label for="value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="value" name="value" value="<?= htmlspecialchars($option['value']) ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Update Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php else: ?>
            <div class="alert alert-info">Loading...</div>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_option.php ---
--- END FILE: admin/manage_events.php ---
--- START FILE: admin/manage_options.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$options = [];
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING ---
try {
    // 1. Fetch the parent attribute's name for context
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }

    // 2. Fetch all options belonging to this attribute
    $sql_opts = "SELECT option_id, value FROM attribute_options WHERE attribute_id = :attribute_id ORDER BY value ASC";
    $stmt_opts = $pdo->prepare($sql_opts);
    $stmt_opts->execute([':attribute_id' => $attribute_id]);
    $options = $stmt_opts->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Options - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">
                Manage Options for: <strong><?= htmlspecialchars($attribute['name']) ?></strong>
            </h1>

            <?php
            if (isset($_SESSION['success_message'])) {
                echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
                unset($_SESSION['success_message']);
            }
            ?>

            <div class="d-flex justify-content-between mb-3">
                <a href="manage_attributes.php" class="btn btn-secondary">&laquo; Back to Attributes</a>
                <a href="add_option.php?attribute_id=<?= $attribute_id ?>" class="btn btn-success">Add New Option</a>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Option Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($options)): ?>
                        <?php foreach ($options as $option): ?>
                            <tr>
                                <td><?= htmlspecialchars($option['value']) ?></td>
                                <td>
                                    <a href="edit_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-primary btn-sm">Edit</a>
                                    <a href="delete_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-danger btn-sm">Delete</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr>
                            <td colspan="2" class="text-center">No options found for this attribute.</td>
                        </tr>
                    <?php endif; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_options.php ---
--- START FILE: admin/manage_products.php ---
`$language
--- END FILE: public_html/events.html ---
--- START FILE: public_html/event_detail.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Event Details</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Event Detail Page</h2>
        <p>This page will serve as a template for individual event details.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>

--- END FILE: project_context.txt ---
--- START FILE: admin/add_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
$error_message = '';
$success_message = '';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_name = trim($_POST['attribute_name']);
    $errors = [];

    // Validation
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicate attribute name
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attributes WHERE name = :name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "An attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attributes (name) VALUES (:name)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name]);

            $_SESSION['success_message'] = "Attribute '".htmlspecialchars($attribute_name)."' was created successfully!";
            header("Location: manage_attributes.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <form action="add_attribute.php" method="POST">
            <div class="mb-3">
                <label for="attribute_name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="attribute_name" name="attribute_name" placeholder="e.g., Color, Size, Material" value="<?= isset($_POST['attribute_name']) ? htmlspecialchars($_POST['attribute_name']) : '' ?>" required>
                <div class="form-text">This is the type of variation (e.g., "Color"). You will add the specific options (e.g., "Red", "Blue") in the next step.</div>
            </div>

            <button type="submit" class="btn btn-primary">Save Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_attribute.php ---
--- START FILE: admin/add_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access this page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new category data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the "Add Category" form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize the form data
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    }

    // 3. Check for duplicate category name before inserting
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM categories WHERE category_name = :category_name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "A category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes and no duplicates are found, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO categories (category_name, description) VALUES (:category_name, :description)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description
            ]);

            // Set a success message in the session and redirect back to the main management page.
            // This is a good pattern, as it prevents form resubmission on refresh.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was created successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, set a generic error message.
            $error_message = "Database Error: Could not create the category. " . $e->getMessage();
        }
    } else {
        // If there were validation errors, combine them into a single message.
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_category.php" method="POST">
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= isset($_POST['category_name']) ? htmlspecialchars($_POST['category_name']) : '' ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Save Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_category.php ---
--- START FILE: admin/add_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access the page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new event data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any success or error messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and trim the form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    // Description is not trimmed to allow for intentional whitespace.
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } else {
        // 3. If validation passes, proceed with database insertion.
        try {
            $sql = "INSERT INTO Events (event_name, description, start_date, end_date, location, created_by_user_id) VALUES (:event_name, :description, :start_date, :end_date, :location, :admin_id)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'] // Log which admin created the event
            ]);

            // Set a success message and redirect back to the main management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was created successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, show an error.
            $error_message = "Database Error: Could not create the event. " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_event.php" method="POST">
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" required>
            </div>

            <button type="submit" class="btn btn-primary">Save Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_event.php ---
--- START FILE: admin/add_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING (for page context) ---
try {
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }
} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate attribute_id from the hidden form field
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['option_value']);
    $errors = [];

    // Validation
    if (!$attribute_id_post || $attribute_id_post != $attribute_id) {
        $errors[] = "Attribute ID mismatch.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value is required.";
    }

    // Check for duplicate option value for this specific attribute
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }
    
    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attribute_options (attribute_id, value) VALUES (:attribute_id, :value)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);

            $_SESSION['success_message'] = "Option '".htmlspecialchars($option_value)."' was added successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if (!$attribute && !$error_message): ?>
            <div class="alert alert-danger">Attribute not found.</div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">Add New Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>

            <?php if ($error_message): ?>
                <div class="alert alert-danger"><?= $error_message ?></div>
            <?php endif; ?>

            <form action="add_option.php?attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="attribute_id" value="<?= $attribute_id ?>">
                <div class="mb-3">
                    <label for="option_value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="option_value" name="option_value" placeholder="e.g., Red, Large, Cotton" value="<?= isset($_POST['option_value']) ? htmlspecialchars($_POST['option_value']) : '' ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Save Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_option.php ---
--- START FILE: admin/add_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$categories = [];

// --- DATA FETCHING for Category Dropdown ---
// This part runs on every page load to populate the category dropdown.
try {
    $stmt = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
// This block only runs when the form is submitted via POST.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize form data
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }
    
    // 3. If validation passes, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO products (product_name, description, category_id, base_price, stock_quantity) VALUES (:product_name, :description, :category_id, :base_price, :stock_quantity)";
            $stmt = $pdo->prepare($sql);
            
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity
            ]);

            // Set success message and redirect
            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was created successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if (empty($categories) && $_SERVER["REQUEST_METHOD"] != "POST"): ?>
            <div class="alert alert-warning">
                You must <a href="add_category.php">create a category</a> before you can add a product.
            </div>
        <?php else: ?>
        <form action="add_product.php" method="POST">
            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= isset($_POST['product_name']) ? htmlspecialchars($_POST['product_name']) : '' ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= (isset($_POST['category_id']) && $_POST['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= isset($_POST['base_price']) ? htmlspecialchars($_POST['base_price']) : '' ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= isset($_POST['stock_quantity']) ? htmlspecialchars($_POST['stock_quantity']) : '' ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Save Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_product.php ---
--- START FILE: admin/add_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$attributes = [];
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    header("Location: manage_products.php?error=noproductid");
    exit();
}

// --- DATA FETCHING (Product Name and Attributes with their Options) ---
try {
    // 1. Fetch the parent product name
    $sql_product = "SELECT product_name FROM products WHERE product_id = :product_id";
    $stmt_product = $pdo->prepare($sql_product);
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        throw new Exception("Product not found.");
    }

    // 2. Fetch all attributes and their options to build the form
    $sql_attrs = "SELECT a.attribute_id, a.name, ao.option_id, ao.value 
                  FROM attributes a
                  JOIN attribute_options ao ON a.attribute_id = ao.attribute_id
                  ORDER BY a.name, ao.value";
    $stmt_attrs = $pdo->query($sql_attrs);
    $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);

    // Group options by attribute for easy form generation
    foreach ($all_options as $option) {
        $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
        $attributes[$option['name']]['options'][] = [
            'option_id' => $option['option_id'],
            'value' => $option['value']
        ];
    }

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id_post = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $sku = trim($_POST['sku']);
    $price = trim($_POST['price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $selected_options = $_POST['options'] ?? [];
    
    // --- Validation ---
    $errors = [];
    if ($product_id_post != $product_id) $errors[] = "Product ID mismatch.";
    if ($stock_quantity === false || $stock_quantity < 0) $errors[] = "Stock quantity must be a valid, non-negative integer.";
    if (!empty($price) && (!is_numeric($price) || $price < 0)) $errors[] = "Price must be a valid, non-negative number if specified.";
    if (empty($selected_options)) $errors[] = "You must select at least one option for the variant.";

    if (empty($errors)) {
        $pdo->beginTransaction();
        try {
            // Step 1: Insert the main variant record
            $sql_variant = "INSERT INTO product_variants (product_id, sku, price, stock_quantity) VALUES (:product_id, :sku, :price, :stock_quantity)";
            $stmt_variant = $pdo->prepare($sql_variant);
            $stmt_variant->execute([
                ':product_id' => $product_id,
                ':sku' => !empty($sku) ? $sku : null,
                ':price' => !empty($price) ? $price : null,
                ':stock_quantity' => $stock_quantity
            ]);
            $variant_id = $pdo->lastInsertId();

            // Step 2: Link the selected options to the new variant
            $sql_link = "INSERT INTO product_variant_options (variant_id, option_id) VALUES (:variant_id, :option_id)";
            $stmt_link = $pdo->prepare($sql_link);
            foreach ($selected_options as $option_id) {
                $stmt_link->execute([
                    ':variant_id' => $variant_id,
                    ':option_id' => $option_id
                ]);
            }
            
            // If everything was successful, commit the transaction
            $pdo->commit();
            
            $_SESSION['success_message'] = "New variant was created successfully!";
            header("Location: manage_variants.php?product_id=" . $product_id);
            exit();

        } catch (Exception $e) {
            // If any part fails, roll back the transaction
            $pdo->rollBack();
            $error_message = "Database transaction failed: " . $e->getMessage();
        }
    } else {
        $error_message = implode("<br>", $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
            <h1 class="mb-4">Add Variant for: <strong><?= htmlspecialchars($product['product_name']) ?></strong></h1>

            <form action="add_variant.php?product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="product_id" value="<?= $product_id ?>">

                <div class="card p-3 mb-4">
                    <h5>Variant Attributes</h5>
                    <p class="text-muted">Select one option from each relevant attribute group to define this unique variant.</p>
                    <div class="row">
                        <?php if (!empty($attributes)): ?>
                            <?php foreach ($attributes as $name => $data): ?>
                                <div class="col-md-4 mb-3">
                                    <label for="option_<?= $data['attribute_id'] ?>" class="form-label"><strong><?= htmlspecialchars($name) ?></strong></label>
                                    <select class="form-select" name="options[]" id="option_<?= $data['attribute_id'] ?>">
                                        <option value="">-- Select <?= htmlspecialchars($name) ?> --</option>
                                        <?php foreach ($data['options'] as $option): ?>
                                            <option value="<?= $option['option_id'] ?>"><?= htmlspecialchars($option['value']) ?></option>
                                        <?php endforeach; ?>
                                    </select>
                                </div>
                            <?php endforeach; ?>
                        <?php else: ?>
                            <div class="col">
                                <p class="text-warning">No attributes have been defined yet. Please <a href="manage_attributes.php">add attributes and options</a> first.</p>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <div class="card p-3">
                    <h5>Variant Details</h5>
                     <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="sku" class="form-label">SKU (Optional)</label>
                            <input type="text" class="form-control" id="sku" name="sku" placeholder="Unique product code">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="price" class="form-label">Specific Price (Optional)</label>
                             <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" placeholder="Overrides base price">
                            </div>
                        </div>
                         <div class="col-md-4 mb-3">
                            <label for="stock_quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="0" required>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary" <?= empty($attributes) ? 'disabled' : '' ?>>Save Variant</button>
                    <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_variant.php ---
--- START FILE: admin/delete_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute_name = '';
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// This is the most important part of the script. Before we can delete an attribute,
// we must check if any of its options are being used by any product variants.
function isAttributeInUse($pdo, $attribute_id) {
    $sql = "SELECT COUNT(*) 
            FROM product_variant_options pvo
            JOIN attribute_options ao ON pvo.option_id = ao.option_id
            WHERE ao.attribute_id = :attribute_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':attribute_id' => $attribute_id]);
    return $stmt->fetchColumn() > 0;
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);

    if ($attribute_id) {
        if (isAttributeInUse($pdo, $attribute_id)) {
            $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
        } else {
            try {
                // Because the foreign key has ON DELETE CASCADE, deleting the attribute
                // will automatically delete all its associated options.
                $sql = "DELETE FROM attributes WHERE attribute_id = :attribute_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':attribute_id' => $attribute_id]);

                $_SESSION['success_message'] = "The attribute and all its options were successfully deleted.";
                header("Location: manage_attributes.php");
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the attribute. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Attribute ID. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    if (isAttributeInUse($pdo, $attribute_id)) {
        $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
    } else {
        try {
            $sql = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':attribute_id' => $attribute_id]);
            $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($attribute) {
                $attribute_name = $attribute['name'];
            } else {
                $error_message = "No attribute found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: " . $e->getMessage();
        }
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the attribute: <strong><?= htmlspecialchars($attribute_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This will also delete all of its associated options (e.g., deleting 'Color' will also delete 'Red', 'Blue', etc.). This action cannot be undone.</p>
            </div>

            <form action="delete_attribute.php" method="POST">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_attribute.php ---
--- START FILE: admin/delete_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category_name = '';
$category_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    if ($category_id) {
        try {
            // First, check if any products are using this category.
            // This prevents orphaning products and maintains data integrity.
            $sql_check = "SELECT COUNT(*) FROM products WHERE category_id = :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_id' => $category_id]);
            
            if ($stmt_check->fetchColumn() > 0) {
                // If products are using this category, prevent deletion.
                $error_message = "Cannot delete this category because it is currently assigned to one or more products. Please reassign the products to another category before deleting this one.";
            } else {
                // If no products are using it, proceed with deletion.
                $sql = "DELETE FROM categories WHERE category_id = :category_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':category_id' => $category_id]);

                // Set a success message and redirect back to the management page.
                $_SESSION['success_message'] = "The category was successfully deleted.";
                header("Location: manage_categories.php");
                exit();
            }

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not delete the category. " . $e->getMessage();
        }
    } else {
        $error_message = "Invalid Category ID. Deletion failed.";
    }

// --- DATA FETCHING FOR CONFIRMATION PAGE (HANDLE GET REQUEST) ---
} else {
    $category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($category_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT category_name FROM categories WHERE category_id = :category_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':category_id' => $category_id]);
            $category = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($category) {
                $category_name = $category['category_name'];
            } else {
                $error_message = "No category found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Category ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_categories.php" class="btn btn-secondary">Back to Category Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the category: <strong><?= htmlspecialchars($category_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone. Any products in this category will need to be reassigned.</p>
            </div>

            <form action="delete_category.php" method="POST">
                <input type="hidden" name="category_id" value="<?= htmlspecialchars($category_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_category.php ---
--- START FILE: admin/delete_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event_name = '';
$event_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    if ($event_id) {
        try {
            // NOTE: For a more advanced system, you would first check if this event has
            // associated sub-events or registrations and prevent deletion if it does.
            // For now, we will proceed with a direct delete.
            $sql = "DELETE FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "The event was successfully deleted.";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // Handle potential foreign key constraint errors if sub-events exist
            if ($e->getCode() == '23000') {
                 $error_message = "Cannot delete this event because it has associated data (like sub-events or registrations). Please remove the associated data first.";
            } else {
                $error_message = "Database Error: Could not delete the event. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Event ID. Deletion failed.";
    }
} else {
    // --- DATA FETCHING FOR CONFIRMATION (HANDLE GET REQUEST) ---
    $event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($event_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT event_name FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);
            $event = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($event) {
                $event_name = $event['event_name'];
            } else {
                $error_message = "No event found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Event ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_events.php" class="btn btn-secondary">Back to Event Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the event: <strong><?= htmlspecialchars($event_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_event.php" method="POST">
                <input type="hidden" name="event_id" value="<?= htmlspecialchars($event_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_event.php ---
--- START FILE: admin/delete_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$option_value = '';
$option_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT); // For redirection

// --- VALIDATE IDs ---
if (!$option_id || !$attribute_id) {
    header("Location: manage_attributes.php?error=invalidids");
    exit();
}

// Helper function to check if the option is in use
function isOptionInUse($pdo, $option_id) {
    $sql = "SELECT COUNT(*) FROM product_variant_options WHERE option_id = :option_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':option_id' => $option_id]);
    return $stmt->fetchColumn() > 0;
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $option_id_post = filter_input(INPUT_POST, 'option_id', FILTER_VALIDATE_INT);

    if ($option_id_post === $option_id) {
        if (isOptionInUse($pdo, $option_id)) {
            $error_message = "Cannot delete this option because it is currently in use by a product variant.";
        } else {
            try {
                $sql = "DELETE FROM attribute_options WHERE option_id = :option_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':option_id' => $option_id]);

                $_SESSION['success_message'] = "The option was successfully deleted.";
                header("Location: manage_options.php?attribute_id=" . $attribute_id);
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the option. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "ID mismatch. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    if (isOptionInUse($pdo, $option_id)) {
        $error_message = "Cannot delete this option because it is in use by at least one product variant. You must edit or remove the variant(s) using this option first.";
    } else {
        try {
            // Fetch option value for the confirmation message
            $sql = "SELECT value FROM attribute_options WHERE option_id = :option_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':option_id' => $option_id]);
            $option = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($option) {
                $option_value = $option['value'];
            } else {
                $error_message = "No option found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Option</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Back to Options</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the option: <strong><?= htmlspecialchars($option_value) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_option.php?id=<?= $option_id ?>&attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="option_id" value="<?= htmlspecialchars($option_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_option.php ---
--- START FILE: admin/delete_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$categories = [];
$product_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- DATA FETCHING (for both categories and the specific product) ---
// Fetch all categories for the dropdown menu
try {
    $stmt_cat = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt_cat->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM SUBMISSION LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and validate form data
    $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (!$product_id) {
        $errors[] = "Invalid Product ID. Update failed.";
    }
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }

    // 3. If validation passes, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE products SET 
                        product_name = :product_name, 
                        description = :description, 
                        category_id = :category_id, 
                        base_price = :base_price, 
                        stock_quantity = :stock_quantity 
                    WHERE product_id = :product_id";
            
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity,
                ':product_id' => $product_id
            ]);

            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was updated successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    
    // If validation fails, repopulate the product array to refill the form with submitted values
    $product = $_POST;
    $product['product_id'] = $product_id; // ensure ID is preserved

// --- INITIAL PAGE LOAD LOGIC (GET REQUEST) ---
} elseif ($product_id && empty($error_message)) {
    try {
        $sql_prod = "SELECT * FROM products WHERE product_id = :product_id";
        $stmt_prod = $pdo->prepare($sql_prod);
        $stmt_prod->execute([':product_id' => $product_id]);
        $product = $stmt_prod->fetch(PDO::FETCH_ASSOC);

        if (!$product) {
            $error_message = "No product found with this ID.";
            $product = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch product details. " . $e->getMessage();
    }
} elseif (!$product_id) {
    $error_message = "No Product ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
        <form action="edit_product.php?id=<?= htmlspecialchars($product_id) ?>" method="POST">
            <input type="hidden" name="product_id" value="<?= htmlspecialchars($product['product_id']) ?>">

            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= htmlspecialchars($product['product_name']) ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= ($product['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($product['description']) ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= htmlspecialchars($product['base_price']) ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= htmlspecialchars($product['stock_quantity']) ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Update Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php elseif(empty($error_message)): ?>
            <div class="alert alert-warning">Loading product data...</div>
        <?php else: ?>
             <a href="manage_products.php" class="btn btn-primary">Back to Product Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.
--- END FILE: admin/delete_product.php ---
--- START FILE: admin/delete_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$variant_details = '';
$variant_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT); // For redirection

// --- VALIDATE IDs ---
if (!$variant_id || !$product_id) {
    header("Location: manage_products.php?error=invalidids");
    exit();
}

// Helper function to check if the variant has been ordered.
function isVariantInUse($pdo, $variant_id) {
    $sql = "SELECT COUNT(*) FROM orderitems WHERE variant_id = :variant_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':variant_id' => $variant_id]);
    return $stmt->fetchColumn() > 0;
}

// Helper function to get the variant's descriptive string
function getVariantDetails($pdo, $variant_id) {
    $sql = "SELECT GROUP_CONCAT(CONCAT(a.name, ': ', ao.value) ORDER BY a.name SEPARATOR ', ') AS options_string
            FROM product_variants pv
            LEFT JOIN product_variant_options pvo ON pv.variant_id = pvo.variant_id
            LEFT JOIN attribute_options ao ON pvo.option_id = ao.option_id
            LEFT JOIN attributes a ON ao.attribute_id = a.attribute_id
            WHERE pv.variant_id = :variant_id
            GROUP BY pv.variant_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':variant_id' => $variant_id]);
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    return $result ? $result['options_string'] : 'Unknown Variant';
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $variant_id_post = filter_input(INPUT_POST, 'variant_id', FILTER_VALIDATE_INT);

    if ($variant_id_post === $variant_id) {
        if (isVariantInUse($pdo, $variant_id)) {
            $error_message = "Cannot delete this variant because it is part of one or more past orders.";
        } else {
            try {
                // The ON DELETE CASCADE constraint will automatically remove entries
                // from product_variant_options when the variant is deleted.
                $sql = "DELETE FROM product_variants WHERE variant_id = :variant_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':variant_id' => $variant_id]);

                $_SESSION['success_message'] = "The variant was successfully deleted.";
                header("Location: manage_variants.php?product_id=" . $product_id);
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the variant. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "ID mismatch. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    if (isVariantInUse($pdo, $variant_id)) {
        $error_message = "Cannot delete this variant because it is part of one or more past orders. To make it unavailable, please edit it and set its stock to 0.";
    } else {
        $variant_details = getVariantDetails($pdo, $variant_id);
        if ($variant_details === 'Unknown Variant') {
             $error_message = "Could not find the specified variant.";
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Variant</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Back to Variants</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the variant with the following options: <strong><?= htmlspecialchars($variant_details) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_variant.php?id=<?= $variant_id ?>&product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="variant_id" value="<?= htmlspecialchars($variant_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_variant.php ---
--- START FILE: admin/edit_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute = null;
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $attribute_name = trim($_POST['name']);
    $errors = [];

    // Validation
    if (!$attribute_id) {
        $errors[] = "Invalid Attribute ID.";
    }
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicates (excluding the current attribute)
    if (empty($errors)) {
        try {
            $sql_check = "SELECT attribute_id FROM attributes WHERE name = :name AND attribute_id != :attribute_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, perform the update
    if (empty($errors)) {
        try {
            $sql = "UPDATE attributes SET name = :name WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);

            $_SESSION['success_message'] = "Attribute name updated successfully!";
            header("Location: manage_attributes.php");
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // Repopulate attribute array for form redisplay on error
    $attribute = ['attribute_id' => $attribute_id, 'name' => $attribute_name];

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    try {
        $sql = "SELECT * FROM attributes WHERE attribute_id = :attribute_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute) {
            $error_message = "Attribute not found.";
            $attribute = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch attribute. " . $e->getMessage();
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($attribute): ?>
        <form action="edit_attribute.php?id=<?= htmlspecialchars($attribute_id) ?>" method="POST">
            <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute['attribute_id']) ?>">
            
            <div class="mb-3">
                <label for="name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="name" name="name" value="<?= htmlspecialchars($attribute['name']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_attributes.php" class="btn btn-primary">Back to Attribute Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_attribute.php ---
--- START FILE: admin/edit_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category = null; // This will hold the category data we are editing.
$category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get category ID from the URL.

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the edit form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the category_id from a hidden field in the form.
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and sanitize the submitted form data.
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation.
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    } elseif (!$category_id) {
        $errors[] = "Invalid Category ID. Cannot update.";
    }

    // 3. Check for duplicates (but exclude the current category being edited).
    if (empty($errors)) {
        try {
            $sql_check = "SELECT category_id FROM categories WHERE category_name = :category_name AND category_id != :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name, ':category_id' => $category_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes, proceed with the database UPDATE.
    if (empty($errors)) {
        try {
            $sql = "UPDATE categories SET 
                        category_name = :category_name, 
                        description = :description 
                    WHERE category_id = :category_id";

            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description,
                ':category_id' => $category_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was updated successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the category. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // If there was a validation error, we need to repopulate the $category variable to refill the form with the attempted values.
    $category = $_POST;
    // We need to ensure category_id is still in the array for the form's hidden field.
    $category['category_id'] = $category_id;


} elseif ($category_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded to get the category data from the DB.
    try {
        $sql = "SELECT * FROM categories WHERE category_id = :category_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':category_id' => $category_id]);
        $category = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$category) {
            $error_message = "No category found with this ID.";
            $category = null; // Ensure the form doesn't try to render.
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Category ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($category): // Only show the form if we successfully found a category to edit ?>
        <form action="edit_category.php?id=<?= htmlspecialchars($category_id) ?>" method="POST">
            <input type="hidden" name="category_id" value="<?= htmlspecialchars($category['category_id']) ?>">
            
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= htmlspecialchars($category['category_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($category['description']) ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Update Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <p>The requested category could not be found.</p>
            <a href="manage_categories.php" class="btn btn-primary">Back to Category Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_category.php ---
--- START FILE: admin/edit_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event = null; // This will hold the event data we fetch.
$event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get event ID from URL

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the event_id from a hidden field in the form
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and trim the submitted form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } elseif (!$event_id) {
        $error_message = "Invalid Event ID. Cannot update.";
    } else {
        // 3. If validation passes, proceed with the database UPDATE.
        try {
            $sql = "UPDATE Events SET 
                event_name = :event_name, 
                description = :description, 
                start_date = :start_date, 
                end_date = :end_date, 
                location = :location, 
                event_UpdatedByUser_Id = :admin_id 
            WHERE event_id = :event_id";

            $stmt = $pdo->prepare($sql);

            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'],
                ':event_id' => $event_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was updated successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the event. " . $e->getMessage();
        }
    }
    // If there was a validation error, we need to repopulate the $event variable to refill the form
    $event = $_POST;

} elseif ($event_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded, to get the data from the DB.
    try {
        $sql = "SELECT * FROM Events WHERE event_id = :event_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':event_id' => $event_id]);
        $event = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$event) {
            $error_message = "No event found with this ID.";
            $event = null; // Ensure the form doesn't try to render
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Event ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>

        <?php if ($event): // Only show the form if we successfully found an event to edit ?>
        <form action="edit_event.php?id=<?= htmlspecialchars($event_id) ?>" method="POST">
            <input type="hidden" name="event_id" value="<?= htmlspecialchars($event['event_id']) ?>">
            
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" value="<?= htmlspecialchars($event['event_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($event['description']) ?></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" value="<?= htmlspecialchars($event['start_date']) ?>" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" value="<?= htmlspecialchars($event['end_date']) ?>" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" value="<?= htmlspecialchars($event['location']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_events.php" class="btn btn-primary">Back to Event Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_event.php ---
--- START FILE: admin/edit_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$option = null;
$attribute = null;
$option_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE IDs ---
if (!$option_id || !$attribute_id) {
    header("Location: manage_attributes.php?error=invalidids");
    exit();
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate IDs from hidden form fields
    $option_id_post = filter_input(INPUT_POST, 'option_id', FILTER_VALIDATE_INT);
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['value']);
    $errors = [];

    // Validation
    if ($option_id_post !== $option_id || $attribute_id_post !== $attribute_id) {
        $errors[] = "ID mismatch. Update failed.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value cannot be empty.";
    }

    // Check for duplicate option value for this attribute, excluding the current option
    if (empty($errors)) {
        try {
            $sql_check = "SELECT option_id FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value AND option_id != :option_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value,
                ':option_id' => $option_id
            ]);
            if ($stmt_check->fetch()) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE attribute_options SET value = :value WHERE option_id = :option_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':value' => $option_value, ':option_id' => $option_id]);

            $_SESSION['success_message'] = "Option updated successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
     // Repopulate arrays for form redisplay on error
    $option = ['option_id' => $option_id, 'value' => $option_value, 'attribute_id' => $attribute_id];
    $attribute = ['attribute_id' => $attribute_id, 'name' => $_POST['attribute_name']];


// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    try {
        // Fetch the attribute details for context
        $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
        $stmt_attr = $pdo->prepare($sql_attr);
        $stmt_attr->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

        // Fetch the specific option to be edited
        $sql_opt = "SELECT * FROM attribute_options WHERE option_id = :option_id";
        $stmt_opt = $pdo->prepare($sql_opt);
        $stmt_opt->execute([':option_id' => $option_id]);
        $option = $stmt_opt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute || !$option) {
            $error_message = "Attribute or Option not found.";
            $option = null; // Prevent form rendering
        }

    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch details. " . $e->getMessage();
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php elseif ($option && $attribute): ?>
            <h1 class="mb-4">Edit Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>
            
            <form action="edit_option.php?id=<?= $option_id ?>&attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="option_id" value="<?= htmlspecialchars($option['option_id']) ?>">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <input type="hidden" name="attribute_name" value="<?= htmlspecialchars($attribute['name']) ?>">


                <div class="mb-3">
                    <label for="value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="value" name="value" value="<?= htmlspecialchars($option['value']) ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Update Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php else: ?>
            <div class="alert alert-info">Loading...</div>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_option.php ---
--- START FILE: admin/edit_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$categories = [];
$product_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- DATA FETCHING (for both categories and the specific product) ---
// Fetch all categories for the dropdown menu
try {
    $stmt_cat = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt_cat->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM SUBMISSION LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and validate form data
    $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (!$product_id) {
        $errors[] = "Invalid Product ID. Update failed.";
    }
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }

    // 3. If validation passes, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE products SET 
                        product_name = :product_name, 
                        description = :description, 
                        category_id = :category_id, 
                        base_price = :base_price, 
                        stock_quantity = :stock_quantity 
                    WHERE product_id = :product_id";
            
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity,
                ':product_id' => $product_id
            ]);

            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was updated successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    
    // If validation fails, repopulate the product array to refill the form with submitted values
    $product = $_POST;
    $product['product_id'] = $product_id; // ensure ID is preserved

// --- INITIAL PAGE LOAD LOGIC (GET REQUEST) ---
} elseif ($product_id && empty($error_message)) {
    try {
        $sql_prod = "SELECT * FROM products WHERE product_id = :product_id";
        $stmt_prod = $pdo->prepare($sql_prod);
        $stmt_prod->execute([':product_id' => $product_id]);
        $product = $stmt_prod->fetch(PDO::FETCH_ASSOC);

        if (!$product) {
            $error_message = "No product found with this ID.";
            $product = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch product details. " . $e->getMessage();
    }
} elseif (!$product_id) {
    $error_message = "No Product ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
        <form action="edit_product.php?id=<?= htmlspecialchars($product_id) ?>" method="POST">
            <input type="hidden" name="product_id" value="<?= htmlspecialchars($product['product_id']) ?>">

            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= htmlspecialchars($product['product_name']) ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= ($product['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($product['description']) ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= htmlspecialchars($product['base_price']) ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= htmlspecialchars($product['stock_quantity']) ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Update Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php elseif(empty($error_message)): ?>
            <div class="alert alert-warning">Loading product data...</div>
        <?php else: ?>
             <a href="manage_products.php" class="btn btn-primary">Back to Product Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_product.php ---
--- START FILE: admin/edit_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$variant = null;
$attributes = [];
$selected_option_ids = [];

$variant_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE IDs ---
if (!$variant_id || !$product_id) {
    header("Location: manage_products.php?error=invalidids");
    exit();
}

// --- DATA FETCHING (for initial page load) ---
if ($_SERVER["REQUEST_METHOD"] != "POST") {
    try {
        // Fetch product name
        $stmt_product = $pdo->prepare("SELECT product_name FROM products WHERE product_id = :product_id");
        $stmt_product->execute([':product_id' => $product_id]);
        $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

        // Fetch variant details
        $stmt_variant = $pdo->prepare("SELECT * FROM product_variants WHERE variant_id = :variant_id");
        $stmt_variant->execute([':variant_id' => $variant_id]);
        $variant = $stmt_variant->fetch(PDO::FETCH_ASSOC);
        
        if (!$product || !$variant) throw new Exception("Product or Variant not found.");

        // Fetch all available attributes and their options
        $stmt_attrs = $pdo->query("SELECT a.attribute_id, a.name, ao.option_id, ao.value FROM attributes a JOIN attribute_options ao ON a.attribute_id = ao.attribute_id ORDER BY a.name, ao.value");
        $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);
        foreach ($all_options as $option) {
            $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
            $attributes[$option['name']]['options'][] = ['option_id' => $option['option_id'], 'value' => $option['value']];
        }

        // Fetch the currently selected options for this variant
        $stmt_selected = $pdo->prepare("SELECT option_id FROM product_variant_options WHERE variant_id = :variant_id");
        $stmt_selected->execute([':variant_id' => $variant_id]);
        $selected_option_ids = $stmt_selected->fetchAll(PDO::FETCH_COLUMN);

    } catch (Exception $e) {
        $error_message = "Error fetching data: " . $e->getMessage();
    }
}


// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-fetch product name for context in case of error
    $stmt_product = $pdo->prepare("SELECT product_name FROM products WHERE product_id = :product_id");
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    // Repopulate attributes for form redisplay
    $stmt_attrs = $pdo->query("SELECT a.attribute_id, a.name, ao.option_id, ao.value FROM attributes a JOIN attribute_options ao ON a.attribute_id = ao.attribute_id ORDER BY a.name, ao.value");
    $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);
    foreach ($all_options as $option) {
        $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
        $attributes[$option['name']]['options'][] = ['option_id' => $option['option_id'], 'value' => $option['value']];
    }
    
    // Get submitted data
    $variant_id_post = filter_input(INPUT_POST, 'variant_id', FILTER_VALIDATE_INT);
    $sku = trim($_POST['sku']);
    $price = trim($_POST['price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $selected_options = $_POST['options'] ?? [];
    
    // --- Validation ---
    $errors = [];
    if ($variant_id_post !== $variant_id) $errors[] = "Variant ID mismatch.";
    if ($stock_quantity === false || $stock_quantity < 0) $errors[] = "Stock quantity must be a non-negative integer.";
    if (!empty($price) && !is_numeric($price)) $errors[] = "Price must be a number if specified.";
    if (empty($selected_options)) $errors[] = "A variant must have at least one option selected.";

    if (empty($errors)) {
        $pdo->beginTransaction();
        try {
            // Step 1: Update the main variant record
            $sql_variant = "UPDATE product_variants SET sku = :sku, price = :price, stock_quantity = :stock_quantity WHERE variant_id = :variant_id";
            $stmt_variant = $pdo->prepare($sql_variant);
            $stmt_variant->execute([
                ':sku' => !empty($sku) ? $sku : null,
                ':price' => !empty($price) ? $price : null,
                ':stock_quantity' => $stock_quantity,
                ':variant_id' => $variant_id
            ]);

            // Step 2: Delete old option links for this variant
            $stmt_delete_links = $pdo->prepare("DELETE FROM product_variant_options WHERE variant_id = :variant_id");
            $stmt_delete_links->execute([':variant_id' => $variant_id]);

            // Step 3: Insert the new option links
            $sql_link = "INSERT INTO product_variant_options (variant_id, option_id) VALUES (:variant_id, :option_id)";
            $stmt_link = $pdo->prepare($sql_link);
            foreach ($selected_options as $option_id) {
                if (!empty($option_id)) { // Ensure we don't insert empty values
                    $stmt_link->execute([':variant_id' => $variant_id, ':option_id' => $option_id]);
                }
            }
            
            $pdo->commit();
            
            $_SESSION['success_message'] = "Variant updated successfully!";
            header("Location: manage_variants.php?product_id=" . $product_id);
            exit();

        } catch (Exception $e) {
            $pdo->rollBack();
            $error_message = "Database transaction failed: " . $e->getMessage();
        }
    } else {
        $error_message = implode("<br>", $errors);
    }

    // Repopulate variant data for form redisplay on error
    $variant = $_POST;
    $selected_option_ids = $selected_options;
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product && $variant): ?>
            <h1 class="mb-4">Edit Variant for: <strong><?= htmlspecialchars($product['product_name']) ?></strong></h1>

            <form action="edit_variant.php?id=<?= $variant_id ?>&product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="variant_id" value="<?= $variant_id ?>">

                <div class="card p-3 mb-4">
                    <h5>Variant Attributes</h5>
                    <div class="row">
                        <?php foreach ($attributes as $name => $data): ?>
                            <div class="col-md-4 mb-3">
                                <label for="option_<?= $data['attribute_id'] ?>" class="form-label"><strong><?= htmlspecialchars($name) ?></strong></label>
                                <select class="form-select" name="options[]" id="option_<?= $data['attribute_id'] ?>">
                                    <option value="">-- Not Applicable --</option>
                                    <?php foreach ($data['options'] as $option): ?>
                                        <option value="<?= $option['option_id'] ?>" <?= in_array($option['option_id'], $selected_option_ids) ? 'selected' : '' ?>>
                                            <?= htmlspecialchars($option['value']) ?>
                                        </option>
                                    <?php endforeach; ?>
                                </select>
                            </div>
                        <?php endforeach; ?>
                    </div>
                </div>

                <div class="card p-3">
                    <h5>Variant Details</h5>
                     <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="sku" class="form-label">SKU (Optional)</label>
                            <input type="text" class="form-control" id="sku" name="sku" value="<?= htmlspecialchars($variant['sku'] ?? '') ?>">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="price" class="form-label">Specific Price (Optional)</label>
                             <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" value="<?= htmlspecialchars($variant['price'] ?? '') ?>" placeholder="Overrides base price">
                            </div>
                        </div>
                         <div class="col-md-4 mb-3">
                            <label for="stock_quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= htmlspecialchars($variant['stock_quantity'] ?? 0) ?>" required>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary">Update Variant</button>
                    <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_variant.php ---
--- START FILE: admin/index.php ---
`$language
<?php
session_start();

// Check if user is logged in AND is an admin
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If not an admin, or not logged in, redirect to the main login page
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// Admin content goes below this line
echo "<h1>Welcome to the Admin Dashboard, " . htmlspecialchars($_SESSION['username']) . "!</h1>";
?>
--- END FILE: admin/index.php ---
--- START FILE: admin/manage_attributes.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

$attributes = [];
$error_message = '';

try {
    // Fetch all attributes from the database
    $sql = "SELECT attribute_id, name FROM attributes ORDER BY name ASC";
    $stmt = $pdo->query($sql);
    $attributes = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch attributes. " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Attributes - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Manage Product Attributes</h1>

        <?php
        if (isset($_SESSION['success_message'])) {
            echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
            unset($_SESSION['success_message']);
        }
        if ($error_message) {
            echo '<div class="alert alert-danger">' . htmlspecialchars($error_message) . '</div>';
        }
        ?>

        <div class="d-flex justify-content-between mb-3">
             <a href="manage_products.php" class="btn btn-secondary">&laquo; Back to Products</a>
             <a href="add_attribute.php" class="btn btn-success">Add New Attribute</a>
        </div>


        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Attribute Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if (!empty($attributes)): ?>
                    <?php foreach ($attributes as $attribute): ?>
                        <tr>
                            <td><?= htmlspecialchars($attribute['name']) ?></td>
                            <td>
                                <!-- This will link to a page to manage the options (e.g., Red, Blue, Green for Color) -->
                                <a href="manage_options.php?attribute_id=<?= $attribute['attribute_id'] ?>" class="btn btn-info btn-sm">Manage Options</a>
                                <a href="edit_attribute.php?id=<?= $attribute['attribute_id'] ?>" class="btn btn-primary btn-sm">Edit Name</a>
                                <a href="delete_attribute.php?id=<?= $attribute['attribute_id'] ?>" class="btn btn-danger btn-sm">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="2" class="text-center">No attributes found. Click "Add New Attribute" to create one (e.g., 'Color', 'Size').</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_attributes.php ---
--- START FILE: admin/manage_categories.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();

// Ensure user is logged in and is an admin.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- DATABASE LOGIC & PAGE SETUP ---
require_once '../config/db_config.php';

$categories = []; // Initialize an empty array for categories
$error_message = '';

try {
    // Corrected SQL to use the 'categories' table and lowercase column names
    $sql = "SELECT category_id, category_name, description FROM categories ORDER BY category_name ASC";
    $stmt = $pdo->prepare($sql);
    $stmt->execute();
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    // If the query fails, set an error message to display
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Categories - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Category Management</h1>

        <?php
        // Display a success message if one was set in the session
        if (isset($_SESSION['success_message'])) {
            echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
            unset($_SESSION['success_message']);
        }
        // Display an error message if the database query failed
        if ($error_message) {
            echo '<div class="alert alert-danger">' . htmlspecialchars($error_message) . '</div>';
        }
        ?>

        <a href="add_category.php" class="btn btn-success mb-3">Add New Category</a>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if (!empty($categories)): ?>
                    <?php foreach ($categories as $category): ?>
                        <tr>
                            <td><?= htmlspecialchars($category['category_name']) ?></td>
                            <td><?= htmlspecialchars($category['description']) ?></td>
                            <td>
                                <a href="edit_category.php?id=<?= $category['category_id'] ?>" class="btn btn-primary btn-sm">Edit</a>
                                <a href="delete_category.php?id=<?= $category['category_id'] ?>" class="btn btn-danger btn-sm">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="3" class="text-center">No categories found. Click "Add New Category" to create one.</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_categories.php ---
--- START FILE: admin/manage_events.php ---
`$language
<?php

session_start();

if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- DATABASE LOGIC & PAGE SETUP BLOCK ---
// This part connects to the DB and gets the events.
require_once '../config/db_config.php';

try {
    $sql = "SELECT event_id, event_name, start_date, end_date, location FROM Events ORDER BY start_date DESC";
    $stmt = $pdo->prepare($sql);
    $stmt->execute();
    $events = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    // If the database connection or query fails, we'll see this error.
    die("Database Error: Could not fetch events. " . $e->getMessage());
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Events - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <?php
    // Check if a success message is set in the session, display it, then unset it.
    if (isset($_SESSION['success_message'])) {
        echo '<div class="container mt-3"><div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div></div>';
        unset($_SESSION['success_message']); // Clear the message so it doesn't show again on refresh
    }
    ?>
    <div class="container mt-5">
        <h1 class="mb-4">Event Management</h1>

        <a href="add_event.php" class="btn btn-success mb-3">Add New Event</a>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Location</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if ($events): ?>
                    <?php foreach ($events as $event): ?>
                        <tr>
                            <td><?= htmlspecialchars($event['event_name']) ?></td>
                            <td><?= htmlspecialchars($event['start_date']) ?></td>
                            <td><?= htmlspecialchars($event['end_date']) ?></td>
                            <td><?= htmlspecialchars($event['location']) ?></td>
                            <td>
                                <a href="edit_event.php?id=<?= $event['event_id'] ?>" class="btn btn-primary btn-sm">Edit</a>
                                <a href="delete_event.php?id=<?= $event['event_id'] ?>" class="btn btn-danger btn-sm">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="5" class="text-center">No events found. Click "Add New Event" to create one.</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_events.php ---
--- START FILE: admin/manage_options.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$options = [];
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING ---
try {
    // 1. Fetch the parent attribute's name for context
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }

    // 2. Fetch all options belonging to this attribute
    $sql_opts = "SELECT option_id, value FROM attribute_options WHERE attribute_id = :attribute_id ORDER BY value ASC";
    $stmt_opts = $pdo->prepare($sql_opts);
    $stmt_opts->execute([':attribute_id' => $attribute_id]);
    $options = $stmt_opts->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Options - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">
                Manage Options for: <strong><?= htmlspecialchars($attribute['name']) ?></strong>
            </h1>

            <?php
            if (isset($_SESSION['success_message'])) {
                echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
                unset($_SESSION['success_message']);
            }
            ?>

            <div class="d-flex justify-content-between mb-3">
                <a href="manage_attributes.php" class="btn btn-secondary">&laquo; Back to Attributes</a>
                <a href="add_option.php?attribute_id=<?= $attribute_id ?>" class="btn btn-success">Add New Option</a>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Option Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($options)): ?>
                        <?php foreach ($options as $option): ?>
                            <tr>
                                <td><?= htmlspecialchars($option['value']) ?></td>
                                <td>
                                    <a href="edit_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-primary btn-sm">Edit</a>
                                    <a href="delete_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-danger btn-sm">Delete</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr>
                            <td colspan="2" class="text-center">No options found for this attribute.</td>
                        </tr>
                    <?php endif; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_options.php ---
--- START FILE: admin/manage_products.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();

// Ensure user is logged in and is an admin.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- DATABASE LOGIC & PAGE SETUP ---
require_once '../config/db_config.php';

$products = []; // Initialize an empty array for products
$error_message = '';

try {
    // SQL query to get products and their corresponding category name.
    $sql = "SELECT 
                p.product_id, 
                p.product_name, 
                p.base_price, 
                p.stock_quantity, 
                c.category_name 
            FROM 
                products AS p 
            LEFT JOIN 
                categories AS c ON p.category_id = c.category_id 
            ORDER BY 
                p.product_name ASC";
                
    $stmt = $pdo->prepare($sql);
    $stmt->execute();
    $products = $stmt->fetchAll(PDO::FETCH_ASSOC);

} catch (PDOException $e) {
    // If the query fails, set an error message to display.
    $error_message = "Database Error: Could not fetch products. " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Products - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Product Management</h1>

        <?php
        // Display a success message if one was set in the session
        if (isset($_SESSION['success_message'])) {
            echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
            unset($_SESSION['success_message']);
        }
        // Display an error message if the database query failed
        if ($error_message) {
            echo '<div class="alert alert-danger">' . htmlspecialchars($error_message) . '</div>';
        }
        ?>

        <a href="add_product.php" class="btn btn-success mb-3">Add New Product</a>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if (!empty($products)): ?>
                    <?php foreach ($products as $product): ?>
                        <tr>
                            <td><?= htmlspecialchars($product['product_name']) ?></td>
                            <td><?= htmlspecialchars($product['category_name'] ?? 'N/A') ?></td>
                            <td>$<?= htmlspecialchars(number_format($product['base_price'], 2)) ?></td>
                            <td><?= htmlspecialchars($product['stock_quantity']) ?></td>
                            <td>
                                <!-- === NEW BUTTON ADDED ON THIS LINE === -->
                                <a href="manage_variants.php?product_id=<?= $product['product_id'] ?>" class="btn btn-info btn-sm">Variants</a>
                                <a href="edit_product.php?id=<?= $product['product_id'] ?>" class="btn btn-primary btn-sm">Edit</a>
                                <a href="delete_product.php?id=<?= $product['product_id'] ?>" class="btn btn-danger btn-sm">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="5" class="text-center">No products found. Click "Add New Product" to create one.</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_products.php ---
--- START FILE: admin/manage_variants.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$product = null;
$variants = [];
$error_message = '';
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    // If no product_id is provided, redirect back to the main products page.
    header("Location: manage_products.php?error=noproductid");
    exit();
}

// --- DATA FETCHING ---
try {
    // 1. Fetch the parent product's name for the page title and context.
    $sql_product = "SELECT product_name FROM products WHERE product_id = :product_id";
    $stmt_product = $pdo->prepare($sql_product);
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        // If the product ID is invalid, stop and show an error.
        throw new Exception("Product not found.");
    }

    // 2. Fetch all variants for this specific product.
    // This is a more advanced query that joins all the new variant tables together.
    // GROUP_CONCAT is a powerful MySQL function that aggregates multiple rows into a single string,
    // which is perfect for displaying the combined options like "Color: Red, Size: Large".
    $sql_variants = "
        SELECT 
            pv.variant_id,
            pv.sku,
            pv.price,
            pv.stock_quantity,
            GROUP_CONCAT(CONCAT(a.name, ': ', ao.value) ORDER BY a.name SEPARATOR ', ') AS options_string
        FROM 
            product_variants AS pv
        LEFT JOIN 
            product_variant_options AS pvo ON pv.variant_id = pvo.variant_id
        LEFT JOIN 
            attribute_options AS ao ON pvo.option_id = ao.option_id
        LEFT JOIN 
            attributes AS a ON ao.attribute_id = a.attribute_id
        WHERE 
            pv.product_id = :product_id
        GROUP BY 
            pv.variant_id
        ORDER BY 
            options_string";
            
    $stmt_variants = $pdo->prepare($sql_variants);
    $stmt_variants->execute([':product_id' => $product_id]);
    $variants = $stmt_variants->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Variants - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_products.php" class="btn btn-secondary">Back to Products</a>
        <?php else: ?>
            <h1 class="mb-4">
                Manage Variants for: <strong><?= htmlspecialchars($product['product_name']) ?></strong>
            </h1>

            <?php
            // Display success messages from session after redirects
            if (isset($_SESSION['success_message'])) {
                echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
                unset($_SESSION['success_message']);
            }
            ?>

            <div class="d-flex justify-content-between mb-3">
                <a href="manage_products.php" class="btn btn-secondary">&laquo; Back to Products</a>
                <div>
                    <!-- This button will eventually link to a page to manage attributes like "Color", "Size" globally -->
                    <a href="manage_attributes.php" class="btn btn-outline-secondary">Manage Attributes</a>
                    <a href="add_variant.php?product_id=<?= $product_id ?>" class="btn btn-success">Add New Variant</a>
                </div>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Variant (Options)</th>
                        <th>SKU</th>
                        <th>Specific Price</th>
                        <th>Stock</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($variants)): ?>
                        <?php foreach ($variants as $variant): ?>
                            <tr>
                                <td><?= htmlspecialchars($variant['options_string'] ?? 'Base Product') ?></td>
                                <td><?= htmlspecialchars($variant['sku'] ?? 'N/A') ?></td>
                                <td><?= $variant['price'] !== null ? '$' . htmlspecialchars(number_format($variant['price'], 2)) : '(Uses Base Price)' ?></td>
                                <td><?= htmlspecialchars($variant['stock_quantity']) ?></td>
                                <td>
                                    <a href="edit_variant.php?id=<?= $variant['variant_id'] ?>&product_id=<?= $product_id ?>" class="btn btn-primary btn-sm">Edit</a>
                                    <a href="delete_variant.php?id=<?= $variant['variant_id'] ?>&product_id=<?= $product_id ?>" class="btn btn-danger btn-sm">Delete</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr>
                            <td colspan="5" class="text-center">No variants found for this product. Click "Add New Variant" to create one.</td>
                        </tr>
                    <?php endif; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_variants.php ---
--- START FILE: config/db_config.php ---
`$language
<?php
/*
* DATABASE CONFIGURATION
*
* This file defines the constants needed to connect to the database.
*/

// --- IMPORTANT ---
// It is strongly recommended to create a new MySQL user for this application
// instead of using the default 'root' user.
// You can do this from the main phpMyAdmin page under "User accounts".

// Database Credentials
define('DB_HOST', 'localhost');
define('DB_USER', 'alsm_user'); // <-- Replace with the username you create
define('DB_PASS', '8KG21J6ED7zHhwL-'); // <-- Replace with your new password
define('DB_NAME', 'alsm_db'); // Using the database name you chose

// --- DATABASE CONNECTION (PDO) ---
try {
    // Create a new PDO instance (the connection object)
    $pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASS);
    
    // Set PDO to throw exceptions on error for better error handling
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

} catch(PDOException $e){
    // If the connection fails, stop the script and show a generic error.
    // In a real production environment, you would log this error instead of showing it.
    die("ERROR: Could not connect to the database. " . $e->getMessage());
}
?>
--- END FILE: config/db_config.php ---
--- START FILE: public_html/about.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - About Us</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>About The Festival</h2>
        <p>Information about the history and purpose of the festival will go here.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/about.html ---
--- START FILE: public_html/campsite_booking.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Campsite Booking</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Campsite Booking</h2>
        <p>Information about campsites and a booking form will be here.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/campsite_booking.html ---
--- START FILE: public_html/cart_actions.php ---
`$language
<?php
// --- CONFIGURATION AND SESSION START ---
require_once '../config/db_config.php';
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- MAIN ACTION HANDLER ---
$action = $_POST['action'] ?? $_GET['action'] ?? null;

// --- HANDLE ADD TO CART ---
if ($action === 'add' && $_SERVER['REQUEST_METHOD'] === 'POST') {
    $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);
    $selected_options_post = $_POST['options'] ?? [];

    if (!$product_id || !$quantity || $quantity <= 0) {
        header('Location: merchandise.php?error=invaliddata');
        exit();
    }

    $variant_id = null;
    $error = null;

    if (!empty($selected_options_post)) {
        try {
            $option_count = count($selected_options_post);
            $in_clause = implode(',', array_fill(0, $option_count, '?'));
            
            $sql = "SELECT pvo.variant_id
                    FROM product_variant_options pvo
                    JOIN attribute_options ao ON pvo.option_id = ao.option_id
                    WHERE ao.value IN ($in_clause) AND pvo.variant_id IN (
                        SELECT variant_id FROM product_variants WHERE product_id = ?
                    )
                    GROUP BY pvo.variant_id
                    HAVING COUNT(DISTINCT pvo.option_id) = ?";

            $params = array_values($selected_options_post);
            $params[] = $product_id;
            $params[] = $option_count;

            $stmt = $pdo->prepare($sql);
            $stmt->execute($params);
            $result = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($result) {
                $variant_id = $result['variant_id'];
            } else {
                $error = "The selected combination of options is not available.";
            }
        } catch (PDOException $e) {
            $error = "Database error finding variant: " . $e->getMessage();
        }
    } else {
        $error = "This product has required options that were not selected.";
    }

    if (!$error && $variant_id) {
        $cart_item_key = $variant_id;
        if (isset($_SESSION['cart'][$cart_item_key])) {
            $_SESSION['cart'][$cart_item_key]['quantity'] += $quantity;
        } else {
            $_SESSION['cart'][$cart_item_key] = [
                'product_id' => $product_id,
                'variant_id' => $variant_id,
                'quantity' => $quantity
            ];
        }
        header('Location: view_cart.php?status=added');
        exit();
    } else {
        $_SESSION['error_message'] = $error ?? 'Could not add item to cart.';
        header('Location: product_detail.php?id=' . $product_id);
        exit();
    }
}

// --- HANDLE UPDATE QUANTITY ---
if ($action === 'update' && $_SERVER['REQUEST_METHOD'] === 'POST') {
    $variant_id = filter_input(INPUT_POST, 'variant_id', FILTER_VALIDATE_INT);
    $quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);

    if ($variant_id && $quantity > 0 && isset($_SESSION['cart'][$variant_id])) {
        // Update the quantity for the specific item in the cart
        $_SESSION['cart'][$variant_id]['quantity'] = $quantity;
    }
    // Redirect back to the cart page
    header('Location: view_cart.php?status=updated');
    exit();
}

// --- HANDLE REMOVE FROM CART ---
if ($action === 'remove' && isset($_GET['variant_id'])) {
    $variant_id = filter_input(INPUT_GET, 'variant_id', FILTER_VALIDATE_INT);
    
    if ($variant_id && isset($_SESSION['cart'][$variant_id])) {
        // Remove the specific item from the cart array
        unset($_SESSION['cart'][$variant_id]);
    }
    // Redirect back to the cart page
    header('Location: view_cart.php?status=removed');
    exit();
}


// Fallback redirect if no valid action is provided
header('Location: merchandise.php');
exit();

--- END FILE: public_html/cart_actions.php ---
--- START FILE: public_html/checkout.php ---
`$language
<?php
require_once '../config/db_config.php';
session_start();

// --- SECURITY CHECK: User must be logged in to check out ---
if (!isset($_SESSION['user_id'])) {
    $_SESSION['redirect_url'] = 'checkout.php'; // Remember where to send them back after login
    $_SESSION['error_message'] = 'You must be logged in to proceed to checkout.';
    header('Location: login.php');
    exit();
}

// --- SECURITY CHECK: Cart cannot be empty ---
if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
    header('Location: merchandise.php?error=cartempty');
    exit();
}

// --- DATA FETCHING ---
$user = null;
$cart_items = [];
$cart_total = 0;
$error_message = '';

try {
    // 1. Fetch logged-in user's data to pre-fill the form
    $stmt_user = $pdo->prepare("SELECT * FROM users WHERE user_id = :user_id");
    $stmt_user->execute([':user_id' => $_SESSION['user_id']]);
    $user = $stmt_user->fetch(PDO::FETCH_ASSOC);

    // 2. Fetch cart item details to display summary
    $variant_ids = array_keys($_SESSION['cart']);
    $in_clause = implode(',', array_fill(0, count($variant_ids), '?'));
    
    $sql_cart = "
        SELECT 
            p.product_name,
            pv.variant_id, pv.price AS variant_price, p.base_price,
            (SELECT GROUP_CONCAT(CONCAT(a.name, ': ', ao.value) SEPARATOR ', ') 
             FROM product_variant_options pvo
             JOIN attribute_options ao ON pvo.option_id = ao.option_id
             JOIN attributes a ON ao.attribute_id = a.attribute_id
             WHERE pvo.variant_id = pv.variant_id) AS options_string
        FROM product_variants pv
        JOIN products p ON pv.product_id = p.product_id
        WHERE pv.variant_id IN ($in_clause)
    ";
    $stmt_cart = $pdo->prepare($sql_cart);
    $stmt_cart->execute($variant_ids);
    $results = $stmt_cart->fetchAll(PDO::FETCH_ASSOC);

    // 3. Process cart data and calculate total
    foreach ($results as $item) {
        $variant_id = $item['variant_id'];
        $quantity = $_SESSION['cart'][$variant_id]['quantity'];
        $price = $item['variant_price'] ?? $item['base_price'];
        $subtotal = $price * $quantity;
        
        $cart_items[] = [
            'name' => $item['product_name'],
            'options' => $item['options_string'],
            'quantity' => $quantity,
            'price' => $price
        ];
        $cart_total += $subtotal;
    }

} catch (PDOException $e) {
    $error_message = "Database error: " . $e->getMessage();
}

$page_title = 'Checkout';
require_once __DIR__ . '/../templates/header.php';
?>

<main class="container mt-4">
    <h1 class="mb-4">Checkout</h1>
    
    <?php if ($error_message): ?>
        <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
    <?php else: ?>
        <div class="row g-5">
            <!-- Shipping Information Form -->
            <div class="col-md-7 col-lg-8">
                <h4 class="mb-3">Shipping Address</h4>
                <form action="place_order.php" method="POST" class="needs-validation" novalidate>
                    <div class="row g-3">
                        <div class="col-sm-6">
                            <label for="firstName" class="form-label">First name</label>
                            <input type="text" class="form-control" id="firstName" name="first_name" placeholder="" value="<?= htmlspecialchars($user['first_name'] ?? '') ?>" required>
                        </div>

                        <div class="col-sm-6">
                            <label for="lastName" class="form-label">Last name</label>
                            <input type="text" class="form-control" id="lastName" name="last_name" placeholder="" value="<?= htmlspecialchars($user['last_name'] ?? '') ?>" required>
                        </div>

                        <div class="col-12">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" placeholder="you@example.com" value="<?= htmlspecialchars($user['email'] ?? '') ?>" required>
                        </div>

                        <div class="col-12">
                            <label for="address" class="form-label">Address</label>
                            <input type="text" class="form-control" id="address" name="address" placeholder="1234 Main St" required>
                        </div>
                        
                        <!-- Add more address fields as needed: City, State, Postcode etc. -->
                    </div>

                    <hr class="my-4">
                    
                    <!-- Payment section placeholder -->
                    <h4 class="mb-3">Payment</h4>
                    <p class="text-muted">Payment gateway integration will be handled in a future phase. Clicking "Place Order" will finalize the order for now.</p>

                    <hr class="my-4">

                    <button class="w-100 btn btn-primary btn-lg" type="submit">Place Order</button>
                </form>
            </div>

            <!-- Order Summary Sidebar -->
            <div class="col-md-5 col-lg-4 order-md-last">
                <h4 class="d-flex justify-content-between align-items-center mb-3">
                    <span class="text-primary">Your cart</span>
                    <span class="badge bg-primary rounded-pill"><?= count($cart_items) ?></span>
                </h4>
                <ul class="list-group mb-3">
                    <?php foreach ($cart_items as $item): ?>
                        <li class="list-group-item d-flex justify-content-between lh-sm">
                            <div>
                                <h6 class="my-0"><?= htmlspecialchars($item['name']) ?> (x<?= $item['quantity'] ?>)</h6>
                                <small class="text-muted"><?= htmlspecialchars($item['options']) ?></small>
                            </div>
                            <span class="text-muted">$<?= htmlspecialchars(number_format($item['price'] * $item['quantity'], 2)) ?></span>
                        </li>
                    <?php endforeach; ?>
                    
                    <li class="list-group-item d-flex justify-content-between">
                        <span>Total (AUD)</span>
                        <strong>$<?= htmlspecialchars(number_format($cart_total, 2)) ?></strong>
                    </li>
                </ul>
            </div>
        </div>
    <?php endif; ?>
</main>

<?php 
require_once __DIR__ . '/../templates/footer.php'; 
?>

--- END FILE: public_html/checkout.php ---
--- START FILE: public_html/contact.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Contact Us</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main class="container mt-4">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <h2>Contact Us</h2>
                <p>Have a question? Fill out the form below and we'll get back to you.</p>
                
                <form id="contactForm" novalidate>
                    <div class="mb-3">
                        <label for="contactName" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="contactName" required>
                    </div>
                    <div class="mb-3">
                        <label for="contactEmail" class="form-label">Your Email</label>
                        <input type="email" class="form-control" id="contactEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="contactMessage" class="form-label">Message</label>
                        <textarea class="form-control" id="contactMessage" rows="5" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Send Message</button>
                </form>
            </div>
        </div>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/contact.html ---
--- START FILE: public_html/diagnose.php ---
`$language
<?php

// Force PHP to display all errors for this script
ini_set('display_errors', 1);
error_reporting(E_ALL);

echo "<h1>Deep Environment Diagnostic</h1>";

// --- Credentials from our config file ---
$db_host = 'localhost';
$db_user = 'alsm_user';
$db_pass = 'Password123'; // The simple password we reset to

echo "<p><strong>Attempting to connect to MySQL server with these credentials:</strong><br>";
echo "Host: " . $db_host . "<br>";
echo "User: " . $db_user . "<br>";
echo "Password: " . $db_pass . "</p><hr>";


try {
    // --- Step 1: Connect to the MySQL SERVER itself ---
    $pdo = new PDO("mysql:host=" . $db_host, $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    echo "<p style='color:green; font-weight:bold;'>Step 1 SUCCESS: Connected to the MySQL server process.</p>";

    // --- Step 2: Ask the server to list all databases it knows about ---
    echo "<p><strong>Step 2: Asking the server to list all available databases...</strong></p>";
    $stmt = $pdo->query("SHOW DATABASES");
    $databases = $stmt->fetchAll(PDO::FETCH_COLUMN);

    echo "<h3>Databases that the user '" . $db_user . "' can see:</h3>";
    echo "<pre>";
    print_r($databases);
    echo "</pre>";
    echo "<hr>";

} catch(PDOException $e) {
    // This will catch any connection or query errors
    echo "<p style='color:red; font-weight:bold;'>DIAGNOSTIC FAILED. The script could not complete.</p>";
    echo "<p>The error message is: <strong>" . $e->getMessage() . "</strong></p>";
    echo "<hr>";
}

echo "<h2>PHP Configuration Info</h2>";
phpinfo();

?>
--- END FILE: public_html/diagnose.php ---
--- START FILE: public_html/events.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Events</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Events Listing</h2>
        <p>Details about upcoming events and sub-events will be displayed here.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/events.html ---
--- START FILE: public_html/event_detail.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Event Details</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Event Detail Page</h2>
        <p>This page will serve as a template for individual event details.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/event_detail.html ---
--- START FILE: public_html/index.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Australian Large Scale Models - Home</title>
        <link rel="stylesheet" href="assets/css/reset.css">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
        <link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

    <main class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <h2>Welcome to the Australian Large Scale Models!</h2>
            <p>Your hub for all event information, merchandise, and bookings. This is the main content area, and it takes up 8 of the 12 available columns on medium-sized screens and larger.</p>
        </div>
        <div class="col-md-4">
            <div id="news-box" class="p-3 bg-light rounded">
                <h4>Latest News</h4>
                <p id="news-content" class="mb-0">Some quick updates or announcements could go here.</p>
                <button id="update-news-btn" class="btn btn-sm btn-outline-primary mt-2">Update News</button>
            </div>
        </div>
    </div>
</main>

    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/index.html ---
--- START FILE: public_html/login.php ---
`$language
<?php

// FORCE ERROR REPORTING FOR DEBUGGING
ini_set('display_errors', 1);
error_reporting(E_ALL);

// ALL PHP code for this page must go at the very top.
// session_start() must be the very first thing called on the page.
session_start();


// If the user is already logged in, redirect them to their profile page
if (isset($_SESSION['user_id'])) {
    header("Location: profile.php");
    exit(); // Stop script execution
}

// Include the database configuration file
require_once __DIR__ . '/../config/db_config.php';

$error_message = '';

// Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = trim($_POST['username']);
    $password = $_POST['password'];

    if (empty($username) || empty($password)) {
        $error_message = "Username and password are required.";
    } else {
        try {
            // Find the user in the database by their username
            $sql = "SELECT user_id, username, password_hash, role FROM Users WHERE username = :username";
            $stmt = $pdo->prepare($sql);
            $stmt->execute(['username' => $username]);
            
            // fetch() returns the user record, or false if not found
            $user = $stmt->fetch(PDO::FETCH_ASSOC);

            // Verify the user was found AND the password matches the hash
            if ($user && password_verify($password, $user['password_hash'])) {
                // Password is correct! Start the user session.
                
                // Regenerate the session ID for security
                session_regenerate_id(true);

                // Store user data in the session array
                $_SESSION['user_id'] = $user['user_id'];
                $_SESSION['username'] = $user['username'];
                $_SESSION['role'] = $user['role'];

                // Redirect the user to their profile page
                header("Location: profile.php");
                exit(); // Important to stop the script after a redirect

            } else {
                // If login fails (user not found or password incorrect)
                $error_message = "Invalid username or password.";
            }
        } catch (PDOException $e) {
            $error_message = "Database error: " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="assets/css/reset.css">
    <link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
         </nav>
    <main class="container mt-4">
        <div class="row">
            <div class="col-md-6 offset-md-3">
                <h2>User Login</h2>

                <?php if (!empty($error_message)): ?>
                    <div class="alert alert-danger"><?php echo $error_message; ?></div>
                <?php endif; ?>

                <form action="login.php" method="POST">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="username" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Login</button>
                </form>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="assets/js/main.js"></script>
</body>
</html>
--- END FILE: public_html/login.php ---
--- START FILE: public_html/logout.php ---
`$language
<?php
// Always start the session to access it
session_start();

// Unset all of the session variables
$_SESSION = array();

// If it's desired to kill the session, also delete the session cookie.
// Note: This will destroy the session, and not just the session data!
if (ini_get("session.use_cookies")) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000,
        $params["path"], $params["domain"],
        $params["secure"], $params["httponly"]
    );
}

// Finally, destroy the session.
session_destroy();

// Redirect to the login page
header("Location: login.php");
exit();
?>
--- END FILE: public_html/logout.php ---
--- START FILE: public_html/merchandise.php ---
`$language
<?php
require_once '../config/db_config.php';

$products = [];
$error_message = '';

try {
    // Select all products that are active and not deleted
    $sql = "SELECT product_id, product_name, description, base_price, image_path 
            FROM products 
            WHERE is_active = 1 AND is_deleted = 0 
            ORDER BY product_name ASC";
    $stmt = $pdo->query($sql);
    $products = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Error fetching products: " . $e->getMessage();
}

// Define the title for the <title> tag in the header
$page_title = 'ALSM - Merchandise';
// We need to specify the path to the templates folder from the public_html directory.
// So we go up one level ('../') and then into 'templates/'.
require_once __DIR__ . '/../templates/header.php';
?>

<main class="container mt-4">
    <div class="row">
        <div class="col-12 text-center mb-4">
            <h2>Merchandise</h2>
        </div>
    </div>
    <div class="row">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php elseif (empty($products)): ?>
            <div class="col-12">
                <p class="text-center">No merchandise is currently available. Please check back later!</p>
            </div>
        <?php else: ?>
            <?php foreach ($products as $product): ?>
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100">
                        <img src="<?= htmlspecialchars($product['image_path'] ?? 'https://placehold.co/400x300?text=No+Image') ?>" class="card-img-top" alt="<?= htmlspecialchars($product['product_name']) ?>">
                        <div class="card-body">
                            <h5 class="card-title"><?= htmlspecialchars($product['product_name']) ?></h5>
                            <p class="card-text"><?= htmlspecialchars(substr($product['description'], 0, 100)) . (strlen($product['description']) > 100 ? '...' : '') ?></p>
                            <p class="card-text"><strong>Price: $<?= htmlspecialchars(number_format($product['base_price'], 2)) ?></strong></p>
                            <a href="product_detail.php?id=<?= $product['product_id'] ?>" class="btn btn-primary">View Details</a>
                        </div>
                    </div>
                </div>
            <?php endforeach; ?>
        <?php endif; ?>
    </div>
</main>

<?php 
// Include the footer template
require_once __DIR__ . '/../templates/footer.php'; 
?>

--- END FILE: public_html/merchandise.php ---
--- START FILE: public_html/order_confirmation.php ---
`$language
<?php
require_once '../config/db_config.php';
session_start();

// --- SECURITY CHECK: Must have come from place_order.php ---
if (!isset($_SESSION['last_order_id'])) {
    // If there's no order ID in the session, they shouldn't be here.
    header('Location: index.html');
    exit();
}

// --- INITIALIZE VARIABLES ---
$order = null;
$order_items = [];
$error_message = '';
$order_id = $_SESSION['last_order_id'];

// --- DATA FETCHING ---
try {
    // 1. Fetch the main order details
    $stmt_order = $pdo->prepare("SELECT * FROM orders WHERE order_id = :order_id AND user_id = :user_id");
    $stmt_order->execute([':order_id' => $order_id, ':user_id' => $_SESSION['user_id']]);
    $order = $stmt_order->fetch(PDO::FETCH_ASSOC);

    if (!$order) {
        throw new Exception("Could not find the specified order.");
    }

    // 2. Fetch the items for this order
    $sql_items = "
        SELECT 
            oi.quantity, oi.price_at_purchase,
            p.product_name,
            (SELECT GROUP_CONCAT(CONCAT(a.name, ': ', ao.value) SEPARATOR ', ') 
             FROM product_variant_options pvo
             JOIN attribute_options ao ON pvo.option_id = ao.option_id
             JOIN attributes a ON ao.attribute_id = a.attribute_id
             WHERE pvo.variant_id = oi.variant_id) AS options_string
        FROM orderitems oi
        JOIN products p ON oi.product_id = p.product_id
        WHERE oi.order_id = :order_id";
    
    $stmt_items = $pdo->prepare($sql_items);
    $stmt_items->execute([':order_id' => $order_id]);
    $order_items = $stmt_items->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error fetching order details: " . $e->getMessage();
}

// --- CLEANUP ---
// Unset the session variable so the user can't refresh and see an old order confirmation.
unset($_SESSION['last_order_id']);

$page_title = 'Order Confirmation';
require_once __DIR__ . '/../templates/header.php';
?>

<main class="container mt-4">
    <div class="py-5 text-center">
        <?php if ($error_message): ?>
            <h1 class="text-danger">Error</h1>
            <p class="lead"><?= htmlspecialchars($error_message) ?></p>
            <a href="index.html" class="btn btn-primary">Go to Homepage</a>
        <?php elseif ($order): ?>
            <h1 class="text-success">Thank You!</h1>
            <h2>Your Order is Confirmed</h2>
            <p class="lead">Your order number is <strong>#<?= htmlspecialchars($order['order_id']) ?></strong>. A confirmation email has been sent (or would be, if this was a live site!).</p>
        <?php endif; ?>
    </div>
    
    <?php if (!empty($order_items)): ?>
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <h4 class="mb-3">Order Summary</h4>
                <ul class="list-group mb-3">
                    <?php foreach ($order_items as $item): ?>
                        <li class="list-group-item d-flex justify-content-between lh-sm">
                            <div>
                                <h6 class="my-0"><?= htmlspecialchars($item['product_name']) ?> (x<?= $item['quantity'] ?>)</h6>
                                <small class="text-muted"><?= htmlspecialchars($item['options_string']) ?></small>
                            </div>
                            <span class="text-muted">$<?= htmlspecialchars(number_format($item['price_at_purchase'] * $item['quantity'], 2)) ?></span>
                        </li>
                    <?php endforeach; ?>
                    
                    <li class="list-group-item d-flex justify-content-between bg-light">
                        <span class="fw-bold">Total (AUD)</span>
                        <strong class="fw-bold">$<?= htmlspecialchars(number_format($order['total_amount'], 2)) ?></strong>
                    </li>
                </ul>
            </div>
        </div>
    <?php endif; ?>

</main>

<?php 
require_once __DIR__ . '/../templates/footer.php'; 
?>

--- END FILE: public_html/order_confirmation.php ---
--- START FILE: public_html/place_order.php ---
`$language
<?php
require_once '../config/db_config.php';
session_start();

// --- PRE-CHECKS ---
if ($_SERVER["REQUEST_METHOD"] !== "POST") {
    header('Location: index.html');
    exit();
}
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php?error=unauthorized');
    exit();
}
if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
    header('Location: merchandise.php?error=cartempty');
    exit();
}

// --- INITIALIZE VARIABLES ---
$user_id = $_SESSION['user_id'];
$cart = $_SESSION['cart'];
$total_amount = 0;
$shipping_address = trim($_POST['first_name']) . " " . trim($_POST['last_name']) . "\n" . trim($_POST['address']);

if (empty(trim($_POST['first_name'])) || empty(trim($_POST['last_name'])) || empty(trim($_POST['address']))) {
    $_SESSION['error_message'] = 'Please fill out all required shipping address fields.';
    header('Location: checkout.php');
    exit();
}

// --- DATABASE TRANSACTION ---
$pdo->beginTransaction();

try {
    // Step 1: Fetch current prices and calculate total amount
    $variant_ids = array_keys($cart);
    $in_clause = implode(',', array_fill(0, count($variant_ids), '?'));
    
    $sql_prices = "SELECT pv.variant_id, pv.price AS variant_price, p.base_price 
                   FROM product_variants pv 
                   JOIN products p ON pv.product_id = p.product_id 
                   WHERE pv.variant_id IN ($in_clause)";
    $stmt_prices = $pdo->prepare($sql_prices);
    $stmt_prices->execute($variant_ids);
    $price_data = $stmt_prices->fetchAll(PDO::FETCH_ASSOC);

    $price_results = [];
    foreach ($price_data as $row) {
        $actual_price = $row['variant_price'] ?? $row['base_price'];
        $price_results[$row['variant_id']] = $actual_price;
    }
    
    foreach($cart as $variant_id => $item) {
        if(isset($price_results[$variant_id])) {
            $total_amount += $price_results[$variant_id] * $item['quantity'];
        } else {
            throw new Exception("An item in your cart (Variant ID: $variant_id) is no longer available.");
        }
    }


    // Step 2: Create the main order record
    $sql_order = "INSERT INTO orders (user_id, total_amount, shipping_address, order_status) VALUES (:user_id, :total_amount, :shipping_address, :order_status)";
    $stmt_order = $pdo->prepare($sql_order);
    $stmt_order->execute([
        ':user_id' => $user_id,
        ':total_amount' => $total_amount,
        ':shipping_address' => $shipping_address,
        ':order_status' => 'paid' // Assuming payment is successful for now
    ]);
    $order_id = $pdo->lastInsertId();

    // Step 3: Create the order items and update stock
    $sql_order_item = "INSERT INTO orderitems (order_id, product_id, variant_id, quantity, price_at_purchase) VALUES (:order_id, :product_id, :variant_id, :quantity, :price)";
    $stmt_order_item = $pdo->prepare($sql_order_item);

    $sql_update_stock = "UPDATE product_variants SET stock_quantity = stock_quantity - :quantity WHERE variant_id = :variant_id";
    $stmt_update_stock = $pdo->prepare($sql_update_stock);

    foreach ($cart as $variant_id => $item) {
        $stmt_order_item->execute([
            ':order_id' => $order_id,
            ':product_id' => $item['product_id'],
            ':variant_id' => $item['variant_id'],
            ':quantity' => $item['quantity'],
            ':price' => $price_results[$variant_id]
        ]);

        $stmt_update_stock->execute([
            ':quantity' => $item['quantity'],
            ':variant_id' => $item['variant_id']
        ]);
    }

    $pdo->commit();

    // Step 4: Clear the cart and redirect to a confirmation page
    unset($_SESSION['cart']);
    $_SESSION['last_order_id'] = $order_id; 

    header('Location: order_confirmation.php');
    exit();

} catch (Exception $e) {
    // If anything went wrong, roll back the entire transaction
    $pdo->rollBack();
    
    // Restore proper error handling
    $_SESSION['error_message'] = 'There was a problem placing your order. Please try again. Error: ' . $e->getMessage();
    header('Location: checkout.php');
    exit();
}

--- END FILE: public_html/place_order.php ---
--- START FILE: public_html/product_detail.php ---
`$language
<?php
// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';
session_start(); // Start the session to handle cart data later

// --- INITIALIZE VARIABLES ---
$product = null;
$variants = [];
$attributes = [];
$error_message = '';
$product_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    $error_message = "No product selected.";
} else {
    // --- DATA FETCHING ---
    try {
        // 1. Fetch the main product details
        $sql_product = "SELECT * FROM products WHERE product_id = :product_id AND is_active = 1 AND is_deleted = 0";
        $stmt_product = $pdo->prepare($sql_product);
        $stmt_product->execute([':product_id' => $product_id]);
        $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

        if (!$product) {
            throw new Exception("Product not found or is unavailable.");
        }

        // 2. Fetch all variants for this product, along with their options
        $sql_variants = "
            SELECT 
                pv.variant_id, pv.sku, pv.price, pv.stock_quantity,
                pvo.option_id,
                a.name AS attribute_name,
                ao.value AS option_value
            FROM product_variants AS pv
            JOIN product_variant_options AS pvo ON pv.variant_id = pvo.variant_id
            JOIN attribute_options AS ao ON pvo.option_id = ao.option_id
            JOIN attributes AS a ON ao.attribute_id = a.attribute_id
            WHERE pv.product_id = :product_id AND pv.is_active = 1
            ORDER BY pv.variant_id, a.name";
        
        $stmt_variants = $pdo->prepare($sql_variants);
        $stmt_variants->execute([':product_id' => $product_id]);
        $results = $stmt_variants->fetchAll(PDO::FETCH_ASSOC);
        
        // 3. Process the results into a structured array for easy use in HTML
        // This creates an array of variants, where each variant has an array of its options.
        $temp_variants = [];
        foreach ($results as $row) {
            $temp_variants[$row['variant_id']]['details'] = [
                'sku' => $row['sku'],
                'price' => $row['price'],
                'stock_quantity' => $row['stock_quantity']
            ];
            $temp_variants[$row['variant_id']]['options'][$row['attribute_name']] = $row['option_value'];
        }
        $variants = $temp_variants;

        // 4. Create a unique list of attributes and options for the dropdowns
        foreach ($variants as $variant) {
            foreach ($variant['options'] as $attr_name => $opt_value) {
                $attributes[$attr_name][] = $opt_value;
            }
        }
        foreach ($attributes as $key => $value) {
            $attributes[$key] = array_unique($value);
            sort($attributes[$key]);
        }

    } catch (Exception $e) {
        $error_message = "Error: " . $e->getMessage();
    }
}

// --- PAGE SETUP ---
$page_title = $product ? htmlspecialchars($product['product_name']) : 'Product Not Found';
require_once __DIR__ . '/../templates/header.php';
?>

<main class="container mt-4">
    <?php if ($error_message): ?>
        <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <a href="merchandise.php" class="btn btn-primary">Back to Merchandise</a>
    <?php elseif ($product): ?>
        <div class="row">
            <!-- Product Image Column -->
            <div class="col-md-6">
                <img src="<?= htmlspecialchars($product['image_path'] ?? 'https://placehold.co/600x400?text=Product+Image') ?>" class="img-fluid rounded" alt="<?= htmlspecialchars($product['product_name']) ?>">
            </div>

            <!-- Product Details Column -->
            <div class="col-md-6">
                <h2><?= htmlspecialchars($product['product_name']) ?></h2>
                <h4 class="text-success">$<?= htmlspecialchars(number_format($product['base_price'], 2)) ?></h4>
                <p class="lead"><?= nl2br(htmlspecialchars($product['description'])) ?></p>

                <hr>

                <!-- Add to Cart Form -->
                <form action="cart_actions.php" method="POST">
                    <input type="hidden" name="action" value="add">
                    <input type="hidden" name="product_id" value="<?= $product['product_id'] ?>">

                    <?php if (!empty($attributes)): ?>
                        <h5>Options</h5>
                        <?php foreach ($attributes as $attr_name => $options_array): ?>
                            <div class="mb-3">
                                <label for="attr_<?= str_replace(' ', '_', $attr_name) ?>" class="form-label"><strong><?= htmlspecialchars($attr_name) ?>:</strong></label>
                                <select class="form-select" name="options[<?= htmlspecialchars($attr_name) ?>]" id="attr_<?= str_replace(' ', '_', $attr_name) ?>" required>
                                    <option value="">Select <?= htmlspecialchars($attr_name) ?></option>
                                    <?php foreach ($options_array as $option): ?>
                                        <option value="<?= htmlspecialchars($option) ?>"><?= htmlspecialchars($option) ?></option>
                                    <?php endforeach; ?>
                                </select>
                            </div>
                        <?php endforeach; ?>
                    <?php endif; ?>

                    <div class="row align-items-end">
                        <div class="col-md-4">
                            <label for="quantity" class="form-label"><strong>Quantity:</strong></label>
                            <input type="number" class="form-control" id="quantity" name="quantity" value="1" min="1" max="10" required>
                        </div>
                        <div class="col-md-8">
                            <button type="submit" class="btn btn-primary btn-lg w-100">Add to Cart</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    <?php endif; ?>
</main>

<?php 
require_once __DIR__ . '/../templates/footer.php'; 
?>

--- END FILE: public_html/product_detail.php ---
--- START FILE: public_html/profile.php ---
`$language
# Project Overview
This file contains the concatenated source code of my web project, prepared for analysis by Google Gemini.

**Project Purpose:** [A web dev project for my TAFE course and new business, MVW.]
**Technologies Used:** [PHP, Apache, MySQL, CSS, JavaScript.]
**Analysis Goal:** [Analyze for security, performance, and suggest refactoring for modern best practices.]

--- Directory Structure ---
[_local_files]/
    20250624-1128-schema.json
    202506241211-alsm_db.sql
    Generate-GeminiContext.ps1
    project_context.txt
[admin]/
    add_attribute.php
    add_category.php
    add_event.php
    add_option.php
    add_product.php
    add_variant.php
    delete_attribute.php
    delete_category.php
    delete_event.php
    delete_option.php
    delete_product.php
    delete_variant.php
    edit_attribute.php
    edit_category.php
    edit_event.php
    edit_option.php
    edit_product.php
    edit_variant.php
    index.php
    manage_attributes.php
    manage_categories.php
    manage_events.php
    manage_options.php
    manage_products.php
    manage_variants.php
[config]/
    db_config.php
[lib]/
[public_html]/
    [assets]/
        [css]/
            reset.css
            style.css
            style.css.map
        [images]/
        [js]/
            main.js
    about.html
    campsite_booking.html
    cart_actions.php
    checkout.php
    contact.html
    diagnose.php
    event_detail.html
    events.html
    index.html
    login.php
    logout.php
    merchandise.php
    order_confirmation.php
    place_order.php
    product_detail.php
    profile.php
    register.php
    test_db.php
    view_cart.php
[scss]/
    [abstracts]/
        _variables.scss
    [layout]/
        _footer.scss
        _header.scss
        _navigation.scss
    style.scss
[templates]/
    footer.php
    header.php
project_context.txt

--- File Contents ---

--- START FILE: project_context.txt ---
`$language
# Project Overview
This file contains the concatenated source code of my web project, prepared for analysis by Google Gemini.

**Project Purpose:** [A web dev project for my TAFE course and new business, MVW.]
**Technologies Used:** [PHP, Apache, MySQL, CSS, JavaScript.]
**Analysis Goal:** [Analyze for security, performance, and suggest refactoring for modern best practices.]

--- Directory Structure ---
[_local_files]/
    20250624-1128-schema.json
    202506241211-alsm_db.sql
    Generate-GeminiContext.ps1
    project_context.txt
[admin]/
    add_attribute.php
    add_category.php
    add_event.php
    add_option.php
    add_product.php
    add_variant.php
    delete_attribute.php
    delete_category.php
    delete_event.php
    delete_option.php
    delete_product.php
    delete_variant.php
    edit_attribute.php
    edit_category.php
    edit_event.php
    edit_option.php
    edit_product.php
    edit_variant.php
    index.php
    manage_attributes.php
    manage_categories.php
    manage_events.php
    manage_options.php
    manage_products.php
    manage_variants.php
[config]/
    db_config.php
[lib]/
[public_html]/
    [assets]/
        [css]/
            reset.css
            style.css
            style.css.map
        [images]/
        [js]/
            main.js
    about.html
    campsite_booking.html
    cart_actions.php
    checkout.php
    contact.html
    diagnose.php
    event_detail.html
    events.html
    index.html
    login.php
    logout.php
    merchandise.php
    order_confirmation.php
    place_order.php
    product_detail.php
    profile.php
    register.php
    test_db.php
    view_cart.php
[scss]/
    [abstracts]/
        _variables.scss
    [layout]/
        _footer.scss
        _header.scss
        _navigation.scss
    style.scss
[templates]/
    footer.php
    header.php
project_context.txt

--- File Contents ---

--- START FILE: project_context.txt ---
`$language
# Project Overview
This file contains the concatenated source code of my web project, prepared for analysis by Google Gemini.

**Project Purpose:** [A web dev project for my TAFE course and new business, MVW.]
**Technologies Used:** [PHP, Apache, MySQL, CSS, JavaScript.]
**Analysis Goal:** [Analyze for security, performance, and suggest refactoring for modern best practices.]

--- Directory Structure ---
[_local_files]/
    20250624-1128-schema.json
    202506241211-alsm_db.sql
    Generate-GeminiContext.ps1
    project_context.txt
[admin]/
    add_attribute.php
    add_category.php
    add_event.php
    add_option.php
    add_product.php
    add_variant.php
    delete_attribute.php
    delete_category.php
    delete_event.php
    delete_option.php
    delete_product.php
    delete_variant.php
    edit_attribute.php
    edit_category.php
    edit_event.php
    edit_option.php
    edit_product.php
    edit_variant.php
    index.php
    manage_attributes.php
    manage_categories.php
    manage_events.php
    manage_options.php
    manage_products.php
    manage_variants.php
[config]/
    db_config.php
[lib]/
[public_html]/
    [assets]/
        [css]/
            reset.css
            style.css
            style.css.map
        [images]/
        [js]/
            main.js
    about.html
    campsite_booking.html
    cart_actions.php
    checkout.php
    contact.html
    diagnose.php
    event_detail.html
    events.html
    index.html
    login.php
    logout.php
    merchandise.php
    order_confirmation.php
    place_order.php
    product_detail.php
    profile.php
    register.php
    test_db.php
    view_cart.php
[scss]/
    [abstracts]/
        _variables.scss
    [layout]/
        _footer.scss
        _header.scss
        _navigation.scss
    style.scss
[templates]/
    footer.php
    header.php
project_context.txt

--- File Contents ---

--- START FILE: project_context.txt ---
`$language

--- END FILE: project_context.txt ---
--- START FILE: admin/add_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
$error_message = '';
$success_message = '';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_name = trim($_POST['attribute_name']);
    $errors = [];

    // Validation
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicate attribute name
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attributes WHERE name = :name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "An attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attributes (name) VALUES (:name)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name]);

            $_SESSION['success_message'] = "Attribute '".htmlspecialchars($attribute_name)."' was created successfully!";
            header("Location: manage_attributes.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <form action="add_attribute.php" method="POST">
            <div class="mb-3">
                <label for="attribute_name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="attribute_name" name="attribute_name" placeholder="e.g., Color, Size, Material" value="<?= isset($_POST['attribute_name']) ? htmlspecialchars($_POST['attribute_name']) : '' ?>" required>
                <div class="form-text">This is the type of variation (e.g., "Color"). You will add the specific options (e.g., "Red", "Blue") in the next step.</div>
            </div>

            <button type="submit" class="btn btn-primary">Save Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_attribute.php ---
--- START FILE: admin/add_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access this page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new category data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the "Add Category" form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize the form data
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    }

    // 3. Check for duplicate category name before inserting
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM categories WHERE category_name = :category_name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "A category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes and no duplicates are found, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO categories (category_name, description) VALUES (:category_name, :description)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description
            ]);

            // Set a success message in the session and redirect back to the main management page.
            // This is a good pattern, as it prevents form resubmission on refresh.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was created successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, set a generic error message.
            $error_message = "Database Error: Could not create the category. " . $e->getMessage();
        }
    } else {
        // If there were validation errors, combine them into a single message.
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_category.php" method="POST">
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= isset($_POST['category_name']) ? htmlspecialchars($_POST['category_name']) : '' ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Save Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_category.php ---
--- START FILE: admin/add_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access the page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new event data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any success or error messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and trim the form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    // Description is not trimmed to allow for intentional whitespace.
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } else {
        // 3. If validation passes, proceed with database insertion.
        try {
            $sql = "INSERT INTO Events (event_name, description, start_date, end_date, location, created_by_user_id) VALUES (:event_name, :description, :start_date, :end_date, :location, :admin_id)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'] // Log which admin created the event
            ]);

            // Set a success message and redirect back to the main management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was created successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, show an error.
            $error_message = "Database Error: Could not create the event. " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_event.php" method="POST">
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" required>
            </div>

            <button type="submit" class="btn btn-primary">Save Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_event.php ---
--- START FILE: admin/add_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING (for page context) ---
try {
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }
} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate attribute_id from the hidden form field
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['option_value']);
    $errors = [];

    // Validation
    if (!$attribute_id_post || $attribute_id_post != $attribute_id) {
        $errors[] = "Attribute ID mismatch.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value is required.";
    }

    // Check for duplicate option value for this specific attribute
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }
    
    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attribute_options (attribute_id, value) VALUES (:attribute_id, :value)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);

            $_SESSION['success_message'] = "Option '".htmlspecialchars($option_value)."' was added successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if (!$attribute && !$error_message): ?>
            <div class="alert alert-danger">Attribute not found.</div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">Add New Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>

            <?php if ($error_message): ?>
                <div class="alert alert-danger"><?= $error_message ?></div>
            <?php endif; ?>

            <form action="add_option.php?attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="attribute_id" value="<?= $attribute_id ?>">
                <div class="mb-3">
                    <label for="option_value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="option_value" name="option_value" placeholder="e.g., Red, Large, Cotton" value="<?= isset($_POST['option_value']) ? htmlspecialchars($_POST['option_value']) : '' ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Save Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_option.php ---
--- START FILE: admin/add_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$categories = [];

// --- DATA FETCHING for Category Dropdown ---
// This part runs on every page load to populate the category dropdown.
try {
    $stmt = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
// This block only runs when the form is submitted via POST.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize form data
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }
    
    // 3. If validation passes, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO products (product_name, description, category_id, base_price, stock_quantity) VALUES (:product_name, :description, :category_id, :base_price, :stock_quantity)";
            $stmt = $pdo->prepare($sql);
            
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity
            ]);

            // Set success message and redirect
            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was created successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if (empty($categories) && $_SERVER["REQUEST_METHOD"] != "POST"): ?>
            <div class="alert alert-warning">
                You must <a href="add_category.php">create a category</a> before you can add a product.
            </div>
        <?php else: ?>
        <form action="add_product.php" method="POST">
            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= isset($_POST['product_name']) ? htmlspecialchars($_POST['product_name']) : '' ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= (isset($_POST['category_id']) && $_POST['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= isset($_POST['base_price']) ? htmlspecialchars($_POST['base_price']) : '' ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= isset($_POST['stock_quantity']) ? htmlspecialchars($_POST['stock_quantity']) : '' ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Save Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_product.php ---
--- START FILE: admin/add_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$attributes = [];
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    header("Location: manage_products.php?error=noproductid");
    exit();
}

// --- DATA FETCHING (Product Name and Attributes with their Options) ---
try {
    // 1. Fetch the parent product name
    $sql_product = "SELECT product_name FROM products WHERE product_id = :product_id";
    $stmt_product = $pdo->prepare($sql_product);
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        throw new Exception("Product not found.");
    }

    // 2. Fetch all attributes and their options to build the form
    $sql_attrs = "SELECT a.attribute_id, a.name, ao.option_id, ao.value 
                  FROM attributes a
                  JOIN attribute_options ao ON a.attribute_id = ao.attribute_id
                  ORDER BY a.name, ao.value";
    $stmt_attrs = $pdo->query($sql_attrs);
    $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);

    // Group options by attribute for easy form generation
    foreach ($all_options as $option) {
        $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
        $attributes[$option['name']]['options'][] = [
            'option_id' => $option['option_id'],
            'value' => $option['value']
        ];
    }

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id_post = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $sku = trim($_POST['sku']);
    $price = trim($_POST['price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $selected_options = $_POST['options'] ?? [];
    
    // --- Validation ---
    $errors = [];
    if ($product_id_post != $product_id) $errors[] = "Product ID mismatch.";
    if ($stock_quantity === false || $stock_quantity < 0) $errors[] = "Stock quantity must be a valid, non-negative integer.";
    if (!empty($price) && (!is_numeric($price) || $price < 0)) $errors[] = "Price must be a valid, non-negative number if specified.";
    if (empty($selected_options)) $errors[] = "You must select at least one option for the variant.";

    if (empty($errors)) {
        $pdo->beginTransaction();
        try {
            // Step 1: Insert the main variant record
            $sql_variant = "INSERT INTO product_variants (product_id, sku, price, stock_quantity) VALUES (:product_id, :sku, :price, :stock_quantity)";
            $stmt_variant = $pdo->prepare($sql_variant);
            $stmt_variant->execute([
                ':product_id' => $product_id,
                ':sku' => !empty($sku) ? $sku : null,
                ':price' => !empty($price) ? $price : null,
                ':stock_quantity' => $stock_quantity
            ]);
            $variant_id = $pdo->lastInsertId();

            // Step 2: Link the selected options to the new variant
            $sql_link = "INSERT INTO product_variant_options (variant_id, option_id) VALUES (:variant_id, :option_id)";
            $stmt_link = $pdo->prepare($sql_link);
            foreach ($selected_options as $option_id) {
                $stmt_link->execute([
                    ':variant_id' => $variant_id,
                    ':option_id' => $option_id
                ]);
            }
            
            // If everything was successful, commit the transaction
            $pdo->commit();
            
            $_SESSION['success_message'] = "New variant was created successfully!";
            header("Location: manage_variants.php?product_id=" . $product_id);
            exit();

        } catch (Exception $e) {
            // If any part fails, roll back the transaction
            $pdo->rollBack();
            $error_message = "Database transaction failed: " . $e->getMessage();
        }
    } else {
        $error_message = implode("<br>", $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
            <h1 class="mb-4">Add Variant for: <strong><?= htmlspecialchars($product['product_name']) ?></strong></h1>

            <form action="add_variant.php?product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="product_id" value="<?= $product_id ?>">

                <div class="card p-3 mb-4">
                    <h5>Variant Attributes</h5>
                    <p class="text-muted">Select one option from each relevant attribute group to define this unique variant.</p>
                    <div class="row">
                        <?php if (!empty($attributes)): ?>
                            <?php foreach ($attributes as $name => $data): ?>
                                <div class="col-md-4 mb-3">
                                    <label for="option_<?= $data['attribute_id'] ?>" class="form-label"><strong><?= htmlspecialchars($name) ?></strong></label>
                                    <select class="form-select" name="options[]" id="option_<?= $data['attribute_id'] ?>">
                                        <option value="">-- Select <?= htmlspecialchars($name) ?> --</option>
                                        <?php foreach ($data['options'] as $option): ?>
                                            <option value="<?= $option['option_id'] ?>"><?= htmlspecialchars($option['value']) ?></option>
                                        <?php endforeach; ?>
                                    </select>
                                </div>
                            <?php endforeach; ?>
                        <?php else: ?>
                            <div class="col">
                                <p class="text-warning">No attributes have been defined yet. Please <a href="manage_attributes.php">add attributes and options</a> first.</p>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <div class="card p-3">
                    <h5>Variant Details</h5>
                     <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="sku" class="form-label">SKU (Optional)</label>
                            <input type="text" class="form-control" id="sku" name="sku" placeholder="Unique product code">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="price" class="form-label">Specific Price (Optional)</label>
                             <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" placeholder="Overrides base price">
                            </div>
                        </div>
                         <div class="col-md-4 mb-3">
                            <label for="stock_quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="0" required>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary" <?= empty($attributes) ? 'disabled' : '' ?>>Save Variant</button>
                    <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_variant.php ---
--- START FILE: admin/delete_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute_name = '';
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// This is the most important part of the script. Before we can delete an attribute,
// we must check if any of its options are being used by any product variants.
function isAttributeInUse($pdo, $attribute_id) {
    $sql = "SELECT COUNT(*) 
            FROM product_variant_options pvo
            JOIN attribute_options ao ON pvo.option_id = ao.option_id
            WHERE ao.attribute_id = :attribute_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':attribute_id' => $attribute_id]);
    return $stmt->fetchColumn() > 0;
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);

    if ($attribute_id) {
        if (isAttributeInUse($pdo, $attribute_id)) {
            $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
        } else {
            try {
                // Because the foreign key has ON DELETE CASCADE, deleting the attribute
                // will automatically delete all its associated options.
                $sql = "DELETE FROM attributes WHERE attribute_id = :attribute_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':attribute_id' => $attribute_id]);

                $_SESSION['success_message'] = "The attribute and all its options were successfully deleted.";
                header("Location: manage_attributes.php");
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the attribute. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Attribute ID. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    if (isAttributeInUse($pdo, $attribute_id)) {
        $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
    } else {
        try {
            $sql = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':attribute_id' => $attribute_id]);
            $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($attribute) {
                $attribute_name = $attribute['name'];
            } else {
                $error_message = "No attribute found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: " . $e->getMessage();
        }
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the attribute: <strong><?= htmlspecialchars($attribute_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This will also delete all of its associated options (e.g., deleting 'Color' will also delete 'Red', 'Blue', etc.). This action cannot be undone.</p>
            </div>

            <form action="delete_attribute.php" method="POST">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_attribute.php ---
--- START FILE: admin/delete_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category_name = '';
$category_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    if ($category_id) {
        try {
            // First, check if any products are using this category.
            // This prevents orphaning products and maintains data integrity.
            $sql_check = "SELECT COUNT(*) FROM products WHERE category_id = :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_id' => $category_id]);
            
            if ($stmt_check->fetchColumn() > 0) {
                // If products are using this category, prevent deletion.
                $error_message = "Cannot delete this category because it is currently assigned to one or more products. Please reassign the products to another category before deleting this one.";
            } else {
                // If no products are using it, proceed with deletion.
                $sql = "DELETE FROM categories WHERE category_id = :category_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':category_id' => $category_id]);

                // Set a success message and redirect back to the management page.
                $_SESSION['success_message'] = "The category was successfully deleted.";
                header("Location: manage_categories.php");
                exit();
            }

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not delete the category. " . $e->getMessage();
        }
    } else {
        $error_message = "Invalid Category ID. Deletion failed.";
    }

// --- DATA FETCHING FOR CONFIRMATION PAGE (HANDLE GET REQUEST) ---
} else {
    $category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($category_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT category_name FROM categories WHERE category_id = :category_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':category_id' => $category_id]);
            $category = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($category) {
                $category_name = $category['category_name'];
            } else {
                $error_message = "No category found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Category ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_categories.php" class="btn btn-secondary">Back to Category Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the category: <strong><?= htmlspecialchars($category_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone. Any products in this category will need to be reassigned.</p>
            </div>

            <form action="delete_category.php" method="POST">
                <input type="hidden" name="category_id" value="<?= htmlspecialchars($category_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_category.php ---
--- START FILE: admin/delete_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event_name = '';
$event_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    if ($event_id) {
        try {
            // NOTE: For a more advanced system, you would first check if this event has
            // associated sub-events or registrations and prevent deletion if it does.
            // For now, we will proceed with a direct delete.
            $sql = "DELETE FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "The event was successfully deleted.";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // Handle potential foreign key constraint errors if sub-events exist
            if ($e->getCode() == '23000') {
                 $error_message = "Cannot delete this event because it has associated data (like sub-events or registrations). Please remove the associated data first.";
            } else {
                $error_message = "Database Error: Could not delete the event. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Event ID. Deletion failed.";
    }
} else {
    // --- DATA FETCHING FOR CONFIRMATION (HANDLE GET REQUEST) ---
    $event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($event_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT event_name FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);
            $event = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($event) {
                $event_name = $event['event_name'];
            } else {
                $error_message = "No event found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Event ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_events.php" class="btn btn-secondary">Back to Event Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the event: <strong><?= htmlspecialchars($event_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_event.php" method="POST">
                <input type="hidden" name="event_id" value="<?= htmlspecialchars($event_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_event.php ---
--- START FILE: admin/delete_option.php ---
`$language
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute = null;
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $attribute_name = trim($_POST['name']);
    $errors = [];

    // Validation
    if (!$attribute_id) {
        $errors[] = "Invalid Attribute ID.";
    }
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicates (excluding the current attribute)
    if (empty($errors)) {
        try {
            $sql_check = "SELECT attribute_id FROM attributes WHERE name = :name AND attribute_id != :attribute_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, perform the update
    if (empty($errors)) {
        try {
            $sql = "UPDATE attributes SET name = :name WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);

            $_SESSION['success_message'] = "Attribute name updated successfully!";
            header("Location: manage_attributes.php");
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // Repopulate attribute array for form redisplay on error
    $attribute = ['attribute_id' => $attribute_id, 'name' => $attribute_name];

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    try {
        $sql = "SELECT * FROM attributes WHERE attribute_id = :attribute_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute) {
            $error_message = "Attribute not found.";
            $attribute = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch attribute. " . $e->getMessage();
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($attribute): ?>
        <form action="edit_attribute.php?id=<?= htmlspecialchars($attribute_id) ?>" method="POST">
            <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute['attribute_id']) ?>">
            
            <div class="mb-3">
                <label for="name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="name" name="name" value="<?= htmlspecialchars($attribute['name']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_attributes.php" class="btn btn-primary">Back to Attribute Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_attribute.php ---
--- START FILE: admin/edit_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category = null; // This will hold the category data we are editing.
$category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get category ID from the URL.

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the edit form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the category_id from a hidden field in the form.
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and sanitize the submitted form data.
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation.
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    } elseif (!$category_id) {
        $errors[] = "Invalid Category ID. Cannot update.";
    }

    // 3. Check for duplicates (but exclude the current category being edited).
    if (empty($errors)) {
        try {
            $sql_check = "SELECT category_id FROM categories WHERE category_name = :category_name AND category_id != :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name, ':category_id' => $category_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes, proceed with the database UPDATE.
    if (empty($errors)) {
        try {
            $sql = "UPDATE categories SET 
                        category_name = :category_name, 
                        description = :description 
                    WHERE category_id = :category_id";

            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description,
                ':category_id' => $category_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was updated successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the category. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // If there was a validation error, we need to repopulate the $category variable to refill the form with the attempted values.
    $category = $_POST;
    // We need to ensure category_id is still in the array for the form's hidden field.
    $category['category_id'] = $category_id;


} elseif ($category_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded to get the category data from the DB.
    try {
        $sql = "SELECT * FROM categories WHERE category_id = :category_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':category_id' => $category_id]);
        $category = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$category) {
            $error_message = "No category found with this ID.";
            $category = null; // Ensure the form doesn't try to render.
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Category ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($category): // Only show the form if we successfully found a category to edit ?>
        <form action="edit_category.php?id=<?= htmlspecialchars($category_id) ?>" method="POST">
            <input type="hidden" name="category_id" value="<?= htmlspecialchars($category['category_id']) ?>">
            
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= htmlspecialchars($category['category_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($category['description']) ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Update Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <p>The requested category could not be found.</p>
            <a href="manage_categories.php" class="btn btn-primary">Back to Category Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_category.php ---
--- START FILE: admin/edit_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event = null; // This will hold the event data we fetch.
$event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get event ID from URL

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the event_id from a hidden field in the form
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and trim the submitted form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } elseif (!$event_id) {
        $error_message = "Invalid Event ID. Cannot update.";
    } else {
        // 3. If validation passes, proceed with the database UPDATE.
        try {
            $sql = "UPDATE Events SET 
                event_name = :event_name, 
                description = :description, 
                start_date = :start_date, 
                end_date = :end_date, 
                location = :location, 
                event_UpdatedByUser_Id = :admin_id 
            WHERE event_id = :event_id";

            $stmt = $pdo->prepare($sql);

            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'],
                ':event_id' => $event_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was updated successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the event. " . $e->getMessage();
        }
    }
    // If there was a validation error, we need to repopulate the $event variable to refill the form
    $event = $_POST;

} elseif ($event_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded, to get the data from the DB.
    try {
        $sql = "SELECT * FROM Events WHERE event_id = :event_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':event_id' => $event_id]);
        $event = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$event) {
            $error_message = "No event found with this ID.";
            $event = null; // Ensure the form doesn't try to render
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Event ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>

        <?php if ($event): // Only show the form if we successfully found an event to edit ?>
        <form action="edit_event.php?id=<?= htmlspecialchars($event_id) ?>" method="POST">
            <input type="hidden" name="event_id" value="<?= htmlspecialchars($event['event_id']) ?>">
            
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" value="<?= htmlspecialchars($event['event_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($event['description']) ?></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" value="<?= htmlspecialchars($event['start_date']) ?>" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" value="<?= htmlspecialchars($event['end_date']) ?>" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" value="<?= htmlspecialchars($event['location']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_events.php" class="btn btn-primary">Back to Event Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_event.php ---
--- START FILE: admin/edit_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$option = null;
$attribute = null;
$option_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE IDs ---
if (!$option_id || !$attribute_id) {
    header("Location: manage_attributes.php?error=invalidids");
    exit();
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate IDs from hidden form fields
    $option_id_post = filter_input(INPUT_POST, 'option_id', FILTER_VALIDATE_INT);
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['value']);
    $errors = [];

    // Validation
    if ($option_id_post !== $option_id || $attribute_id_post !== $attribute_id) {
        $errors[] = "ID mismatch. Update failed.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value cannot be empty.";
    }

    // Check for duplicate option value for this attribute, excluding the current option
    if (empty($errors)) {
        try {
            $sql_check = "SELECT option_id FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value AND option_id != :option_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value,
                ':option_id' => $option_id
            ]);
            if ($stmt_check->fetch()) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE attribute_options SET value = :value WHERE option_id = :option_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':value' => $option_value, ':option_id' => $option_id]);

            $_SESSION['success_message'] = "Option updated successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
     // Repopulate arrays for form redisplay on error
    $option = ['option_id' => $option_id, 'value' => $option_value, 'attribute_id' => $attribute_id];
    $attribute = ['attribute_id' => $attribute_id, 'name' => $_POST['attribute_name']];


// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    try {
        // Fetch the attribute details for context
        $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
        $stmt_attr = $pdo->prepare($sql_attr);
        $stmt_attr->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

        // Fetch the specific option to be edited
        $sql_opt = "SELECT * FROM attribute_options WHERE option_id = :option_id";
        $stmt_opt = $pdo->prepare($sql_opt);
        $stmt_opt->execute([':option_id' => $option_id]);
        $option = $stmt_opt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute || !$option) {
            $error_message = "Attribute or Option not found.";
            $option = null; // Prevent form rendering
        }

    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch details. " . $e->getMessage();
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php elseif ($option && $attribute): ?>
            <h1 class="mb-4">Edit Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>
            
            <form action="edit_option.php?id=<?= $option_id ?>&attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="option_id" value="<?= htmlspecialchars($option['option_id']) ?>">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <input type="hidden" name="attribute_name" value="<?= htmlspecialchars($attribute['name']) ?>">


                <div class="mb-3">
                    <label for="value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="value" name="value" value="<?= htmlspecialchars($option['value']) ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Update Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php else: ?>
            <div class="alert alert-info">Loading...</div>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_option.php ---
--- END FILE: admin/manage_events.php ---
--- START FILE: admin/manage_options.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$options = [];
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING ---
try {
    // 1. Fetch the parent attribute's name for context
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }

    // 2. Fetch all options belonging to this attribute
    $sql_opts = "SELECT option_id, value FROM attribute_options WHERE attribute_id = :attribute_id ORDER BY value ASC";
    $stmt_opts = $pdo->prepare($sql_opts);
    $stmt_opts->execute([':attribute_id' => $attribute_id]);
    $options = $stmt_opts->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Options - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">
                Manage Options for: <strong><?= htmlspecialchars($attribute['name']) ?></strong>
            </h1>

            <?php
            if (isset($_SESSION['success_message'])) {
                echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
                unset($_SESSION['success_message']);
            }
            ?>

            <div class="d-flex justify-content-between mb-3">
                <a href="manage_attributes.php" class="btn btn-secondary">&laquo; Back to Attributes</a>
                <a href="add_option.php?attribute_id=<?= $attribute_id ?>" class="btn btn-success">Add New Option</a>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Option Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($options)): ?>
                        <?php foreach ($options as $option): ?>
                            <tr>
                                <td><?= htmlspecialchars($option['value']) ?></td>
                                <td>
                                    <a href="edit_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-primary btn-sm">Edit</a>
                                    <a href="delete_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-danger btn-sm">Delete</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr>
                            <td colspan="2" class="text-center">No options found for this attribute.</td>
                        </tr>
                    <?php endif; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_options.php ---
--- START FILE: admin/manage_products.php ---
`$language
--- END FILE: public_html/events.html ---
--- START FILE: public_html/event_detail.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Event Details</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Event Detail Page</h2>
        <p>This page will serve as a template for individual event details.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>

--- END FILE: project_context.txt ---
--- START FILE: admin/add_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
$error_message = '';
$success_message = '';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_name = trim($_POST['attribute_name']);
    $errors = [];

    // Validation
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicate attribute name
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attributes WHERE name = :name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "An attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attributes (name) VALUES (:name)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name]);

            $_SESSION['success_message'] = "Attribute '".htmlspecialchars($attribute_name)."' was created successfully!";
            header("Location: manage_attributes.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <form action="add_attribute.php" method="POST">
            <div class="mb-3">
                <label for="attribute_name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="attribute_name" name="attribute_name" placeholder="e.g., Color, Size, Material" value="<?= isset($_POST['attribute_name']) ? htmlspecialchars($_POST['attribute_name']) : '' ?>" required>
                <div class="form-text">This is the type of variation (e.g., "Color"). You will add the specific options (e.g., "Red", "Blue") in the next step.</div>
            </div>

            <button type="submit" class="btn btn-primary">Save Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_attribute.php ---
--- START FILE: admin/add_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access this page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new category data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the "Add Category" form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize the form data
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    }

    // 3. Check for duplicate category name before inserting
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM categories WHERE category_name = :category_name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "A category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes and no duplicates are found, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO categories (category_name, description) VALUES (:category_name, :description)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description
            ]);

            // Set a success message in the session and redirect back to the main management page.
            // This is a good pattern, as it prevents form resubmission on refresh.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was created successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, set a generic error message.
            $error_message = "Database Error: Could not create the category. " . $e->getMessage();
        }
    } else {
        // If there were validation errors, combine them into a single message.
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_category.php" method="POST">
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= isset($_POST['category_name']) ? htmlspecialchars($_POST['category_name']) : '' ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Save Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_category.php ---
--- START FILE: admin/add_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access the page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new event data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any success or error messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and trim the form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    // Description is not trimmed to allow for intentional whitespace.
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } else {
        // 3. If validation passes, proceed with database insertion.
        try {
            $sql = "INSERT INTO Events (event_name, description, start_date, end_date, location, created_by_user_id) VALUES (:event_name, :description, :start_date, :end_date, :location, :admin_id)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'] // Log which admin created the event
            ]);

            // Set a success message and redirect back to the main management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was created successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, show an error.
            $error_message = "Database Error: Could not create the event. " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_event.php" method="POST">
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" required>
            </div>

            <button type="submit" class="btn btn-primary">Save Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_event.php ---
--- START FILE: admin/add_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING (for page context) ---
try {
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }
} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate attribute_id from the hidden form field
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['option_value']);
    $errors = [];

    // Validation
    if (!$attribute_id_post || $attribute_id_post != $attribute_id) {
        $errors[] = "Attribute ID mismatch.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value is required.";
    }

    // Check for duplicate option value for this specific attribute
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }
    
    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attribute_options (attribute_id, value) VALUES (:attribute_id, :value)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);

            $_SESSION['success_message'] = "Option '".htmlspecialchars($option_value)."' was added successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if (!$attribute && !$error_message): ?>
            <div class="alert alert-danger">Attribute not found.</div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">Add New Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>

            <?php if ($error_message): ?>
                <div class="alert alert-danger"><?= $error_message ?></div>
            <?php endif; ?>

            <form action="add_option.php?attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="attribute_id" value="<?= $attribute_id ?>">
                <div class="mb-3">
                    <label for="option_value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="option_value" name="option_value" placeholder="e.g., Red, Large, Cotton" value="<?= isset($_POST['option_value']) ? htmlspecialchars($_POST['option_value']) : '' ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Save Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_option.php ---
--- START FILE: admin/add_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$categories = [];

// --- DATA FETCHING for Category Dropdown ---
// This part runs on every page load to populate the category dropdown.
try {
    $stmt = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
// This block only runs when the form is submitted via POST.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize form data
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }
    
    // 3. If validation passes, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO products (product_name, description, category_id, base_price, stock_quantity) VALUES (:product_name, :description, :category_id, :base_price, :stock_quantity)";
            $stmt = $pdo->prepare($sql);
            
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity
            ]);

            // Set success message and redirect
            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was created successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if (empty($categories) && $_SERVER["REQUEST_METHOD"] != "POST"): ?>
            <div class="alert alert-warning">
                You must <a href="add_category.php">create a category</a> before you can add a product.
            </div>
        <?php else: ?>
        <form action="add_product.php" method="POST">
            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= isset($_POST['product_name']) ? htmlspecialchars($_POST['product_name']) : '' ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= (isset($_POST['category_id']) && $_POST['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= isset($_POST['base_price']) ? htmlspecialchars($_POST['base_price']) : '' ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= isset($_POST['stock_quantity']) ? htmlspecialchars($_POST['stock_quantity']) : '' ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Save Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_product.php ---
--- START FILE: admin/add_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$attributes = [];
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    header("Location: manage_products.php?error=noproductid");
    exit();
}

// --- DATA FETCHING (Product Name and Attributes with their Options) ---
try {
    // 1. Fetch the parent product name
    $sql_product = "SELECT product_name FROM products WHERE product_id = :product_id";
    $stmt_product = $pdo->prepare($sql_product);
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        throw new Exception("Product not found.");
    }

    // 2. Fetch all attributes and their options to build the form
    $sql_attrs = "SELECT a.attribute_id, a.name, ao.option_id, ao.value 
                  FROM attributes a
                  JOIN attribute_options ao ON a.attribute_id = ao.attribute_id
                  ORDER BY a.name, ao.value";
    $stmt_attrs = $pdo->query($sql_attrs);
    $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);

    // Group options by attribute for easy form generation
    foreach ($all_options as $option) {
        $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
        $attributes[$option['name']]['options'][] = [
            'option_id' => $option['option_id'],
            'value' => $option['value']
        ];
    }

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id_post = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $sku = trim($_POST['sku']);
    $price = trim($_POST['price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $selected_options = $_POST['options'] ?? [];
    
    // --- Validation ---
    $errors = [];
    if ($product_id_post != $product_id) $errors[] = "Product ID mismatch.";
    if ($stock_quantity === false || $stock_quantity < 0) $errors[] = "Stock quantity must be a valid, non-negative integer.";
    if (!empty($price) && (!is_numeric($price) || $price < 0)) $errors[] = "Price must be a valid, non-negative number if specified.";
    if (empty($selected_options)) $errors[] = "You must select at least one option for the variant.";

    if (empty($errors)) {
        $pdo->beginTransaction();
        try {
            // Step 1: Insert the main variant record
            $sql_variant = "INSERT INTO product_variants (product_id, sku, price, stock_quantity) VALUES (:product_id, :sku, :price, :stock_quantity)";
            $stmt_variant = $pdo->prepare($sql_variant);
            $stmt_variant->execute([
                ':product_id' => $product_id,
                ':sku' => !empty($sku) ? $sku : null,
                ':price' => !empty($price) ? $price : null,
                ':stock_quantity' => $stock_quantity
            ]);
            $variant_id = $pdo->lastInsertId();

            // Step 2: Link the selected options to the new variant
            $sql_link = "INSERT INTO product_variant_options (variant_id, option_id) VALUES (:variant_id, :option_id)";
            $stmt_link = $pdo->prepare($sql_link);
            foreach ($selected_options as $option_id) {
                $stmt_link->execute([
                    ':variant_id' => $variant_id,
                    ':option_id' => $option_id
                ]);
            }
            
            // If everything was successful, commit the transaction
            $pdo->commit();
            
            $_SESSION['success_message'] = "New variant was created successfully!";
            header("Location: manage_variants.php?product_id=" . $product_id);
            exit();

        } catch (Exception $e) {
            // If any part fails, roll back the transaction
            $pdo->rollBack();
            $error_message = "Database transaction failed: " . $e->getMessage();
        }
    } else {
        $error_message = implode("<br>", $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
            <h1 class="mb-4">Add Variant for: <strong><?= htmlspecialchars($product['product_name']) ?></strong></h1>

            <form action="add_variant.php?product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="product_id" value="<?= $product_id ?>">

                <div class="card p-3 mb-4">
                    <h5>Variant Attributes</h5>
                    <p class="text-muted">Select one option from each relevant attribute group to define this unique variant.</p>
                    <div class="row">
                        <?php if (!empty($attributes)): ?>
                            <?php foreach ($attributes as $name => $data): ?>
                                <div class="col-md-4 mb-3">
                                    <label for="option_<?= $data['attribute_id'] ?>" class="form-label"><strong><?= htmlspecialchars($name) ?></strong></label>
                                    <select class="form-select" name="options[]" id="option_<?= $data['attribute_id'] ?>">
                                        <option value="">-- Select <?= htmlspecialchars($name) ?> --</option>
                                        <?php foreach ($data['options'] as $option): ?>
                                            <option value="<?= $option['option_id'] ?>"><?= htmlspecialchars($option['value']) ?></option>
                                        <?php endforeach; ?>
                                    </select>
                                </div>
                            <?php endforeach; ?>
                        <?php else: ?>
                            <div class="col">
                                <p class="text-warning">No attributes have been defined yet. Please <a href="manage_attributes.php">add attributes and options</a> first.</p>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <div class="card p-3">
                    <h5>Variant Details</h5>
                     <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="sku" class="form-label">SKU (Optional)</label>
                            <input type="text" class="form-control" id="sku" name="sku" placeholder="Unique product code">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="price" class="form-label">Specific Price (Optional)</label>
                             <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" placeholder="Overrides base price">
                            </div>
                        </div>
                         <div class="col-md-4 mb-3">
                            <label for="stock_quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="0" required>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary" <?= empty($attributes) ? 'disabled' : '' ?>>Save Variant</button>
                    <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_variant.php ---
--- START FILE: admin/delete_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute_name = '';
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// This is the most important part of the script. Before we can delete an attribute,
// we must check if any of its options are being used by any product variants.
function isAttributeInUse($pdo, $attribute_id) {
    $sql = "SELECT COUNT(*) 
            FROM product_variant_options pvo
            JOIN attribute_options ao ON pvo.option_id = ao.option_id
            WHERE ao.attribute_id = :attribute_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':attribute_id' => $attribute_id]);
    return $stmt->fetchColumn() > 0;
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);

    if ($attribute_id) {
        if (isAttributeInUse($pdo, $attribute_id)) {
            $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
        } else {
            try {
                // Because the foreign key has ON DELETE CASCADE, deleting the attribute
                // will automatically delete all its associated options.
                $sql = "DELETE FROM attributes WHERE attribute_id = :attribute_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':attribute_id' => $attribute_id]);

                $_SESSION['success_message'] = "The attribute and all its options were successfully deleted.";
                header("Location: manage_attributes.php");
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the attribute. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Attribute ID. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    if (isAttributeInUse($pdo, $attribute_id)) {
        $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
    } else {
        try {
            $sql = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':attribute_id' => $attribute_id]);
            $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($attribute) {
                $attribute_name = $attribute['name'];
            } else {
                $error_message = "No attribute found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: " . $e->getMessage();
        }
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the attribute: <strong><?= htmlspecialchars($attribute_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This will also delete all of its associated options (e.g., deleting 'Color' will also delete 'Red', 'Blue', etc.). This action cannot be undone.</p>
            </div>

            <form action="delete_attribute.php" method="POST">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_attribute.php ---
--- START FILE: admin/delete_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category_name = '';
$category_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    if ($category_id) {
        try {
            // First, check if any products are using this category.
            // This prevents orphaning products and maintains data integrity.
            $sql_check = "SELECT COUNT(*) FROM products WHERE category_id = :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_id' => $category_id]);
            
            if ($stmt_check->fetchColumn() > 0) {
                // If products are using this category, prevent deletion.
                $error_message = "Cannot delete this category because it is currently assigned to one or more products. Please reassign the products to another category before deleting this one.";
            } else {
                // If no products are using it, proceed with deletion.
                $sql = "DELETE FROM categories WHERE category_id = :category_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':category_id' => $category_id]);

                // Set a success message and redirect back to the management page.
                $_SESSION['success_message'] = "The category was successfully deleted.";
                header("Location: manage_categories.php");
                exit();
            }

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not delete the category. " . $e->getMessage();
        }
    } else {
        $error_message = "Invalid Category ID. Deletion failed.";
    }

// --- DATA FETCHING FOR CONFIRMATION PAGE (HANDLE GET REQUEST) ---
} else {
    $category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($category_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT category_name FROM categories WHERE category_id = :category_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':category_id' => $category_id]);
            $category = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($category) {
                $category_name = $category['category_name'];
            } else {
                $error_message = "No category found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Category ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_categories.php" class="btn btn-secondary">Back to Category Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the category: <strong><?= htmlspecialchars($category_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone. Any products in this category will need to be reassigned.</p>
            </div>

            <form action="delete_category.php" method="POST">
                <input type="hidden" name="category_id" value="<?= htmlspecialchars($category_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_category.php ---
--- START FILE: admin/delete_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event_name = '';
$event_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    if ($event_id) {
        try {
            // NOTE: For a more advanced system, you would first check if this event has
            // associated sub-events or registrations and prevent deletion if it does.
            // For now, we will proceed with a direct delete.
            $sql = "DELETE FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "The event was successfully deleted.";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // Handle potential foreign key constraint errors if sub-events exist
            if ($e->getCode() == '23000') {
                 $error_message = "Cannot delete this event because it has associated data (like sub-events or registrations). Please remove the associated data first.";
            } else {
                $error_message = "Database Error: Could not delete the event. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Event ID. Deletion failed.";
    }
} else {
    // --- DATA FETCHING FOR CONFIRMATION (HANDLE GET REQUEST) ---
    $event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($event_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT event_name FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);
            $event = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($event) {
                $event_name = $event['event_name'];
            } else {
                $error_message = "No event found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Event ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_events.php" class="btn btn-secondary">Back to Event Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the event: <strong><?= htmlspecialchars($event_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_event.php" method="POST">
                <input type="hidden" name="event_id" value="<?= htmlspecialchars($event_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_event.php ---
--- START FILE: admin/delete_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$option_value = '';
$option_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT); // For redirection

// --- VALIDATE IDs ---
if (!$option_id || !$attribute_id) {
    header("Location: manage_attributes.php?error=invalidids");
    exit();
}

// Helper function to check if the option is in use
function isOptionInUse($pdo, $option_id) {
    $sql = "SELECT COUNT(*) FROM product_variant_options WHERE option_id = :option_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':option_id' => $option_id]);
    return $stmt->fetchColumn() > 0;
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $option_id_post = filter_input(INPUT_POST, 'option_id', FILTER_VALIDATE_INT);

    if ($option_id_post === $option_id) {
        if (isOptionInUse($pdo, $option_id)) {
            $error_message = "Cannot delete this option because it is currently in use by a product variant.";
        } else {
            try {
                $sql = "DELETE FROM attribute_options WHERE option_id = :option_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':option_id' => $option_id]);

                $_SESSION['success_message'] = "The option was successfully deleted.";
                header("Location: manage_options.php?attribute_id=" . $attribute_id);
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the option. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "ID mismatch. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    if (isOptionInUse($pdo, $option_id)) {
        $error_message = "Cannot delete this option because it is in use by at least one product variant. You must edit or remove the variant(s) using this option first.";
    } else {
        try {
            // Fetch option value for the confirmation message
            $sql = "SELECT value FROM attribute_options WHERE option_id = :option_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':option_id' => $option_id]);
            $option = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($option) {
                $option_value = $option['value'];
            } else {
                $error_message = "No option found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Option</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Back to Options</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the option: <strong><?= htmlspecialchars($option_value) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_option.php?id=<?= $option_id ?>&attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="option_id" value="<?= htmlspecialchars($option_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_option.php ---
--- START FILE: admin/delete_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$categories = [];
$product_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- DATA FETCHING (for both categories and the specific product) ---
// Fetch all categories for the dropdown menu
try {
    $stmt_cat = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt_cat->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM SUBMISSION LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and validate form data
    $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (!$product_id) {
        $errors[] = "Invalid Product ID. Update failed.";
    }
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }

    // 3. If validation passes, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE products SET 
                        product_name = :product_name, 
                        description = :description, 
                        category_id = :category_id, 
                        base_price = :base_price, 
                        stock_quantity = :stock_quantity 
                    WHERE product_id = :product_id";
            
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity,
                ':product_id' => $product_id
            ]);

            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was updated successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    
    // If validation fails, repopulate the product array to refill the form with submitted values
    $product = $_POST;
    $product['product_id'] = $product_id; // ensure ID is preserved

// --- INITIAL PAGE LOAD LOGIC (GET REQUEST) ---
} elseif ($product_id && empty($error_message)) {
    try {
        $sql_prod = "SELECT * FROM products WHERE product_id = :product_id";
        $stmt_prod = $pdo->prepare($sql_prod);
        $stmt_prod->execute([':product_id' => $product_id]);
        $product = $stmt_prod->fetch(PDO::FETCH_ASSOC);

        if (!$product) {
            $error_message = "No product found with this ID.";
            $product = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch product details. " . $e->getMessage();
    }
} elseif (!$product_id) {
    $error_message = "No Product ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
        <form action="edit_product.php?id=<?= htmlspecialchars($product_id) ?>" method="POST">
            <input type="hidden" name="product_id" value="<?= htmlspecialchars($product['product_id']) ?>">

            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= htmlspecialchars($product['product_name']) ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= ($product['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($product['description']) ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= htmlspecialchars($product['base_price']) ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= htmlspecialchars($product['stock_quantity']) ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Update Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php elseif(empty($error_message)): ?>
            <div class="alert alert-warning">Loading product data...</div>
        <?php else: ?>
             <a href="manage_products.php" class="btn btn-primary">Back to Product Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.
--- END FILE: admin/delete_product.php ---
--- START FILE: admin/delete_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$variant_details = '';
$variant_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT); // For redirection

// --- VALIDATE IDs ---
if (!$variant_id || !$product_id) {
    header("Location: manage_products.php?error=invalidids");
    exit();
}

// Helper function to check if the variant has been ordered.
function isVariantInUse($pdo, $variant_id) {
    $sql = "SELECT COUNT(*) FROM orderitems WHERE variant_id = :variant_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':variant_id' => $variant_id]);
    return $stmt->fetchColumn() > 0;
}

// Helper function to get the variant's descriptive string
function getVariantDetails($pdo, $variant_id) {
    $sql = "SELECT GROUP_CONCAT(CONCAT(a.name, ': ', ao.value) ORDER BY a.name SEPARATOR ', ') AS options_string
            FROM product_variants pv
            LEFT JOIN product_variant_options pvo ON pv.variant_id = pvo.variant_id
            LEFT JOIN attribute_options ao ON pvo.option_id = ao.option_id
            LEFT JOIN attributes a ON ao.attribute_id = a.attribute_id
            WHERE pv.variant_id = :variant_id
            GROUP BY pv.variant_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':variant_id' => $variant_id]);
    $result = $stmt->fetch(PDO::FETCH_ASSOC);
    return $result ? $result['options_string'] : 'Unknown Variant';
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $variant_id_post = filter_input(INPUT_POST, 'variant_id', FILTER_VALIDATE_INT);

    if ($variant_id_post === $variant_id) {
        if (isVariantInUse($pdo, $variant_id)) {
            $error_message = "Cannot delete this variant because it is part of one or more past orders.";
        } else {
            try {
                // The ON DELETE CASCADE constraint will automatically remove entries
                // from product_variant_options when the variant is deleted.
                $sql = "DELETE FROM product_variants WHERE variant_id = :variant_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':variant_id' => $variant_id]);

                $_SESSION['success_message'] = "The variant was successfully deleted.";
                header("Location: manage_variants.php?product_id=" . $product_id);
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the variant. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "ID mismatch. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    if (isVariantInUse($pdo, $variant_id)) {
        $error_message = "Cannot delete this variant because it is part of one or more past orders. To make it unavailable, please edit it and set its stock to 0.";
    } else {
        $variant_details = getVariantDetails($pdo, $variant_id);
        if ($variant_details === 'Unknown Variant') {
             $error_message = "Could not find the specified variant.";
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Variant</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Back to Variants</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the variant with the following options: <strong><?= htmlspecialchars($variant_details) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_variant.php?id=<?= $variant_id ?>&product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="variant_id" value="<?= htmlspecialchars($variant_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_variant.php ---
--- START FILE: admin/edit_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute = null;
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $attribute_name = trim($_POST['name']);
    $errors = [];

    // Validation
    if (!$attribute_id) {
        $errors[] = "Invalid Attribute ID.";
    }
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicates (excluding the current attribute)
    if (empty($errors)) {
        try {
            $sql_check = "SELECT attribute_id FROM attributes WHERE name = :name AND attribute_id != :attribute_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, perform the update
    if (empty($errors)) {
        try {
            $sql = "UPDATE attributes SET name = :name WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);

            $_SESSION['success_message'] = "Attribute name updated successfully!";
            header("Location: manage_attributes.php");
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // Repopulate attribute array for form redisplay on error
    $attribute = ['attribute_id' => $attribute_id, 'name' => $attribute_name];

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    try {
        $sql = "SELECT * FROM attributes WHERE attribute_id = :attribute_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute) {
            $error_message = "Attribute not found.";
            $attribute = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch attribute. " . $e->getMessage();
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($attribute): ?>
        <form action="edit_attribute.php?id=<?= htmlspecialchars($attribute_id) ?>" method="POST">
            <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute['attribute_id']) ?>">
            
            <div class="mb-3">
                <label for="name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="name" name="name" value="<?= htmlspecialchars($attribute['name']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_attributes.php" class="btn btn-primary">Back to Attribute Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_attribute.php ---
--- START FILE: admin/edit_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category = null; // This will hold the category data we are editing.
$category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get category ID from the URL.

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the edit form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the category_id from a hidden field in the form.
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and sanitize the submitted form data.
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation.
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    } elseif (!$category_id) {
        $errors[] = "Invalid Category ID. Cannot update.";
    }

    // 3. Check for duplicates (but exclude the current category being edited).
    if (empty($errors)) {
        try {
            $sql_check = "SELECT category_id FROM categories WHERE category_name = :category_name AND category_id != :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name, ':category_id' => $category_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes, proceed with the database UPDATE.
    if (empty($errors)) {
        try {
            $sql = "UPDATE categories SET 
                        category_name = :category_name, 
                        description = :description 
                    WHERE category_id = :category_id";

            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description,
                ':category_id' => $category_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was updated successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the category. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // If there was a validation error, we need to repopulate the $category variable to refill the form with the attempted values.
    $category = $_POST;
    // We need to ensure category_id is still in the array for the form's hidden field.
    $category['category_id'] = $category_id;


} elseif ($category_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded to get the category data from the DB.
    try {
        $sql = "SELECT * FROM categories WHERE category_id = :category_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':category_id' => $category_id]);
        $category = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$category) {
            $error_message = "No category found with this ID.";
            $category = null; // Ensure the form doesn't try to render.
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Category ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($category): // Only show the form if we successfully found a category to edit ?>
        <form action="edit_category.php?id=<?= htmlspecialchars($category_id) ?>" method="POST">
            <input type="hidden" name="category_id" value="<?= htmlspecialchars($category['category_id']) ?>">
            
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= htmlspecialchars($category['category_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($category['description']) ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Update Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <p>The requested category could not be found.</p>
            <a href="manage_categories.php" class="btn btn-primary">Back to Category Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_category.php ---
--- START FILE: admin/edit_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event = null; // This will hold the event data we fetch.
$event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get event ID from URL

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the event_id from a hidden field in the form
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and trim the submitted form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } elseif (!$event_id) {
        $error_message = "Invalid Event ID. Cannot update.";
    } else {
        // 3. If validation passes, proceed with the database UPDATE.
        try {
            $sql = "UPDATE Events SET 
                event_name = :event_name, 
                description = :description, 
                start_date = :start_date, 
                end_date = :end_date, 
                location = :location, 
                event_UpdatedByUser_Id = :admin_id 
            WHERE event_id = :event_id";

            $stmt = $pdo->prepare($sql);

            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'],
                ':event_id' => $event_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was updated successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the event. " . $e->getMessage();
        }
    }
    // If there was a validation error, we need to repopulate the $event variable to refill the form
    $event = $_POST;

} elseif ($event_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded, to get the data from the DB.
    try {
        $sql = "SELECT * FROM Events WHERE event_id = :event_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':event_id' => $event_id]);
        $event = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$event) {
            $error_message = "No event found with this ID.";
            $event = null; // Ensure the form doesn't try to render
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Event ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>

        <?php if ($event): // Only show the form if we successfully found an event to edit ?>
        <form action="edit_event.php?id=<?= htmlspecialchars($event_id) ?>" method="POST">
            <input type="hidden" name="event_id" value="<?= htmlspecialchars($event['event_id']) ?>">
            
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" value="<?= htmlspecialchars($event['event_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($event['description']) ?></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" value="<?= htmlspecialchars($event['start_date']) ?>" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" value="<?= htmlspecialchars($event['end_date']) ?>" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" value="<?= htmlspecialchars($event['location']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_events.php" class="btn btn-primary">Back to Event Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_event.php ---
--- START FILE: admin/edit_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$option = null;
$attribute = null;
$option_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE IDs ---
if (!$option_id || !$attribute_id) {
    header("Location: manage_attributes.php?error=invalidids");
    exit();
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate IDs from hidden form fields
    $option_id_post = filter_input(INPUT_POST, 'option_id', FILTER_VALIDATE_INT);
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['value']);
    $errors = [];

    // Validation
    if ($option_id_post !== $option_id || $attribute_id_post !== $attribute_id) {
        $errors[] = "ID mismatch. Update failed.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value cannot be empty.";
    }

    // Check for duplicate option value for this attribute, excluding the current option
    if (empty($errors)) {
        try {
            $sql_check = "SELECT option_id FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value AND option_id != :option_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value,
                ':option_id' => $option_id
            ]);
            if ($stmt_check->fetch()) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE attribute_options SET value = :value WHERE option_id = :option_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':value' => $option_value, ':option_id' => $option_id]);

            $_SESSION['success_message'] = "Option updated successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
     // Repopulate arrays for form redisplay on error
    $option = ['option_id' => $option_id, 'value' => $option_value, 'attribute_id' => $attribute_id];
    $attribute = ['attribute_id' => $attribute_id, 'name' => $_POST['attribute_name']];


// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    try {
        // Fetch the attribute details for context
        $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
        $stmt_attr = $pdo->prepare($sql_attr);
        $stmt_attr->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

        // Fetch the specific option to be edited
        $sql_opt = "SELECT * FROM attribute_options WHERE option_id = :option_id";
        $stmt_opt = $pdo->prepare($sql_opt);
        $stmt_opt->execute([':option_id' => $option_id]);
        $option = $stmt_opt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute || !$option) {
            $error_message = "Attribute or Option not found.";
            $option = null; // Prevent form rendering
        }

    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch details. " . $e->getMessage();
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php elseif ($option && $attribute): ?>
            <h1 class="mb-4">Edit Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>
            
            <form action="edit_option.php?id=<?= $option_id ?>&attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="option_id" value="<?= htmlspecialchars($option['option_id']) ?>">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <input type="hidden" name="attribute_name" value="<?= htmlspecialchars($attribute['name']) ?>">


                <div class="mb-3">
                    <label for="value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="value" name="value" value="<?= htmlspecialchars($option['value']) ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Update Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php else: ?>
            <div class="alert alert-info">Loading...</div>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_option.php ---
--- START FILE: admin/edit_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$categories = [];
$product_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- DATA FETCHING (for both categories and the specific product) ---
// Fetch all categories for the dropdown menu
try {
    $stmt_cat = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt_cat->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM SUBMISSION LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and validate form data
    $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (!$product_id) {
        $errors[] = "Invalid Product ID. Update failed.";
    }
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }

    // 3. If validation passes, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE products SET 
                        product_name = :product_name, 
                        description = :description, 
                        category_id = :category_id, 
                        base_price = :base_price, 
                        stock_quantity = :stock_quantity 
                    WHERE product_id = :product_id";
            
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity,
                ':product_id' => $product_id
            ]);

            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was updated successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    
    // If validation fails, repopulate the product array to refill the form with submitted values
    $product = $_POST;
    $product['product_id'] = $product_id; // ensure ID is preserved

// --- INITIAL PAGE LOAD LOGIC (GET REQUEST) ---
} elseif ($product_id && empty($error_message)) {
    try {
        $sql_prod = "SELECT * FROM products WHERE product_id = :product_id";
        $stmt_prod = $pdo->prepare($sql_prod);
        $stmt_prod->execute([':product_id' => $product_id]);
        $product = $stmt_prod->fetch(PDO::FETCH_ASSOC);

        if (!$product) {
            $error_message = "No product found with this ID.";
            $product = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch product details. " . $e->getMessage();
    }
} elseif (!$product_id) {
    $error_message = "No Product ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
        <form action="edit_product.php?id=<?= htmlspecialchars($product_id) ?>" method="POST">
            <input type="hidden" name="product_id" value="<?= htmlspecialchars($product['product_id']) ?>">

            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= htmlspecialchars($product['product_name']) ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= ($product['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($product['description']) ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= htmlspecialchars($product['base_price']) ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= htmlspecialchars($product['stock_quantity']) ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Update Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php elseif(empty($error_message)): ?>
            <div class="alert alert-warning">Loading product data...</div>
        <?php else: ?>
             <a href="manage_products.php" class="btn btn-primary">Back to Product Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_product.php ---
--- START FILE: admin/edit_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$variant = null;
$attributes = [];
$selected_option_ids = [];

$variant_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE IDs ---
if (!$variant_id || !$product_id) {
    header("Location: manage_products.php?error=invalidids");
    exit();
}

// --- DATA FETCHING (for initial page load) ---
if ($_SERVER["REQUEST_METHOD"] != "POST") {
    try {
        // Fetch product name
        $stmt_product = $pdo->prepare("SELECT product_name FROM products WHERE product_id = :product_id");
        $stmt_product->execute([':product_id' => $product_id]);
        $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

        // Fetch variant details
        $stmt_variant = $pdo->prepare("SELECT * FROM product_variants WHERE variant_id = :variant_id");
        $stmt_variant->execute([':variant_id' => $variant_id]);
        $variant = $stmt_variant->fetch(PDO::FETCH_ASSOC);
        
        if (!$product || !$variant) throw new Exception("Product or Variant not found.");

        // Fetch all available attributes and their options
        $stmt_attrs = $pdo->query("SELECT a.attribute_id, a.name, ao.option_id, ao.value FROM attributes a JOIN attribute_options ao ON a.attribute_id = ao.attribute_id ORDER BY a.name, ao.value");
        $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);
        foreach ($all_options as $option) {
            $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
            $attributes[$option['name']]['options'][] = ['option_id' => $option['option_id'], 'value' => $option['value']];
        }

        // Fetch the currently selected options for this variant
        $stmt_selected = $pdo->prepare("SELECT option_id FROM product_variant_options WHERE variant_id = :variant_id");
        $stmt_selected->execute([':variant_id' => $variant_id]);
        $selected_option_ids = $stmt_selected->fetchAll(PDO::FETCH_COLUMN);

    } catch (Exception $e) {
        $error_message = "Error fetching data: " . $e->getMessage();
    }
}


// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-fetch product name for context in case of error
    $stmt_product = $pdo->prepare("SELECT product_name FROM products WHERE product_id = :product_id");
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    // Repopulate attributes for form redisplay
    $stmt_attrs = $pdo->query("SELECT a.attribute_id, a.name, ao.option_id, ao.value FROM attributes a JOIN attribute_options ao ON a.attribute_id = ao.attribute_id ORDER BY a.name, ao.value");
    $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);
    foreach ($all_options as $option) {
        $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
        $attributes[$option['name']]['options'][] = ['option_id' => $option['option_id'], 'value' => $option['value']];
    }
    
    // Get submitted data
    $variant_id_post = filter_input(INPUT_POST, 'variant_id', FILTER_VALIDATE_INT);
    $sku = trim($_POST['sku']);
    $price = trim($_POST['price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $selected_options = $_POST['options'] ?? [];
    
    // --- Validation ---
    $errors = [];
    if ($variant_id_post !== $variant_id) $errors[] = "Variant ID mismatch.";
    if ($stock_quantity === false || $stock_quantity < 0) $errors[] = "Stock quantity must be a non-negative integer.";
    if (!empty($price) && !is_numeric($price)) $errors[] = "Price must be a number if specified.";
    if (empty($selected_options)) $errors[] = "A variant must have at least one option selected.";

    if (empty($errors)) {
        $pdo->beginTransaction();
        try {
            // Step 1: Update the main variant record
            $sql_variant = "UPDATE product_variants SET sku = :sku, price = :price, stock_quantity = :stock_quantity WHERE variant_id = :variant_id";
            $stmt_variant = $pdo->prepare($sql_variant);
            $stmt_variant->execute([
                ':sku' => !empty($sku) ? $sku : null,
                ':price' => !empty($price) ? $price : null,
                ':stock_quantity' => $stock_quantity,
                ':variant_id' => $variant_id
            ]);

            // Step 2: Delete old option links for this variant
            $stmt_delete_links = $pdo->prepare("DELETE FROM product_variant_options WHERE variant_id = :variant_id");
            $stmt_delete_links->execute([':variant_id' => $variant_id]);

            // Step 3: Insert the new option links
            $sql_link = "INSERT INTO product_variant_options (variant_id, option_id) VALUES (:variant_id, :option_id)";
            $stmt_link = $pdo->prepare($sql_link);
            foreach ($selected_options as $option_id) {
                if (!empty($option_id)) { // Ensure we don't insert empty values
                    $stmt_link->execute([':variant_id' => $variant_id, ':option_id' => $option_id]);
                }
            }
            
            $pdo->commit();
            
            $_SESSION['success_message'] = "Variant updated successfully!";
            header("Location: manage_variants.php?product_id=" . $product_id);
            exit();

        } catch (Exception $e) {
            $pdo->rollBack();
            $error_message = "Database transaction failed: " . $e->getMessage();
        }
    } else {
        $error_message = implode("<br>", $errors);
    }

    // Repopulate variant data for form redisplay on error
    $variant = $_POST;
    $selected_option_ids = $selected_options;
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product && $variant): ?>
            <h1 class="mb-4">Edit Variant for: <strong><?= htmlspecialchars($product['product_name']) ?></strong></h1>

            <form action="edit_variant.php?id=<?= $variant_id ?>&product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="variant_id" value="<?= $variant_id ?>">

                <div class="card p-3 mb-4">
                    <h5>Variant Attributes</h5>
                    <div class="row">
                        <?php foreach ($attributes as $name => $data): ?>
                            <div class="col-md-4 mb-3">
                                <label for="option_<?= $data['attribute_id'] ?>" class="form-label"><strong><?= htmlspecialchars($name) ?></strong></label>
                                <select class="form-select" name="options[]" id="option_<?= $data['attribute_id'] ?>">
                                    <option value="">-- Not Applicable --</option>
                                    <?php foreach ($data['options'] as $option): ?>
                                        <option value="<?= $option['option_id'] ?>" <?= in_array($option['option_id'], $selected_option_ids) ? 'selected' : '' ?>>
                                            <?= htmlspecialchars($option['value']) ?>
                                        </option>
                                    <?php endforeach; ?>
                                </select>
                            </div>
                        <?php endforeach; ?>
                    </div>
                </div>

                <div class="card p-3">
                    <h5>Variant Details</h5>
                     <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="sku" class="form-label">SKU (Optional)</label>
                            <input type="text" class="form-control" id="sku" name="sku" value="<?= htmlspecialchars($variant['sku'] ?? '') ?>">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="price" class="form-label">Specific Price (Optional)</label>
                             <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" value="<?= htmlspecialchars($variant['price'] ?? '') ?>" placeholder="Overrides base price">
                            </div>
                        </div>
                         <div class="col-md-4 mb-3">
                            <label for="stock_quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= htmlspecialchars($variant['stock_quantity'] ?? 0) ?>" required>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary">Update Variant</button>
                    <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_variant.php ---
--- START FILE: admin/index.php ---
`$language
<?php
session_start();

// Check if user is logged in AND is an admin
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If not an admin, or not logged in, redirect to the main login page
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// Admin content goes below this line
echo "<h1>Welcome to the Admin Dashboard, " . htmlspecialchars($_SESSION['username']) . "!</h1>";
?>
--- END FILE: admin/index.php ---
--- START FILE: admin/manage_attributes.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

$attributes = [];
$error_message = '';

try {
    // Fetch all attributes from the database
    $sql = "SELECT attribute_id, name FROM attributes ORDER BY name ASC";
    $stmt = $pdo->query($sql);
    $attributes = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch attributes. " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Attributes - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Manage Product Attributes</h1>

        <?php
        if (isset($_SESSION['success_message'])) {
            echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
            unset($_SESSION['success_message']);
        }
        if ($error_message) {
            echo '<div class="alert alert-danger">' . htmlspecialchars($error_message) . '</div>';
        }
        ?>

        <div class="d-flex justify-content-between mb-3">
             <a href="manage_products.php" class="btn btn-secondary">&laquo; Back to Products</a>
             <a href="add_attribute.php" class="btn btn-success">Add New Attribute</a>
        </div>


        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Attribute Name</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if (!empty($attributes)): ?>
                    <?php foreach ($attributes as $attribute): ?>
                        <tr>
                            <td><?= htmlspecialchars($attribute['name']) ?></td>
                            <td>
                                <!-- This will link to a page to manage the options (e.g., Red, Blue, Green for Color) -->
                                <a href="manage_options.php?attribute_id=<?= $attribute['attribute_id'] ?>" class="btn btn-info btn-sm">Manage Options</a>
                                <a href="edit_attribute.php?id=<?= $attribute['attribute_id'] ?>" class="btn btn-primary btn-sm">Edit Name</a>
                                <a href="delete_attribute.php?id=<?= $attribute['attribute_id'] ?>" class="btn btn-danger btn-sm">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="2" class="text-center">No attributes found. Click "Add New Attribute" to create one (e.g., 'Color', 'Size').</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_attributes.php ---
--- START FILE: admin/manage_categories.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();

// Ensure user is logged in and is an admin.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- DATABASE LOGIC & PAGE SETUP ---
require_once '../config/db_config.php';

$categories = []; // Initialize an empty array for categories
$error_message = '';

try {
    // Corrected SQL to use the 'categories' table and lowercase column names
    $sql = "SELECT category_id, category_name, description FROM categories ORDER BY category_name ASC";
    $stmt = $pdo->prepare($sql);
    $stmt->execute();
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    // If the query fails, set an error message to display
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Categories - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Category Management</h1>

        <?php
        // Display a success message if one was set in the session
        if (isset($_SESSION['success_message'])) {
            echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
            unset($_SESSION['success_message']);
        }
        // Display an error message if the database query failed
        if ($error_message) {
            echo '<div class="alert alert-danger">' . htmlspecialchars($error_message) . '</div>';
        }
        ?>

        <a href="add_category.php" class="btn btn-success mb-3">Add New Category</a>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Category Name</th>
                    <th>Description</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if (!empty($categories)): ?>
                    <?php foreach ($categories as $category): ?>
                        <tr>
                            <td><?= htmlspecialchars($category['category_name']) ?></td>
                            <td><?= htmlspecialchars($category['description']) ?></td>
                            <td>
                                <a href="edit_category.php?id=<?= $category['category_id'] ?>" class="btn btn-primary btn-sm">Edit</a>
                                <a href="delete_category.php?id=<?= $category['category_id'] ?>" class="btn btn-danger btn-sm">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="3" class="text-center">No categories found. Click "Add New Category" to create one.</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_categories.php ---
--- START FILE: admin/manage_events.php ---
`$language
<?php

session_start();

if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- DATABASE LOGIC & PAGE SETUP BLOCK ---
// This part connects to the DB and gets the events.
require_once '../config/db_config.php';

try {
    $sql = "SELECT event_id, event_name, start_date, end_date, location FROM Events ORDER BY start_date DESC";
    $stmt = $pdo->prepare($sql);
    $stmt->execute();
    $events = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    // If the database connection or query fails, we'll see this error.
    die("Database Error: Could not fetch events. " . $e->getMessage());
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Events - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <?php
    // Check if a success message is set in the session, display it, then unset it.
    if (isset($_SESSION['success_message'])) {
        echo '<div class="container mt-3"><div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div></div>';
        unset($_SESSION['success_message']); // Clear the message so it doesn't show again on refresh
    }
    ?>
    <div class="container mt-5">
        <h1 class="mb-4">Event Management</h1>

        <a href="add_event.php" class="btn btn-success mb-3">Add New Event</a>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Event Name</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Location</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if ($events): ?>
                    <?php foreach ($events as $event): ?>
                        <tr>
                            <td><?= htmlspecialchars($event['event_name']) ?></td>
                            <td><?= htmlspecialchars($event['start_date']) ?></td>
                            <td><?= htmlspecialchars($event['end_date']) ?></td>
                            <td><?= htmlspecialchars($event['location']) ?></td>
                            <td>
                                <a href="edit_event.php?id=<?= $event['event_id'] ?>" class="btn btn-primary btn-sm">Edit</a>
                                <a href="delete_event.php?id=<?= $event['event_id'] ?>" class="btn btn-danger btn-sm">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="5" class="text-center">No events found. Click "Add New Event" to create one.</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_events.php ---
--- START FILE: admin/manage_options.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$options = [];
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING ---
try {
    // 1. Fetch the parent attribute's name for context
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }

    // 2. Fetch all options belonging to this attribute
    $sql_opts = "SELECT option_id, value FROM attribute_options WHERE attribute_id = :attribute_id ORDER BY value ASC";
    $stmt_opts = $pdo->prepare($sql_opts);
    $stmt_opts->execute([':attribute_id' => $attribute_id]);
    $options = $stmt_opts->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Options - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">
                Manage Options for: <strong><?= htmlspecialchars($attribute['name']) ?></strong>
            </h1>

            <?php
            if (isset($_SESSION['success_message'])) {
                echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
                unset($_SESSION['success_message']);
            }
            ?>

            <div class="d-flex justify-content-between mb-3">
                <a href="manage_attributes.php" class="btn btn-secondary">&laquo; Back to Attributes</a>
                <a href="add_option.php?attribute_id=<?= $attribute_id ?>" class="btn btn-success">Add New Option</a>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Option Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($options)): ?>
                        <?php foreach ($options as $option): ?>
                            <tr>
                                <td><?= htmlspecialchars($option['value']) ?></td>
                                <td>
                                    <a href="edit_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-primary btn-sm">Edit</a>
                                    <a href="delete_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-danger btn-sm">Delete</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr>
                            <td colspan="2" class="text-center">No options found for this attribute.</td>
                        </tr>
                    <?php endif; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_options.php ---
--- START FILE: admin/manage_products.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();

// Ensure user is logged in and is an admin.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- DATABASE LOGIC & PAGE SETUP ---
require_once '../config/db_config.php';

$products = []; // Initialize an empty array for products
$error_message = '';

try {
    // SQL query to get products and their corresponding category name.
    $sql = "SELECT 
                p.product_id, 
                p.product_name, 
                p.base_price, 
                p.stock_quantity, 
                c.category_name 
            FROM 
                products AS p 
            LEFT JOIN 
                categories AS c ON p.category_id = c.category_id 
            ORDER BY 
                p.product_name ASC";
                
    $stmt = $pdo->prepare($sql);
    $stmt->execute();
    $products = $stmt->fetchAll(PDO::FETCH_ASSOC);

} catch (PDOException $e) {
    // If the query fails, set an error message to display.
    $error_message = "Database Error: Could not fetch products. " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Products - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Product Management</h1>

        <?php
        // Display a success message if one was set in the session
        if (isset($_SESSION['success_message'])) {
            echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
            unset($_SESSION['success_message']);
        }
        // Display an error message if the database query failed
        if ($error_message) {
            echo '<div class="alert alert-danger">' . htmlspecialchars($error_message) . '</div>';
        }
        ?>

        <a href="add_product.php" class="btn btn-success mb-3">Add New Product</a>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Stock</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <?php if (!empty($products)): ?>
                    <?php foreach ($products as $product): ?>
                        <tr>
                            <td><?= htmlspecialchars($product['product_name']) ?></td>
                            <td><?= htmlspecialchars($product['category_name'] ?? 'N/A') ?></td>
                            <td>$<?= htmlspecialchars(number_format($product['base_price'], 2)) ?></td>
                            <td><?= htmlspecialchars($product['stock_quantity']) ?></td>
                            <td>
                                <!-- === NEW BUTTON ADDED ON THIS LINE === -->
                                <a href="manage_variants.php?product_id=<?= $product['product_id'] ?>" class="btn btn-info btn-sm">Variants</a>
                                <a href="edit_product.php?id=<?= $product['product_id'] ?>" class="btn btn-primary btn-sm">Edit</a>
                                <a href="delete_product.php?id=<?= $product['product_id'] ?>" class="btn btn-danger btn-sm">Delete</a>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="5" class="text-center">No products found. Click "Add New Product" to create one.</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_products.php ---
--- START FILE: admin/manage_variants.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$product = null;
$variants = [];
$error_message = '';
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    // If no product_id is provided, redirect back to the main products page.
    header("Location: manage_products.php?error=noproductid");
    exit();
}

// --- DATA FETCHING ---
try {
    // 1. Fetch the parent product's name for the page title and context.
    $sql_product = "SELECT product_name FROM products WHERE product_id = :product_id";
    $stmt_product = $pdo->prepare($sql_product);
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        // If the product ID is invalid, stop and show an error.
        throw new Exception("Product not found.");
    }

    // 2. Fetch all variants for this specific product.
    // This is a more advanced query that joins all the new variant tables together.
    // GROUP_CONCAT is a powerful MySQL function that aggregates multiple rows into a single string,
    // which is perfect for displaying the combined options like "Color: Red, Size: Large".
    $sql_variants = "
        SELECT 
            pv.variant_id,
            pv.sku,
            pv.price,
            pv.stock_quantity,
            GROUP_CONCAT(CONCAT(a.name, ': ', ao.value) ORDER BY a.name SEPARATOR ', ') AS options_string
        FROM 
            product_variants AS pv
        LEFT JOIN 
            product_variant_options AS pvo ON pv.variant_id = pvo.variant_id
        LEFT JOIN 
            attribute_options AS ao ON pvo.option_id = ao.option_id
        LEFT JOIN 
            attributes AS a ON ao.attribute_id = a.attribute_id
        WHERE 
            pv.product_id = :product_id
        GROUP BY 
            pv.variant_id
        ORDER BY 
            options_string";
            
    $stmt_variants = $pdo->prepare($sql_variants);
    $stmt_variants->execute([':product_id' => $product_id]);
    $variants = $stmt_variants->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Variants - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_products.php" class="btn btn-secondary">Back to Products</a>
        <?php else: ?>
            <h1 class="mb-4">
                Manage Variants for: <strong><?= htmlspecialchars($product['product_name']) ?></strong>
            </h1>

            <?php
            // Display success messages from session after redirects
            if (isset($_SESSION['success_message'])) {
                echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
                unset($_SESSION['success_message']);
            }
            ?>

            <div class="d-flex justify-content-between mb-3">
                <a href="manage_products.php" class="btn btn-secondary">&laquo; Back to Products</a>
                <div>
                    <!-- This button will eventually link to a page to manage attributes like "Color", "Size" globally -->
                    <a href="manage_attributes.php" class="btn btn-outline-secondary">Manage Attributes</a>
                    <a href="add_variant.php?product_id=<?= $product_id ?>" class="btn btn-success">Add New Variant</a>
                </div>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Variant (Options)</th>
                        <th>SKU</th>
                        <th>Specific Price</th>
                        <th>Stock</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($variants)): ?>
                        <?php foreach ($variants as $variant): ?>
                            <tr>
                                <td><?= htmlspecialchars($variant['options_string'] ?? 'Base Product') ?></td>
                                <td><?= htmlspecialchars($variant['sku'] ?? 'N/A') ?></td>
                                <td><?= $variant['price'] !== null ? '$' . htmlspecialchars(number_format($variant['price'], 2)) : '(Uses Base Price)' ?></td>
                                <td><?= htmlspecialchars($variant['stock_quantity']) ?></td>
                                <td>
                                    <a href="edit_variant.php?id=<?= $variant['variant_id'] ?>&product_id=<?= $product_id ?>" class="btn btn-primary btn-sm">Edit</a>
                                    <a href="delete_variant.php?id=<?= $variant['variant_id'] ?>&product_id=<?= $product_id ?>" class="btn btn-danger btn-sm">Delete</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr>
                            <td colspan="5" class="text-center">No variants found for this product. Click "Add New Variant" to create one.</td>
                        </tr>
                    <?php endif; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_variants.php ---
--- START FILE: config/db_config.php ---
`$language
<?php
/*
* DATABASE CONFIGURATION
*
* This file defines the constants needed to connect to the database.
*/

// --- IMPORTANT ---
// It is strongly recommended to create a new MySQL user for this application
// instead of using the default 'root' user.
// You can do this from the main phpMyAdmin page under "User accounts".

// Database Credentials
define('DB_HOST', 'localhost');
define('DB_USER', 'alsm_user'); // <-- Replace with the username you create
define('DB_PASS', '8KG21J6ED7zHhwL-'); // <-- Replace with your new password
define('DB_NAME', 'alsm_db'); // Using the database name you chose

// --- DATABASE CONNECTION (PDO) ---
try {
    // Create a new PDO instance (the connection object)
    $pdo = new PDO("mysql:host=" . DB_HOST . ";dbname=" . DB_NAME, DB_USER, DB_PASS);
    
    // Set PDO to throw exceptions on error for better error handling
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

} catch(PDOException $e){
    // If the connection fails, stop the script and show a generic error.
    // In a real production environment, you would log this error instead of showing it.
    die("ERROR: Could not connect to the database. " . $e->getMessage());
}
?>
--- END FILE: config/db_config.php ---
--- START FILE: public_html/about.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - About Us</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>About The Festival</h2>
        <p>Information about the history and purpose of the festival will go here.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/about.html ---
--- START FILE: public_html/campsite_booking.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Campsite Booking</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Campsite Booking</h2>
        <p>Information about campsites and a booking form will be here.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/campsite_booking.html ---
--- START FILE: public_html/cart_actions.php ---
`$language
<?php
// --- CONFIGURATION AND SESSION START ---
require_once '../config/db_config.php';
session_start();

// Initialize the cart if it doesn't exist
if (!isset($_SESSION['cart'])) {
    $_SESSION['cart'] = [];
}

// --- MAIN ACTION HANDLER ---
$action = $_POST['action'] ?? $_GET['action'] ?? null;

// --- HANDLE ADD TO CART ---
if ($action === 'add' && $_SERVER['REQUEST_METHOD'] === 'POST') {
    $product_id = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);
    $selected_options_post = $_POST['options'] ?? [];

    if (!$product_id || !$quantity || $quantity <= 0) {
        header('Location: merchandise.php?error=invaliddata');
        exit();
    }

    $variant_id = null;
    $error = null;

    if (!empty($selected_options_post)) {
        try {
            $option_count = count($selected_options_post);
            $in_clause = implode(',', array_fill(0, $option_count, '?'));
            
            $sql = "SELECT pvo.variant_id
                    FROM product_variant_options pvo
                    JOIN attribute_options ao ON pvo.option_id = ao.option_id
                    WHERE ao.value IN ($in_clause) AND pvo.variant_id IN (
                        SELECT variant_id FROM product_variants WHERE product_id = ?
                    )
                    GROUP BY pvo.variant_id
                    HAVING COUNT(DISTINCT pvo.option_id) = ?";

            $params = array_values($selected_options_post);
            $params[] = $product_id;
            $params[] = $option_count;

            $stmt = $pdo->prepare($sql);
            $stmt->execute($params);
            $result = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($result) {
                $variant_id = $result['variant_id'];
            } else {
                $error = "The selected combination of options is not available.";
            }
        } catch (PDOException $e) {
            $error = "Database error finding variant: " . $e->getMessage();
        }
    } else {
        $error = "This product has required options that were not selected.";
    }

    if (!$error && $variant_id) {
        $cart_item_key = $variant_id;
        if (isset($_SESSION['cart'][$cart_item_key])) {
            $_SESSION['cart'][$cart_item_key]['quantity'] += $quantity;
        } else {
            $_SESSION['cart'][$cart_item_key] = [
                'product_id' => $product_id,
                'variant_id' => $variant_id,
                'quantity' => $quantity
            ];
        }
        header('Location: view_cart.php?status=added');
        exit();
    } else {
        $_SESSION['error_message'] = $error ?? 'Could not add item to cart.';
        header('Location: product_detail.php?id=' . $product_id);
        exit();
    }
}

// --- HANDLE UPDATE QUANTITY ---
if ($action === 'update' && $_SERVER['REQUEST_METHOD'] === 'POST') {
    $variant_id = filter_input(INPUT_POST, 'variant_id', FILTER_VALIDATE_INT);
    $quantity = filter_input(INPUT_POST, 'quantity', FILTER_VALIDATE_INT);

    if ($variant_id && $quantity > 0 && isset($_SESSION['cart'][$variant_id])) {
        // Update the quantity for the specific item in the cart
        $_SESSION['cart'][$variant_id]['quantity'] = $quantity;
    }
    // Redirect back to the cart page
    header('Location: view_cart.php?status=updated');
    exit();
}

// --- HANDLE REMOVE FROM CART ---
if ($action === 'remove' && isset($_GET['variant_id'])) {
    $variant_id = filter_input(INPUT_GET, 'variant_id', FILTER_VALIDATE_INT);
    
    if ($variant_id && isset($_SESSION['cart'][$variant_id])) {
        // Remove the specific item from the cart array
        unset($_SESSION['cart'][$variant_id]);
    }
    // Redirect back to the cart page
    header('Location: view_cart.php?status=removed');
    exit();
}


// Fallback redirect if no valid action is provided
header('Location: merchandise.php');
exit();

--- END FILE: public_html/cart_actions.php ---
--- START FILE: public_html/checkout.php ---
`$language
<?php
require_once '../config/db_config.php';
session_start();

// --- SECURITY CHECK: User must be logged in to check out ---
if (!isset($_SESSION['user_id'])) {
    $_SESSION['redirect_url'] = 'checkout.php'; // Remember where to send them back after login
    $_SESSION['error_message'] = 'You must be logged in to proceed to checkout.';
    header('Location: login.php');
    exit();
}

// --- SECURITY CHECK: Cart cannot be empty ---
if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
    header('Location: merchandise.php?error=cartempty');
    exit();
}

// --- DATA FETCHING ---
$user = null;
$cart_items = [];
$cart_total = 0;
$error_message = '';

try {
    // 1. Fetch logged-in user's data to pre-fill the form
    $stmt_user = $pdo->prepare("SELECT * FROM users WHERE user_id = :user_id");
    $stmt_user->execute([':user_id' => $_SESSION['user_id']]);
    $user = $stmt_user->fetch(PDO::FETCH_ASSOC);

    // 2. Fetch cart item details to display summary
    $variant_ids = array_keys($_SESSION['cart']);
    $in_clause = implode(',', array_fill(0, count($variant_ids), '?'));
    
    $sql_cart = "
        SELECT 
            p.product_name,
            pv.variant_id, pv.price AS variant_price, p.base_price,
            (SELECT GROUP_CONCAT(CONCAT(a.name, ': ', ao.value) SEPARATOR ', ') 
             FROM product_variant_options pvo
             JOIN attribute_options ao ON pvo.option_id = ao.option_id
             JOIN attributes a ON ao.attribute_id = a.attribute_id
             WHERE pvo.variant_id = pv.variant_id) AS options_string
        FROM product_variants pv
        JOIN products p ON pv.product_id = p.product_id
        WHERE pv.variant_id IN ($in_clause)
    ";
    $stmt_cart = $pdo->prepare($sql_cart);
    $stmt_cart->execute($variant_ids);
    $results = $stmt_cart->fetchAll(PDO::FETCH_ASSOC);

    // 3. Process cart data and calculate total
    foreach ($results as $item) {
        $variant_id = $item['variant_id'];
        $quantity = $_SESSION['cart'][$variant_id]['quantity'];
        $price = $item['variant_price'] ?? $item['base_price'];
        $subtotal = $price * $quantity;
        
        $cart_items[] = [
            'name' => $item['product_name'],
            'options' => $item['options_string'],
            'quantity' => $quantity,
            'price' => $price
        ];
        $cart_total += $subtotal;
    }

} catch (PDOException $e) {
    $error_message = "Database error: " . $e->getMessage();
}

$page_title = 'Checkout';
require_once __DIR__ . '/../templates/header.php';
?>

<main class="container mt-4">
    <h1 class="mb-4">Checkout</h1>
    
    <?php if ($error_message): ?>
        <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
    <?php else: ?>
        <div class="row g-5">
            <!-- Shipping Information Form -->
            <div class="col-md-7 col-lg-8">
                <h4 class="mb-3">Shipping Address</h4>
                <form action="place_order.php" method="POST" class="needs-validation" novalidate>
                    <div class="row g-3">
                        <div class="col-sm-6">
                            <label for="firstName" class="form-label">First name</label>
                            <input type="text" class="form-control" id="firstName" name="first_name" placeholder="" value="<?= htmlspecialchars($user['first_name'] ?? '') ?>" required>
                        </div>

                        <div class="col-sm-6">
                            <label for="lastName" class="form-label">Last name</label>
                            <input type="text" class="form-control" id="lastName" name="last_name" placeholder="" value="<?= htmlspecialchars($user['last_name'] ?? '') ?>" required>
                        </div>

                        <div class="col-12">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" placeholder="you@example.com" value="<?= htmlspecialchars($user['email'] ?? '') ?>" required>
                        </div>

                        <div class="col-12">
                            <label for="address" class="form-label">Address</label>
                            <input type="text" class="form-control" id="address" name="address" placeholder="1234 Main St" required>
                        </div>
                        
                        <!-- Add more address fields as needed: City, State, Postcode etc. -->
                    </div>

                    <hr class="my-4">
                    
                    <!-- Payment section placeholder -->
                    <h4 class="mb-3">Payment</h4>
                    <p class="text-muted">Payment gateway integration will be handled in a future phase. Clicking "Place Order" will finalize the order for now.</p>

                    <hr class="my-4">

                    <button class="w-100 btn btn-primary btn-lg" type="submit">Place Order</button>
                </form>
            </div>

            <!-- Order Summary Sidebar -->
            <div class="col-md-5 col-lg-4 order-md-last">
                <h4 class="d-flex justify-content-between align-items-center mb-3">
                    <span class="text-primary">Your cart</span>
                    <span class="badge bg-primary rounded-pill"><?= count($cart_items) ?></span>
                </h4>
                <ul class="list-group mb-3">
                    <?php foreach ($cart_items as $item): ?>
                        <li class="list-group-item d-flex justify-content-between lh-sm">
                            <div>
                                <h6 class="my-0"><?= htmlspecialchars($item['name']) ?> (x<?= $item['quantity'] ?>)</h6>
                                <small class="text-muted"><?= htmlspecialchars($item['options']) ?></small>
                            </div>
                            <span class="text-muted">$<?= htmlspecialchars(number_format($item['price'] * $item['quantity'], 2)) ?></span>
                        </li>
                    <?php endforeach; ?>
                    
                    <li class="list-group-item d-flex justify-content-between">
                        <span>Total (AUD)</span>
                        <strong>$<?= htmlspecialchars(number_format($cart_total, 2)) ?></strong>
                    </li>
                </ul>
            </div>
        </div>
    <?php endif; ?>
</main>

<?php 
require_once __DIR__ . '/../templates/footer.php'; 
?>

--- END FILE: public_html/checkout.php ---
--- START FILE: public_html/contact.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Contact Us</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main class="container mt-4">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <h2>Contact Us</h2>
                <p>Have a question? Fill out the form below and we'll get back to you.</p>
                
                <form id="contactForm" novalidate>
                    <div class="mb-3">
                        <label for="contactName" class="form-label">Your Name</label>
                        <input type="text" class="form-control" id="contactName" required>
                    </div>
                    <div class="mb-3">
                        <label for="contactEmail" class="form-label">Your Email</label>
                        <input type="email" class="form-control" id="contactEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="contactMessage" class="form-label">Message</label>
                        <textarea class="form-control" id="contactMessage" rows="5" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Send Message</button>
                </form>
            </div>
        </div>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/contact.html ---
--- START FILE: public_html/diagnose.php ---
`$language
<?php

// Force PHP to display all errors for this script
ini_set('display_errors', 1);
error_reporting(E_ALL);

echo "<h1>Deep Environment Diagnostic</h1>";

// --- Credentials from our config file ---
$db_host = 'localhost';
$db_user = 'alsm_user';
$db_pass = 'Password123'; // The simple password we reset to

echo "<p><strong>Attempting to connect to MySQL server with these credentials:</strong><br>";
echo "Host: " . $db_host . "<br>";
echo "User: " . $db_user . "<br>";
echo "Password: " . $db_pass . "</p><hr>";


try {
    // --- Step 1: Connect to the MySQL SERVER itself ---
    $pdo = new PDO("mysql:host=" . $db_host, $db_user, $db_pass);
    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    
    echo "<p style='color:green; font-weight:bold;'>Step 1 SUCCESS: Connected to the MySQL server process.</p>";

    // --- Step 2: Ask the server to list all databases it knows about ---
    echo "<p><strong>Step 2: Asking the server to list all available databases...</strong></p>";
    $stmt = $pdo->query("SHOW DATABASES");
    $databases = $stmt->fetchAll(PDO::FETCH_COLUMN);

    echo "<h3>Databases that the user '" . $db_user . "' can see:</h3>";
    echo "<pre>";
    print_r($databases);
    echo "</pre>";
    echo "<hr>";

} catch(PDOException $e) {
    // This will catch any connection or query errors
    echo "<p style='color:red; font-weight:bold;'>DIAGNOSTIC FAILED. The script could not complete.</p>";
    echo "<p>The error message is: <strong>" . $e->getMessage() . "</strong></p>";
    echo "<hr>";
}

echo "<h2>PHP Configuration Info</h2>";
phpinfo();

?>
--- END FILE: public_html/diagnose.php ---
--- START FILE: public_html/events.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Events</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Events Listing</h2>
        <p>Details about upcoming events and sub-events will be displayed here.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/events.html ---
--- START FILE: public_html/event_detail.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Event Details</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Event Detail Page</h2>
        <p>This page will serve as a template for individual event details.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/event_detail.html ---
--- START FILE: public_html/index.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Australian Large Scale Models - Home</title>
        <link rel="stylesheet" href="assets/css/reset.css">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
        <link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

    <main class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <h2>Welcome to the Australian Large Scale Models!</h2>
            <p>Your hub for all event information, merchandise, and bookings. This is the main content area, and it takes up 8 of the 12 available columns on medium-sized screens and larger.</p>
        </div>
        <div class="col-md-4">
            <div id="news-box" class="p-3 bg-light rounded">
                <h4>Latest News</h4>
                <p id="news-content" class="mb-0">Some quick updates or announcements could go here.</p>
                <button id="update-news-btn" class="btn btn-sm btn-outline-primary mt-2">Update News</button>
            </div>
        </div>
    </div>
</main>

    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
--- END FILE: public_html/index.html ---
--- START FILE: public_html/login.php ---
`$language
<?php

// FORCE ERROR REPORTING FOR DEBUGGING
ini_set('display_errors', 1);
error_reporting(E_ALL);

// ALL PHP code for this page must go at the very top.
// session_start() must be the very first thing called on the page.
session_start();


// If the user is already logged in, redirect them to their profile page
if (isset($_SESSION['user_id'])) {
    header("Location: profile.php");
    exit(); // Stop script execution
}

// Include the database configuration file
require_once __DIR__ . '/../config/db_config.php';

$error_message = '';

// Check if the form was submitted
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $username = trim($_POST['username']);
    $password = $_POST['password'];

    if (empty($username) || empty($password)) {
        $error_message = "Username and password are required.";
    } else {
        try {
            // Find the user in the database by their username
            $sql = "SELECT user_id, username, password_hash, role FROM Users WHERE username = :username";
            $stmt = $pdo->prepare($sql);
            $stmt->execute(['username' => $username]);
            
            // fetch() returns the user record, or false if not found
            $user = $stmt->fetch(PDO::FETCH_ASSOC);

            // Verify the user was found AND the password matches the hash
            if ($user && password_verify($password, $user['password_hash'])) {
                // Password is correct! Start the user session.
                
                // Regenerate the session ID for security
                session_regenerate_id(true);

                // Store user data in the session array
                $_SESSION['user_id'] = $user['user_id'];
                $_SESSION['username'] = $user['username'];
                $_SESSION['role'] = $user['role'];

                // Redirect the user to their profile page
                header("Location: profile.php");
                exit(); // Important to stop the script after a redirect

            } else {
                // If login fails (user not found or password incorrect)
                $error_message = "Invalid username or password.";
            }
        } catch (PDOException $e) {
            $error_message = "Database error: " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="assets/css/reset.css">
    <link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
         </nav>
    <main class="container mt-4">
        <div class="row">
            <div class="col-md-6 offset-md-3">
                <h2>User Login</h2>

                <?php if (!empty($error_message)): ?>
                    <div class="alert alert-danger"><?php echo $error_message; ?></div>
                <?php endif; ?>

                <form action="login.php" method="POST">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="username" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Login</button>
                </form>
            </div>
        </div>
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="assets/js/main.js"></script>
</body>
</html>
--- END FILE: public_html/login.php ---
--- START FILE: public_html/logout.php ---
`$language
<?php
// Always start the session to access it
session_start();

// Unset all of the session variables
$_SESSION = array();

// If it's desired to kill the session, also delete the session cookie.
// Note: This will destroy the session, and not just the session data!
if (ini_get("session.use_cookies")) {
    $params = session_get_cookie_params();
    setcookie(session_name(), '', time() - 42000,
        $params["path"], $params["domain"],
        $params["secure"], $params["httponly"]
    );
}

// Finally, destroy the session.
session_destroy();

// Redirect to the login page
header("Location: login.php");
exit();
?>
--- END FILE: public_html/logout.php ---
--- START FILE: public_html/merchandise.php ---
`$language
<?php
require_once '../config/db_config.php';

$products = [];
$error_message = '';

try {
    // Select all products that are active and not deleted
    $sql = "SELECT product_id, product_name, description, base_price, image_path 
            FROM products 
            WHERE is_active = 1 AND is_deleted = 0 
            ORDER BY product_name ASC";
    $stmt = $pdo->query($sql);
    $products = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Error fetching products: " . $e->getMessage();
}

// Define the title for the <title> tag in the header
$page_title = 'ALSM - Merchandise';
// We need to specify the path to the templates folder from the public_html directory.
// So we go up one level ('../') and then into 'templates/'.
require_once __DIR__ . '/../templates/header.php';
?>

<main class="container mt-4">
    <div class="row">
        <div class="col-12 text-center mb-4">
            <h2>Merchandise</h2>
        </div>
    </div>
    <div class="row">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php elseif (empty($products)): ?>
            <div class="col-12">
                <p class="text-center">No merchandise is currently available. Please check back later!</p>
            </div>
        <?php else: ?>
            <?php foreach ($products as $product): ?>
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100">
                        <img src="<?= htmlspecialchars($product['image_path'] ?? 'https://placehold.co/400x300?text=No+Image') ?>" class="card-img-top" alt="<?= htmlspecialchars($product['product_name']) ?>">
                        <div class="card-body">
                            <h5 class="card-title"><?= htmlspecialchars($product['product_name']) ?></h5>
                            <p class="card-text"><?= htmlspecialchars(substr($product['description'], 0, 100)) . (strlen($product['description']) > 100 ? '...' : '') ?></p>
                            <p class="card-text"><strong>Price: $<?= htmlspecialchars(number_format($product['base_price'], 2)) ?></strong></p>
                            <a href="product_detail.php?id=<?= $product['product_id'] ?>" class="btn btn-primary">View Details</a>
                        </div>
                    </div>
                </div>
            <?php endforeach; ?>
        <?php endif; ?>
    </div>
</main>

<?php 
// Include the footer template
require_once __DIR__ . '/../templates/footer.php'; 
?>

--- END FILE: public_html/merchandise.php ---
--- START FILE: public_html/order_confirmation.php ---
`$language
<?php
require_once '../config/db_config.php';
session_start();

// --- SECURITY CHECK: Must have come from place_order.php ---
if (!isset($_SESSION['last_order_id'])) {
    // If there's no order ID in the session, they shouldn't be here.
    header('Location: index.html');
    exit();
}

// --- INITIALIZE VARIABLES ---
$order = null;
$order_items = [];
$error_message = '';
$order_id = $_SESSION['last_order_id'];

// --- DATA FETCHING ---
try {
    // 1. Fetch the main order details
    $stmt_order = $pdo->prepare("SELECT * FROM orders WHERE order_id = :order_id AND user_id = :user_id");
    $stmt_order->execute([':order_id' => $order_id, ':user_id' => $_SESSION['user_id']]);
    $order = $stmt_order->fetch(PDO::FETCH_ASSOC);

    if (!$order) {
        throw new Exception("Could not find the specified order.");
    }

    // 2. Fetch the items for this order
    $sql_items = "
        SELECT 
            oi.quantity, oi.price_at_purchase,
            p.product_name,
            (SELECT GROUP_CONCAT(CONCAT(a.name, ': ', ao.value) SEPARATOR ', ') 
             FROM product_variant_options pvo
             JOIN attribute_options ao ON pvo.option_id = ao.option_id
             JOIN attributes a ON ao.attribute_id = a.attribute_id
             WHERE pvo.variant_id = oi.variant_id) AS options_string
        FROM orderitems oi
        JOIN products p ON oi.product_id = p.product_id
        WHERE oi.order_id = :order_id";
    
    $stmt_items = $pdo->prepare($sql_items);
    $stmt_items->execute([':order_id' => $order_id]);
    $order_items = $stmt_items->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error fetching order details: " . $e->getMessage();
}

// --- CLEANUP ---
// Unset the session variable so the user can't refresh and see an old order confirmation.
unset($_SESSION['last_order_id']);

$page_title = 'Order Confirmation';
require_once __DIR__ . '/../templates/header.php';
?>

<main class="container mt-4">
    <div class="py-5 text-center">
        <?php if ($error_message): ?>
            <h1 class="text-danger">Error</h1>
            <p class="lead"><?= htmlspecialchars($error_message) ?></p>
            <a href="index.html" class="btn btn-primary">Go to Homepage</a>
        <?php elseif ($order): ?>
            <h1 class="text-success">Thank You!</h1>
            <h2>Your Order is Confirmed</h2>
            <p class="lead">Your order number is <strong>#<?= htmlspecialchars($order['order_id']) ?></strong>. A confirmation email has been sent (or would be, if this was a live site!).</p>
        <?php endif; ?>
    </div>
    
    <?php if (!empty($order_items)): ?>
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <h4 class="mb-3">Order Summary</h4>
                <ul class="list-group mb-3">
                    <?php foreach ($order_items as $item): ?>
                        <li class="list-group-item d-flex justify-content-between lh-sm">
                            <div>
                                <h6 class="my-0"><?= htmlspecialchars($item['product_name']) ?> (x<?= $item['quantity'] ?>)</h6>
                                <small class="text-muted"><?= htmlspecialchars($item['options_string']) ?></small>
                            </div>
                            <span class="text-muted">$<?= htmlspecialchars(number_format($item['price_at_purchase'] * $item['quantity'], 2)) ?></span>
                        </li>
                    <?php endforeach; ?>
                    
                    <li class="list-group-item d-flex justify-content-between bg-light">
                        <span class="fw-bold">Total (AUD)</span>
                        <strong class="fw-bold">$<?= htmlspecialchars(number_format($order['total_amount'], 2)) ?></strong>
                    </li>
                </ul>
            </div>
        </div>
    <?php endif; ?>

</main>

<?php 
require_once __DIR__ . '/../templates/footer.php'; 
?>

--- END FILE: public_html/order_confirmation.php ---
--- START FILE: public_html/place_order.php ---
`$language
<?php
require_once '../config/db_config.php';
session_start();

// --- PRE-CHECKS ---
if ($_SERVER["REQUEST_METHOD"] !== "POST") {
    header('Location: index.html');
    exit();
}
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php?error=unauthorized');
    exit();
}
if (!isset($_SESSION['cart']) || empty($_SESSION['cart'])) {
    header('Location: merchandise.php?error=cartempty');
    exit();
}

// --- INITIALIZE VARIABLES ---
$user_id = $_SESSION['user_id'];
$cart = $_SESSION['cart'];
$total_amount = 0;
$shipping_address = trim($_POST['first_name']) . " " . trim($_POST['last_name']) . "\n" . trim($_POST['address']);

if (empty(trim($_POST['first_name'])) || empty(trim($_POST['last_name'])) || empty(trim($_POST['address']))) {
    $_SESSION['error_message'] = 'Please fill out all required shipping address fields.';
    header('Location: checkout.php');
    exit();
}

// --- DATABASE TRANSACTION ---
$pdo->beginTransaction();

try {
    // Step 1: Fetch current prices and calculate total amount
    $variant_ids = array_keys($cart);
    $in_clause = implode(',', array_fill(0, count($variant_ids), '?'));
    
    $sql_prices = "SELECT pv.variant_id, pv.price AS variant_price, p.base_price 
                   FROM product_variants pv 
                   JOIN products p ON pv.product_id = p.product_id 
                   WHERE pv.variant_id IN ($in_clause)";
    $stmt_prices = $pdo->prepare($sql_prices);
    $stmt_prices->execute($variant_ids);
    $price_data = $stmt_prices->fetchAll(PDO::FETCH_ASSOC);

    $price_results = [];
    foreach ($price_data as $row) {
        $actual_price = $row['variant_price'] ?? $row['base_price'];
        $price_results[$row['variant_id']] = $actual_price;
    }
    
    foreach($cart as $variant_id => $item) {
        if(isset($price_results[$variant_id])) {
            $total_amount += $price_results[$variant_id] * $item['quantity'];
        } else {
            throw new Exception("An item in your cart (Variant ID: $variant_id) is no longer available.");
        }
    }


    // Step 2: Create the main order record
    $sql_order = "INSERT INTO orders (user_id, total_amount, shipping_address, order_status) VALUES (:user_id, :total_amount, :shipping_address, :order_status)";
    $stmt_order = $pdo->prepare($sql_order);
    $stmt_order->execute([
        ':user_id' => $user_id,
        ':total_amount' => $total_amount,
        ':shipping_address' => $shipping_address,
        ':order_status' => 'paid' // Assuming payment is successful for now
    ]);
    $order_id = $pdo->lastInsertId();

    // Step 3: Create the order items and update stock
    $sql_order_item = "INSERT INTO orderitems (order_id, product_id, variant_id, quantity, price_at_purchase) VALUES (:order_id, :product_id, :variant_id, :quantity, :price)";
    $stmt_order_item = $pdo->prepare($sql_order_item);

    $sql_update_stock = "UPDATE product_variants SET stock_quantity = stock_quantity - :quantity WHERE variant_id = :variant_id";
    $stmt_update_stock = $pdo->prepare($sql_update_stock);

    foreach ($cart as $variant_id => $item) {
        $stmt_order_item->execute([
            ':order_id' => $order_id,
            ':product_id' => $item['product_id'],
            ':variant_id' => $item['variant_id'],
            ':quantity' => $item['quantity'],
            ':price' => $price_results[$variant_id]
        ]);

        $stmt_update_stock->execute([
            ':quantity' => $item['quantity'],
            ':variant_id' => $item['variant_id']
        ]);
    }

    $pdo->commit();

    // Step 4: Clear the cart and redirect to a confirmation page
    unset($_SESSION['cart']);
    $_SESSION['last_order_id'] = $order_id; 

    header('Location: order_confirmation.php');
    exit();

} catch (Exception $e) {
    // If anything went wrong, roll back the entire transaction
    $pdo->rollBack();
    
    // Restore proper error handling
    $_SESSION['error_message'] = 'There was a problem placing your order. Please try again. Error: ' . $e->getMessage();
    header('Location: checkout.php');
    exit();
}

--- END FILE: public_html/place_order.php ---
--- START FILE: public_html/product_detail.php ---
`$language
<?php
// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';
session_start(); // Start the session to handle cart data later

// --- INITIALIZE VARIABLES ---
$product = null;
$variants = [];
$attributes = [];
$error_message = '';
$product_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    $error_message = "No product selected.";
} else {
    // --- DATA FETCHING ---
    try {
        // 1. Fetch the main product details
        $sql_product = "SELECT * FROM products WHERE product_id = :product_id AND is_active = 1 AND is_deleted = 0";
        $stmt_product = $pdo->prepare($sql_product);
        $stmt_product->execute([':product_id' => $product_id]);
        $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

        if (!$product) {
            throw new Exception("Product not found or is unavailable.");
        }

        // 2. Fetch all variants for this product, along with their options
        $sql_variants = "
            SELECT 
                pv.variant_id, pv.sku, pv.price, pv.stock_quantity,
                pvo.option_id,
                a.name AS attribute_name,
                ao.value AS option_value
            FROM product_variants AS pv
            JOIN product_variant_options AS pvo ON pv.variant_id = pvo.variant_id
            JOIN attribute_options AS ao ON pvo.option_id = ao.option_id
            JOIN attributes AS a ON ao.attribute_id = a.attribute_id
            WHERE pv.product_id = :product_id AND pv.is_active = 1
            ORDER BY pv.variant_id, a.name";
        
        $stmt_variants = $pdo->prepare($sql_variants);
        $stmt_variants->execute([':product_id' => $product_id]);
        $results = $stmt_variants->fetchAll(PDO::FETCH_ASSOC);
        
        // 3. Process the results into a structured array for easy use in HTML
        // This creates an array of variants, where each variant has an array of its options.
        $temp_variants = [];
        foreach ($results as $row) {
            $temp_variants[$row['variant_id']]['details'] = [
                'sku' => $row['sku'],
                'price' => $row['price'],
                'stock_quantity' => $row['stock_quantity']
            ];
            $temp_variants[$row['variant_id']]['options'][$row['attribute_name']] = $row['option_value'];
        }
        $variants = $temp_variants;

        // 4. Create a unique list of attributes and options for the dropdowns
        foreach ($variants as $variant) {
            foreach ($variant['options'] as $attr_name => $opt_value) {
                $attributes[$attr_name][] = $opt_value;
            }
        }
        foreach ($attributes as $key => $value) {
            $attributes[$key] = array_unique($value);
            sort($attributes[$key]);
        }

    } catch (Exception $e) {
        $error_message = "Error: " . $e->getMessage();
    }
}

// --- PAGE SETUP ---
$page_title = $product ? htmlspecialchars($product['product_name']) : 'Product Not Found';
require_once __DIR__ . '/../templates/header.php';
?>

<main class="container mt-4">
    <?php if ($error_message): ?>
        <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <a href="merchandise.php" class="btn btn-primary">Back to Merchandise</a>
    <?php elseif ($product): ?>
        <div class="row">
            <!-- Product Image Column -->
            <div class="col-md-6">
                <img src="<?= htmlspecialchars($product['image_path'] ?? 'https://placehold.co/600x400?text=Product+Image') ?>" class="img-fluid rounded" alt="<?= htmlspecialchars($product['product_name']) ?>">
            </div>

            <!-- Product Details Column -->
            <div class="col-md-6">
                <h2><?= htmlspecialchars($product['product_name']) ?></h2>
                <h4 class="text-success">$<?= htmlspecialchars(number_format($product['base_price'], 2)) ?></h4>
                <p class="lead"><?= nl2br(htmlspecialchars($product['description'])) ?></p>

                <hr>

                <!-- Add to Cart Form -->
                <form action="cart_actions.php" method="POST">
                    <input type="hidden" name="action" value="add">
                    <input type="hidden" name="product_id" value="<?= $product['product_id'] ?>">

                    <?php if (!empty($attributes)): ?>
                        <h5>Options</h5>
                        <?php foreach ($attributes as $attr_name => $options_array): ?>
                            <div class="mb-3">
                                <label for="attr_<?= str_replace(' ', '_', $attr_name) ?>" class="form-label"><strong><?= htmlspecialchars($attr_name) ?>:</strong></label>
                                <select class="form-select" name="options[<?= htmlspecialchars($attr_name) ?>]" id="attr_<?= str_replace(' ', '_', $attr_name) ?>" required>
                                    <option value="">Select <?= htmlspecialchars($attr_name) ?></option>
                                    <?php foreach ($options_array as $option): ?>
                                        <option value="<?= htmlspecialchars($option) ?>"><?= htmlspecialchars($option) ?></option>
                                    <?php endforeach; ?>
                                </select>
                            </div>
                        <?php endforeach; ?>
                    <?php endif; ?>

                    <div class="row align-items-end">
                        <div class="col-md-4">
                            <label for="quantity" class="form-label"><strong>Quantity:</strong></label>
                            <input type="number" class="form-control" id="quantity" name="quantity" value="1" min="1" max="10" required>
                        </div>
                        <div class="col-md-8">
                            <button type="submit" class="btn btn-primary btn-lg w-100">Add to Cart</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    <?php endif; ?>
</main>

<?php 
require_once __DIR__ . '/../templates/footer.php'; 
?>

--- END FILE: public_html/product_detail.php ---
--- START FILE: public_html/profile.php ---
`$language

--- END FILE: _local_files/project_context.txt ---
