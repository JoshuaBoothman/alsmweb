# Project Overview
This file contains the concatenated source code of my web project, prepared for analysis by Google Gemini.

**Project Purpose:** [A web dev project for my TAFE course and new business, MVW.]
**Technologies Used:** [PHP, Apache, MySQL, CSS, JavaScript.]
**Analysis Goal:** [Analyze for security, performance, and suggest refactoring for modern best practices.]

--- Directory Structure ---
[_local_files]/
    20250624-1128-schema.json
    202506241211-alsm_db.sql
    Generate-GeminiContext.ps1
    project_context.txt
[admin]/
    add_attribute.php
    add_category.php
    add_event.php
    add_option.php
    add_product.php
    add_variant.php
    delete_attribute.php
    delete_category.php
    delete_event.php
    delete_option.php
    delete_product.php
    delete_variant.php
    edit_attribute.php
    edit_category.php
    edit_event.php
    edit_option.php
    edit_product.php
    edit_variant.php
    index.php
    manage_attributes.php
    manage_categories.php
    manage_events.php
    manage_options.php
    manage_products.php
    manage_variants.php
[config]/
    db_config.php
[lib]/
[public_html]/
    [assets]/
        [css]/
            reset.css
            style.css
            style.css.map
        [images]/
        [js]/
            main.js
    about.html
    campsite_booking.html
    cart_actions.php
    checkout.php
    contact.html
    diagnose.php
    event_detail.html
    events.html
    index.html
    login.php
    logout.php
    merchandise.php
    order_confirmation.php
    place_order.php
    product_detail.php
    profile.php
    register.php
    test_db.php
    view_cart.php
[scss]/
    [abstracts]/
        _variables.scss
    [layout]/
        _footer.scss
        _header.scss
        _navigation.scss
    style.scss
[templates]/
    footer.php
    header.php
project_context.txt

--- File Contents ---

--- START FILE: project_context.txt ---
`$language
# Project Overview
This file contains the concatenated source code of my web project, prepared for analysis by Google Gemini.

**Project Purpose:** [A web dev project for my TAFE course and new business, MVW.]
**Technologies Used:** [PHP, Apache, MySQL, CSS, JavaScript.]
**Analysis Goal:** [Analyze for security, performance, and suggest refactoring for modern best practices.]

--- Directory Structure ---
[_local_files]/
    20250624-1128-schema.json
    202506241211-alsm_db.sql
    Generate-GeminiContext.ps1
    project_context.txt
[admin]/
    add_attribute.php
    add_category.php
    add_event.php
    add_option.php
    add_product.php
    add_variant.php
    delete_attribute.php
    delete_category.php
    delete_event.php
    delete_option.php
    delete_product.php
    delete_variant.php
    edit_attribute.php
    edit_category.php
    edit_event.php
    edit_option.php
    edit_product.php
    edit_variant.php
    index.php
    manage_attributes.php
    manage_categories.php
    manage_events.php
    manage_options.php
    manage_products.php
    manage_variants.php
[config]/
    db_config.php
[lib]/
[public_html]/
    [assets]/
        [css]/
            reset.css
            style.css
            style.css.map
        [images]/
        [js]/
            main.js
    about.html
    campsite_booking.html
    cart_actions.php
    checkout.php
    contact.html
    diagnose.php
    event_detail.html
    events.html
    index.html
    login.php
    logout.php
    merchandise.php
    order_confirmation.php
    place_order.php
    product_detail.php
    profile.php
    register.php
    test_db.php
    view_cart.php
[scss]/
    [abstracts]/
        _variables.scss
    [layout]/
        _footer.scss
        _header.scss
        _navigation.scss
    style.scss
[templates]/
    footer.php
    header.php
project_context.txt

--- File Contents ---

--- START FILE: project_context.txt ---
`$language

--- END FILE: project_context.txt ---
--- START FILE: admin/add_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
$error_message = '';
$success_message = '';

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_name = trim($_POST['attribute_name']);
    $errors = [];

    // Validation
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicate attribute name
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attributes WHERE name = :name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "An attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attributes (name) VALUES (:name)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name]);

            $_SESSION['success_message'] = "Attribute '".htmlspecialchars($attribute_name)."' was created successfully!";
            header("Location: manage_attributes.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <form action="add_attribute.php" method="POST">
            <div class="mb-3">
                <label for="attribute_name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="attribute_name" name="attribute_name" placeholder="e.g., Color, Size, Material" value="<?= isset($_POST['attribute_name']) ? htmlspecialchars($_POST['attribute_name']) : '' ?>" required>
                <div class="form-text">This is the type of variation (e.g., "Color"). You will add the specific options (e.g., "Red", "Blue") in the next step.</div>
            </div>

            <button type="submit" class="btn btn-primary">Save Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_attribute.php ---
--- START FILE: admin/add_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access this page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new category data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the "Add Category" form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize the form data
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    }

    // 3. Check for duplicate category name before inserting
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM categories WHERE category_name = :category_name";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "A category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes and no duplicates are found, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO categories (category_name, description) VALUES (:category_name, :description)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description
            ]);

            // Set a success message in the session and redirect back to the main management page.
            // This is a good pattern, as it prevents form resubmission on refresh.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was created successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, set a generic error message.
            $error_message = "Database Error: Could not create the category. " . $e->getMessage();
        }
    } else {
        // If there were validation errors, combine them into a single message.
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_category.php" method="POST">
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= isset($_POST['category_name']) ? htmlspecialchars($_POST['category_name']) : '' ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Save Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_category.php ---
--- START FILE: admin/add_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
// This entire block is for security and setup. It ensures only logged-in admins can access the page.
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    // If the user is not an admin or not logged in, redirect them to the login page with an error.
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
// We need to connect to the database to insert the new event data.
require_once '../config/db_config.php';

// --- FORM PROCESSING LOGIC ---
// These variables will hold any success or error messages to display to the admin.
$error_message = '';
$success_message = '';

// Check if the request method is POST, which means the form has been submitted.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and trim the form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    // Description is not trimmed to allow for intentional whitespace.
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } else {
        // 3. If validation passes, proceed with database insertion.
        try {
            $sql = "INSERT INTO Events (event_name, description, start_date, end_date, location, created_by_user_id) VALUES (:event_name, :description, :start_date, :end_date, :location, :admin_id)";
            $stmt = $pdo->prepare($sql);

            // Bind the values to the placeholders in the SQL query for security.
            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'] // Log which admin created the event
            ]);

            // Set a success message and redirect back to the main management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was created successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // If the database query fails, show an error.
            $error_message = "Database Error: Could not create the event. " . $e->getMessage();
        }
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>
        <?php if ($success_message): ?>
            <div class="alert alert-success"><?= htmlspecialchars($success_message) ?></div>
        <?php endif; ?>

        <form action="add_event.php" method="POST">
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" required>
            </div>

            <button type="submit" class="btn btn-primary">Save Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_event.php ---
--- START FILE: admin/add_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING (for page context) ---
try {
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }
} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate attribute_id from the hidden form field
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['option_value']);
    $errors = [];

    // Validation
    if (!$attribute_id_post || $attribute_id_post != $attribute_id) {
        $errors[] = "Attribute ID mismatch.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value is required.";
    }

    // Check for duplicate option value for this specific attribute
    if (empty($errors)) {
        try {
            $sql_check = "SELECT COUNT(*) FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);
            if ($stmt_check->fetchColumn() > 0) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }
    
    // If no errors, insert into the database
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO attribute_options (attribute_id, value) VALUES (:attribute_id, :value)";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value
            ]);

            $_SESSION['success_message'] = "Option '".htmlspecialchars($option_value)."' was added successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if (!$attribute && !$error_message): ?>
            <div class="alert alert-danger">Attribute not found.</div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">Add New Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>

            <?php if ($error_message): ?>
                <div class="alert alert-danger"><?= $error_message ?></div>
            <?php endif; ?>

            <form action="add_option.php?attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="attribute_id" value="<?= $attribute_id ?>">
                <div class="mb-3">
                    <label for="option_value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="option_value" name="option_value" placeholder="e.g., Red, Large, Cotton" value="<?= isset($_POST['option_value']) ? htmlspecialchars($_POST['option_value']) : '' ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Save Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_option.php ---
--- START FILE: admin/add_product.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$categories = [];

// --- DATA FETCHING for Category Dropdown ---
// This part runs on every page load to populate the category dropdown.
try {
    $stmt = $pdo->query("SELECT category_id, category_name FROM categories ORDER BY category_name ASC");
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    $error_message = "Database Error: Could not fetch categories. " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
// This block only runs when the form is submitted via POST.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // 1. Retrieve and sanitize form data
    $product_name = trim($_POST['product_name']);
    $description = trim($_POST['description']);
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);
    $base_price = trim($_POST['base_price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $errors = [];

    // 2. Server-Side Validation
    if (empty($product_name)) {
        $errors[] = "Product Name is required.";
    }
    if (!$category_id) {
        $errors[] = "Please select a valid category.";
    }
    if (!is_numeric($base_price) || $base_price < 0) {
        $errors[] = "Base Price must be a valid, non-negative number.";
    }
    if ($stock_quantity === false || $stock_quantity < 0) {
        $errors[] = "Stock Quantity must be a valid, non-negative integer.";
    }
    
    // 3. If validation passes, proceed with database insertion.
    if (empty($errors)) {
        try {
            $sql = "INSERT INTO products (product_name, description, category_id, base_price, stock_quantity) VALUES (:product_name, :description, :category_id, :base_price, :stock_quantity)";
            $stmt = $pdo->prepare($sql);
            
            $stmt->execute([
                ':product_name' => $product_name,
                ':description' => $description,
                ':category_id' => $category_id,
                ':base_price' => $base_price,
                ':stock_quantity' => $stock_quantity
            ]);

            // Set success message and redirect
            $_SESSION['success_message'] = "Product '".htmlspecialchars($product_name)."' was created successfully!";
            header("Location: manage_products.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not create the product. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add New Product</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if (empty($categories) && $_SERVER["REQUEST_METHOD"] != "POST"): ?>
            <div class="alert alert-warning">
                You must <a href="add_category.php">create a category</a> before you can add a product.
            </div>
        <?php else: ?>
        <form action="add_product.php" method="POST">
            <div class="mb-3">
                <label for="product_name" class="form-label">Product Name</label>
                <input type="text" class="form-control" id="product_name" name="product_name" value="<?= isset($_POST['product_name']) ? htmlspecialchars($_POST['product_name']) : '' ?>" required>
            </div>

            <div class="mb-3">
                <label for="category_id" class="form-label">Category</label>
                <select class="form-select" id="category_id" name="category_id" required>
                    <option value="">-- Select a Category --</option>
                    <?php foreach ($categories as $category): ?>
                        <option value="<?= $category['category_id'] ?>" <?= (isset($_POST['category_id']) && $_POST['category_id'] == $category['category_id']) ? 'selected' : '' ?>>
                            <?= htmlspecialchars($category['category_name']) ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>

            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= isset($_POST['description']) ? htmlspecialchars($_POST['description']) : '' ?></textarea>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="base_price" class="form-label">Base Price</label>
                    <div class="input-group">
                        <span class="input-group-text">$</span>
                        <input type="number" class="form-control" id="base_price" name="base_price" step="0.01" min="0" value="<?= isset($_POST['base_price']) ? htmlspecialchars($_POST['base_price']) : '' ?>" required>
                    </div>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="stock_quantity" class="form-label">Stock Quantity</label>
                    <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="<?= isset($_POST['stock_quantity']) ? htmlspecialchars($_POST['stock_quantity']) : '' ?>" required>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Save Product</button>
            <a href="manage_products.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_product.php ---
--- START FILE: admin/add_variant.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$product = null;
$attributes = [];
$product_id = filter_input(INPUT_GET, 'product_id', FILTER_VALIDATE_INT);

// --- VALIDATE PRODUCT ID ---
if (!$product_id) {
    header("Location: manage_products.php?error=noproductid");
    exit();
}

// --- DATA FETCHING (Product Name and Attributes with their Options) ---
try {
    // 1. Fetch the parent product name
    $sql_product = "SELECT product_name FROM products WHERE product_id = :product_id";
    $stmt_product = $pdo->prepare($sql_product);
    $stmt_product->execute([':product_id' => $product_id]);
    $product = $stmt_product->fetch(PDO::FETCH_ASSOC);

    if (!$product) {
        throw new Exception("Product not found.");
    }

    // 2. Fetch all attributes and their options to build the form
    $sql_attrs = "SELECT a.attribute_id, a.name, ao.option_id, ao.value 
                  FROM attributes a
                  JOIN attribute_options ao ON a.attribute_id = ao.attribute_id
                  ORDER BY a.name, ao.value";
    $stmt_attrs = $pdo->query($sql_attrs);
    $all_options = $stmt_attrs->fetchAll(PDO::FETCH_ASSOC);

    // Group options by attribute for easy form generation
    foreach ($all_options as $option) {
        $attributes[$option['name']]['attribute_id'] = $option['attribute_id'];
        $attributes[$option['name']]['options'][] = [
            'option_id' => $option['option_id'],
            'value' => $option['value']
        ];
    }

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}

// --- FORM PROCESSING LOGIC ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $product_id_post = filter_input(INPUT_POST, 'product_id', FILTER_VALIDATE_INT);
    $sku = trim($_POST['sku']);
    $price = trim($_POST['price']);
    $stock_quantity = filter_input(INPUT_POST, 'stock_quantity', FILTER_VALIDATE_INT);
    $selected_options = $_POST['options'] ?? [];
    
    // --- Validation ---
    $errors = [];
    if ($product_id_post != $product_id) $errors[] = "Product ID mismatch.";
    if ($stock_quantity === false || $stock_quantity < 0) $errors[] = "Stock quantity must be a valid, non-negative integer.";
    if (!empty($price) && (!is_numeric($price) || $price < 0)) $errors[] = "Price must be a valid, non-negative number if specified.";
    if (empty($selected_options)) $errors[] = "You must select at least one option for the variant.";

    if (empty($errors)) {
        $pdo->beginTransaction();
        try {
            // Step 1: Insert the main variant record
            $sql_variant = "INSERT INTO product_variants (product_id, sku, price, stock_quantity) VALUES (:product_id, :sku, :price, :stock_quantity)";
            $stmt_variant = $pdo->prepare($sql_variant);
            $stmt_variant->execute([
                ':product_id' => $product_id,
                ':sku' => !empty($sku) ? $sku : null,
                ':price' => !empty($price) ? $price : null,
                ':stock_quantity' => $stock_quantity
            ]);
            $variant_id = $pdo->lastInsertId();

            // Step 2: Link the selected options to the new variant
            $sql_link = "INSERT INTO product_variant_options (variant_id, option_id) VALUES (:variant_id, :option_id)";
            $stmt_link = $pdo->prepare($sql_link);
            foreach ($selected_options as $option_id) {
                $stmt_link->execute([
                    ':variant_id' => $variant_id,
                    ':option_id' => $option_id
                ]);
            }
            
            // If everything was successful, commit the transaction
            $pdo->commit();
            
            $_SESSION['success_message'] = "New variant was created successfully!";
            header("Location: manage_variants.php?product_id=" . $product_id);
            exit();

        } catch (Exception $e) {
            // If any part fails, roll back the transaction
            $pdo->rollBack();
            $error_message = "Database transaction failed: " . $e->getMessage();
        }
    } else {
        $error_message = implode("<br>", $errors);
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Variant - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($product): ?>
            <h1 class="mb-4">Add Variant for: <strong><?= htmlspecialchars($product['product_name']) ?></strong></h1>

            <form action="add_variant.php?product_id=<?= $product_id ?>" method="POST">
                <input type="hidden" name="product_id" value="<?= $product_id ?>">

                <div class="card p-3 mb-4">
                    <h5>Variant Attributes</h5>
                    <p class="text-muted">Select one option from each relevant attribute group to define this unique variant.</p>
                    <div class="row">
                        <?php if (!empty($attributes)): ?>
                            <?php foreach ($attributes as $name => $data): ?>
                                <div class="col-md-4 mb-3">
                                    <label for="option_<?= $data['attribute_id'] ?>" class="form-label"><strong><?= htmlspecialchars($name) ?></strong></label>
                                    <select class="form-select" name="options[]" id="option_<?= $data['attribute_id'] ?>">
                                        <option value="">-- Select <?= htmlspecialchars($name) ?> --</option>
                                        <?php foreach ($data['options'] as $option): ?>
                                            <option value="<?= $option['option_id'] ?>"><?= htmlspecialchars($option['value']) ?></option>
                                        <?php endforeach; ?>
                                    </select>
                                </div>
                            <?php endforeach; ?>
                        <?php else: ?>
                            <div class="col">
                                <p class="text-warning">No attributes have been defined yet. Please <a href="manage_attributes.php">add attributes and options</a> first.</p>
                            </div>
                        <?php endif; ?>
                    </div>
                </div>

                <div class="card p-3">
                    <h5>Variant Details</h5>
                     <div class="row">
                        <div class="col-md-4 mb-3">
                            <label for="sku" class="form-label">SKU (Optional)</label>
                            <input type="text" class="form-control" id="sku" name="sku" placeholder="Unique product code">
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="price" class="form-label">Specific Price (Optional)</label>
                             <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" placeholder="Overrides base price">
                            </div>
                        </div>
                         <div class="col-md-4 mb-3">
                            <label for="stock_quantity" class="form-label">Stock Quantity</label>
                            <input type="number" class="form-control" id="stock_quantity" name="stock_quantity" min="0" value="0" required>
                        </div>
                    </div>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary" <?= empty($attributes) ? 'disabled' : '' ?>>Save Variant</button>
                    <a href="manage_variants.php?product_id=<?= $product_id ?>" class="btn btn-secondary">Cancel</a>
                </div>
            </form>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/add_variant.php ---
--- START FILE: admin/delete_attribute.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute_name = '';
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// This is the most important part of the script. Before we can delete an attribute,
// we must check if any of its options are being used by any product variants.
function isAttributeInUse($pdo, $attribute_id) {
    $sql = "SELECT COUNT(*) 
            FROM product_variant_options pvo
            JOIN attribute_options ao ON pvo.option_id = ao.option_id
            WHERE ao.attribute_id = :attribute_id";
    $stmt = $pdo->prepare($sql);
    $stmt->execute([':attribute_id' => $attribute_id]);
    return $stmt->fetchColumn() > 0;
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);

    if ($attribute_id) {
        if (isAttributeInUse($pdo, $attribute_id)) {
            $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
        } else {
            try {
                // Because the foreign key has ON DELETE CASCADE, deleting the attribute
                // will automatically delete all its associated options.
                $sql = "DELETE FROM attributes WHERE attribute_id = :attribute_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':attribute_id' => $attribute_id]);

                $_SESSION['success_message'] = "The attribute and all its options were successfully deleted.";
                header("Location: manage_attributes.php");
                exit();
            } catch (PDOException $e) {
                $error_message = "Database Error: Could not delete the attribute. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Attribute ID. Deletion failed.";
    }

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    if (isAttributeInUse($pdo, $attribute_id)) {
        $error_message = "Cannot delete this attribute because its options are currently in use by one or more product variants. Please remove those variants first.";
    } else {
        try {
            $sql = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':attribute_id' => $attribute_id]);
            $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($attribute) {
                $attribute_name = $attribute['name'];
            } else {
                $error_message = "No attribute found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: " . $e->getMessage();
        }
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the attribute: <strong><?= htmlspecialchars($attribute_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This will also delete all of its associated options (e.g., deleting 'Color' will also delete 'Red', 'Blue', etc.). This action cannot be undone.</p>
            </div>

            <form action="delete_attribute.php" method="POST">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_attribute.php ---
--- START FILE: admin/delete_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category_name = '';
$category_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    if ($category_id) {
        try {
            // First, check if any products are using this category.
            // This prevents orphaning products and maintains data integrity.
            $sql_check = "SELECT COUNT(*) FROM products WHERE category_id = :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_id' => $category_id]);
            
            if ($stmt_check->fetchColumn() > 0) {
                // If products are using this category, prevent deletion.
                $error_message = "Cannot delete this category because it is currently assigned to one or more products. Please reassign the products to another category before deleting this one.";
            } else {
                // If no products are using it, proceed with deletion.
                $sql = "DELETE FROM categories WHERE category_id = :category_id";
                $stmt = $pdo->prepare($sql);
                $stmt->execute([':category_id' => $category_id]);

                // Set a success message and redirect back to the management page.
                $_SESSION['success_message'] = "The category was successfully deleted.";
                header("Location: manage_categories.php");
                exit();
            }

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not delete the category. " . $e->getMessage();
        }
    } else {
        $error_message = "Invalid Category ID. Deletion failed.";
    }

// --- DATA FETCHING FOR CONFIRMATION PAGE (HANDLE GET REQUEST) ---
} else {
    $category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($category_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT category_name FROM categories WHERE category_id = :category_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':category_id' => $category_id]);
            $category = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($category) {
                $category_name = $category['category_name'];
            } else {
                $error_message = "No category found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Category ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_categories.php" class="btn btn-secondary">Back to Category Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the category: <strong><?= htmlspecialchars($category_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone. Any products in this category will need to be reassigned.</p>
            </div>

            <form action="delete_category.php" method="POST">
                <input type="hidden" name="category_id" value="<?= htmlspecialchars($category_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_category.php ---
--- START FILE: admin/delete_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event_name = '';
$event_id = null;

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST FOR DELETION) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    if ($event_id) {
        try {
            // NOTE: For a more advanced system, you would first check if this event has
            // associated sub-events or registrations and prevent deletion if it does.
            // For now, we will proceed with a direct delete.
            $sql = "DELETE FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "The event was successfully deleted.";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            // Handle potential foreign key constraint errors if sub-events exist
            if ($e->getCode() == '23000') {
                 $error_message = "Cannot delete this event because it has associated data (like sub-events or registrations). Please remove the associated data first.";
            } else {
                $error_message = "Database Error: Could not delete the event. " . $e->getMessage();
            }
        }
    } else {
        $error_message = "Invalid Event ID. Deletion failed.";
    }
} else {
    // --- DATA FETCHING FOR CONFIRMATION (HANDLE GET REQUEST) ---
    $event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
    if ($event_id) {
        try {
            // We only need the name for the confirmation message.
            $sql = "SELECT event_name FROM Events WHERE event_id = :event_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':event_id' => $event_id]);
            $event = $stmt->fetch(PDO::FETCH_ASSOC);

            if ($event) {
                $event_name = $event['event_name'];
            } else {
                $error_message = "No event found with this ID.";
            }
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
        }
    } else {
        $error_message = "No Event ID provided.";
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Delete Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Delete Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_events.php" class="btn btn-secondary">Back to Event Management</a>
        <?php else: ?>
            <div class="alert alert-warning">
                <h4 class="alert-heading">Are you sure?</h4>
                <p>You are about to permanently delete the event: <strong><?= htmlspecialchars($event_name) ?></strong>.</p>
                <hr>
                <p class="mb-0">This action cannot be undone.</p>
            </div>

            <form action="delete_event.php" method="POST">
                <input type="hidden" name="event_id" value="<?= htmlspecialchars($event_id) ?>">
                
                <button type="submit" class="btn btn-danger">Confirm Delete</button>
                <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
            </form>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/delete_event.php ---
--- START FILE: admin/delete_option.php ---
`$language
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$attribute = null;
$attribute_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $attribute_id = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $attribute_name = trim($_POST['name']);
    $errors = [];

    // Validation
    if (!$attribute_id) {
        $errors[] = "Invalid Attribute ID.";
    }
    if (empty($attribute_name)) {
        $errors[] = "Attribute Name is required.";
    }

    // Check for duplicates (excluding the current attribute)
    if (empty($errors)) {
        try {
            $sql_check = "SELECT attribute_id FROM attributes WHERE name = :name AND attribute_id != :attribute_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another attribute with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, perform the update
    if (empty($errors)) {
        try {
            $sql = "UPDATE attributes SET name = :name WHERE attribute_id = :attribute_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':name' => $attribute_name, ':attribute_id' => $attribute_id]);

            $_SESSION['success_message'] = "Attribute name updated successfully!";
            header("Location: manage_attributes.php");
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update attribute. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // Repopulate attribute array for form redisplay on error
    $attribute = ['attribute_id' => $attribute_id, 'name' => $attribute_name];

// --- INITIAL PAGE LOAD (GET REQUEST) ---
} elseif ($attribute_id) {
    try {
        $sql = "SELECT * FROM attributes WHERE attribute_id = :attribute_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute) {
            $error_message = "Attribute not found.";
            $attribute = null;
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch attribute. " . $e->getMessage();
    }
} else {
    $error_message = "No Attribute ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Attribute - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Attribute</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($attribute): ?>
        <form action="edit_attribute.php?id=<?= htmlspecialchars($attribute_id) ?>" method="POST">
            <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute['attribute_id']) ?>">
            
            <div class="mb-3">
                <label for="name" class="form-label">Attribute Name</label>
                <input type="text" class="form-control" id="name" name="name" value="<?= htmlspecialchars($attribute['name']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Attribute</button>
            <a href="manage_attributes.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_attributes.php" class="btn btn-primary">Back to Attribute Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_attribute.php ---
--- START FILE: admin/edit_category.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$category = null; // This will hold the category data we are editing.
$category_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get category ID from the URL.

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the edit form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the category_id from a hidden field in the form.
    $category_id = filter_input(INPUT_POST, 'category_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and sanitize the submitted form data.
    $category_name = trim($_POST['category_name']);
    $description = trim($_POST['description']);
    $errors = [];

    // 2. Server-Side Validation.
    if (empty($category_name)) {
        $errors[] = "Category Name is required.";
    } elseif (!$category_id) {
        $errors[] = "Invalid Category ID. Cannot update.";
    }

    // 3. Check for duplicates (but exclude the current category being edited).
    if (empty($errors)) {
        try {
            $sql_check = "SELECT category_id FROM categories WHERE category_name = :category_name AND category_id != :category_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([':category_name' => $category_name, ':category_id' => $category_id]);
            if ($stmt_check->fetch()) {
                $errors[] = "Another category with this name already exists.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // 4. If validation passes, proceed with the database UPDATE.
    if (empty($errors)) {
        try {
            $sql = "UPDATE categories SET 
                        category_name = :category_name, 
                        description = :description 
                    WHERE category_id = :category_id";

            $stmt = $pdo->prepare($sql);
            $stmt->execute([
                ':category_name' => $category_name,
                ':description' => $description,
                ':category_id' => $category_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Category '".htmlspecialchars($category_name)."' was updated successfully!";
            header("Location: manage_categories.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the category. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
    // If there was a validation error, we need to repopulate the $category variable to refill the form with the attempted values.
    $category = $_POST;
    // We need to ensure category_id is still in the array for the form's hidden field.
    $category['category_id'] = $category_id;


} elseif ($category_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded to get the category data from the DB.
    try {
        $sql = "SELECT * FROM categories WHERE category_id = :category_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':category_id' => $category_id]);
        $category = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$category) {
            $error_message = "No category found with this ID.";
            $category = null; // Ensure the form doesn't try to render.
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch category details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Category ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Category - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Category</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
        <?php endif; ?>

        <?php if ($category): // Only show the form if we successfully found a category to edit ?>
        <form action="edit_category.php?id=<?= htmlspecialchars($category_id) ?>" method="POST">
            <input type="hidden" name="category_id" value="<?= htmlspecialchars($category['category_id']) ?>">
            
            <div class="mb-3">
                <label for="category_name" class="form-label">Category Name</label>
                <input type="text" class="form-control" id="category_name" name="category_name" value="<?= htmlspecialchars($category['category_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($category['description']) ?></textarea>
            </div>

            <button type="submit" class="btn btn-primary">Update Category</button>
            <a href="manage_categories.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <p>The requested category could not be found.</p>
            <a href="manage_categories.php" class="btn btn-primary">Back to Category Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_category.php ---
--- START FILE: admin/edit_event.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$event = null; // This will hold the event data we fetch.
$event_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT); // Get event ID from URL

// --- FORM PROCESSING LOGIC (HANDLE POST REQUEST) ---
// This block runs ONLY when the admin submits the form.
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // We get the event_id from a hidden field in the form
    $event_id = filter_input(INPUT_POST, 'event_id', FILTER_VALIDATE_INT);

    // 1. Retrieve and trim the submitted form data
    $event_name = trim($_POST['event_name']);
    $start_date = trim($_POST['start_date']);
    $end_date = trim($_POST['end_date']);
    $location = trim($_POST['location']);
    $description = $_POST['description'];

    // 2. Server-Side Validation
    if (empty($event_name) || empty($start_date) || empty($end_date) || empty($location)) {
        $error_message = "All fields except description are required.";
    } elseif (strtotime($end_date) < strtotime($start_date)) {
        $error_message = "The end date cannot be before the start date.";
    } elseif (!$event_id) {
        $error_message = "Invalid Event ID. Cannot update.";
    } else {
        // 3. If validation passes, proceed with the database UPDATE.
        try {
            $sql = "UPDATE Events SET 
                event_name = :event_name, 
                description = :description, 
                start_date = :start_date, 
                end_date = :end_date, 
                location = :location, 
                event_UpdatedByUser_Id = :admin_id 
            WHERE event_id = :event_id";

            $stmt = $pdo->prepare($sql);

            $stmt->execute([
                ':event_name' => $event_name,
                ':description' => $description,
                ':start_date' => $start_date,
                ':end_date' => $end_date,
                ':location' => $location,
                ':admin_id' => $_SESSION['user_id'],
                ':event_id' => $event_id
            ]);

            // Set a success message and redirect back to the management page.
            $_SESSION['success_message'] = "Event '".htmlspecialchars($event_name)."' was updated successfully!";
            header("Location: manage_events.php");
            exit();

        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the event. " . $e->getMessage();
        }
    }
    // If there was a validation error, we need to repopulate the $event variable to refill the form
    $event = $_POST;

} elseif ($event_id) {
    // --- DATA FETCHING LOGIC (HANDLE GET REQUEST) ---
    // This block runs when the page is first loaded, to get the data from the DB.
    try {
        $sql = "SELECT * FROM Events WHERE event_id = :event_id";
        $stmt = $pdo->prepare($sql);
        $stmt->execute([':event_id' => $event_id]);
        $event = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$event) {
            $error_message = "No event found with this ID.";
            $event = null; // Ensure the form doesn't try to render
        }
    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch event details. " . $e->getMessage();
    }
} else {
    // This runs if no ID was provided in the URL at all.
    $error_message = "No Event ID provided.";
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Event - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Edit Event</h1>

        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
        <?php endif; ?>

        <?php if ($event): // Only show the form if we successfully found an event to edit ?>
        <form action="edit_event.php?id=<?= htmlspecialchars($event_id) ?>" method="POST">
            <input type="hidden" name="event_id" value="<?= htmlspecialchars($event['event_id']) ?>">
            
            <div class="mb-3">
                <label for="event_name" class="form-label">Event Name</label>
                <input type="text" class="form-control" id="event_name" name="event_name" value="<?= htmlspecialchars($event['event_name']) ?>" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="4"><?= htmlspecialchars($event['description']) ?></textarea>
            </div>
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="start_date" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="start_date" name="start_date" value="<?= htmlspecialchars($event['start_date']) ?>" required>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="end_date" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="end_date" name="end_date" value="<?= htmlspecialchars($event['end_date']) ?>" required>
                </div>
            </div>
            <div class="mb-3">
                <label for="location" class="form-label">Location</label>
                <input type="text" class="form-control" id="location" name="location" value="<?= htmlspecialchars($event['location']) ?>" required>
            </div>

            <button type="submit" class="btn btn-primary">Update Event</button>
            <a href="manage_events.php" class="btn btn-secondary">Cancel</a>
        </form>
        <?php else: ?>
            <a href="manage_events.php" class="btn btn-primary">Back to Event Management</a>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_event.php ---
--- START FILE: admin/edit_option.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$error_message = '';
$option = null;
$attribute = null;
$option_id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE IDs ---
if (!$option_id || !$attribute_id) {
    header("Location: manage_attributes.php?error=invalidids");
    exit();
}

// --- FORM PROCESSING LOGIC (POST REQUEST) ---
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Re-validate IDs from hidden form fields
    $option_id_post = filter_input(INPUT_POST, 'option_id', FILTER_VALIDATE_INT);
    $attribute_id_post = filter_input(INPUT_POST, 'attribute_id', FILTER_VALIDATE_INT);
    $option_value = trim($_POST['value']);
    $errors = [];

    // Validation
    if ($option_id_post !== $option_id || $attribute_id_post !== $attribute_id) {
        $errors[] = "ID mismatch. Update failed.";
    }
    if (empty($option_value)) {
        $errors[] = "Option Value cannot be empty.";
    }

    // Check for duplicate option value for this attribute, excluding the current option
    if (empty($errors)) {
        try {
            $sql_check = "SELECT option_id FROM attribute_options WHERE attribute_id = :attribute_id AND value = :value AND option_id != :option_id";
            $stmt_check = $pdo->prepare($sql_check);
            $stmt_check->execute([
                ':attribute_id' => $attribute_id,
                ':value' => $option_value,
                ':option_id' => $option_id
            ]);
            if ($stmt_check->fetch()) {
                $errors[] = "This option value already exists for this attribute.";
            }
        } catch (PDOException $e) {
            $errors[] = "Database error during duplicate check: " . $e->getMessage();
        }
    }

    // If no errors, update the database
    if (empty($errors)) {
        try {
            $sql = "UPDATE attribute_options SET value = :value WHERE option_id = :option_id";
            $stmt = $pdo->prepare($sql);
            $stmt->execute([':value' => $option_value, ':option_id' => $option_id]);

            $_SESSION['success_message'] = "Option updated successfully!";
            header("Location: manage_options.php?attribute_id=" . $attribute_id);
            exit();
        } catch (PDOException $e) {
            $error_message = "Database Error: Could not update the option. " . $e->getMessage();
        }
    } else {
        $error_message = implode('<br>', $errors);
    }
     // Repopulate arrays for form redisplay on error
    $option = ['option_id' => $option_id, 'value' => $option_value, 'attribute_id' => $attribute_id];
    $attribute = ['attribute_id' => $attribute_id, 'name' => $_POST['attribute_name']];


// --- INITIAL PAGE LOAD (GET REQUEST) ---
} else {
    try {
        // Fetch the attribute details for context
        $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
        $stmt_attr = $pdo->prepare($sql_attr);
        $stmt_attr->execute([':attribute_id' => $attribute_id]);
        $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

        // Fetch the specific option to be edited
        $sql_opt = "SELECT * FROM attribute_options WHERE option_id = :option_id";
        $stmt_opt = $pdo->prepare($sql_opt);
        $stmt_opt->execute([':option_id' => $option_id]);
        $option = $stmt_opt->fetch(PDO::FETCH_ASSOC);

        if (!$attribute || !$option) {
            $error_message = "Attribute or Option not found.";
            $option = null; // Prevent form rendering
        }

    } catch (PDOException $e) {
        $error_message = "Database Error: Could not fetch details. " . $e->getMessage();
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Option - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= $error_message ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php elseif ($option && $attribute): ?>
            <h1 class="mb-4">Edit Option for: <strong><?= htmlspecialchars($attribute['name']) ?></strong></h1>
            
            <form action="edit_option.php?id=<?= $option_id ?>&attribute_id=<?= $attribute_id ?>" method="POST">
                <input type="hidden" name="option_id" value="<?= htmlspecialchars($option['option_id']) ?>">
                <input type="hidden" name="attribute_id" value="<?= htmlspecialchars($attribute_id) ?>">
                <input type="hidden" name="attribute_name" value="<?= htmlspecialchars($attribute['name']) ?>">


                <div class="mb-3">
                    <label for="value" class="form-label">Option Value</label>
                    <input type="text" class="form-control" id="value" name="value" value="<?= htmlspecialchars($option['value']) ?>" required>
                </div>

                <button type="submit" class="btn btn-primary">Update Option</button>
                <a href="manage_options.php?attribute_id=<?= $attribute_id ?>" class="btn btn-secondary">Cancel</a>
            </form>
        <?php else: ?>
            <div class="alert alert-info">Loading...</div>
        <?php endif; ?>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/edit_option.php ---
--- END FILE: admin/manage_events.php ---
--- START FILE: admin/manage_options.php ---
`$language
<?php
// --- SECURITY AND INITIALIZATION ---
session_start();
if (!isset($_SESSION['user_id']) || !isset($_SESSION['role']) || $_SESSION['role'] !== 'admin') {
    header("Location: /alsmweb/public_html/login.php?error=unauthorized");
    exit();
}

// --- CONFIGURATION AND DATABASE CONNECTION ---
require_once '../config/db_config.php';

// --- INITIALIZE VARIABLES ---
$attribute = null;
$options = [];
$error_message = '';
$attribute_id = filter_input(INPUT_GET, 'attribute_id', FILTER_VALIDATE_INT);

// --- VALIDATE ATTRIBUTE ID ---
if (!$attribute_id) {
    header("Location: manage_attributes.php?error=noattributeid");
    exit();
}

// --- DATA FETCHING ---
try {
    // 1. Fetch the parent attribute's name for context
    $sql_attr = "SELECT name FROM attributes WHERE attribute_id = :attribute_id";
    $stmt_attr = $pdo->prepare($sql_attr);
    $stmt_attr->execute([':attribute_id' => $attribute_id]);
    $attribute = $stmt_attr->fetch(PDO::FETCH_ASSOC);

    if (!$attribute) {
        throw new Exception("Attribute not found.");
    }

    // 2. Fetch all options belonging to this attribute
    $sql_opts = "SELECT option_id, value FROM attribute_options WHERE attribute_id = :attribute_id ORDER BY value ASC";
    $stmt_opts = $pdo->prepare($sql_opts);
    $stmt_opts->execute([':attribute_id' => $attribute_id]);
    $options = $stmt_opts->fetchAll(PDO::FETCH_ASSOC);

} catch (Exception $e) {
    $error_message = "Error: " . $e->getMessage();
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Options - Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        
        <?php if ($error_message): ?>
            <div class="alert alert-danger"><?= htmlspecialchars($error_message) ?></div>
            <a href="manage_attributes.php" class="btn btn-secondary">Back to Attributes</a>
        <?php else: ?>
            <h1 class="mb-4">
                Manage Options for: <strong><?= htmlspecialchars($attribute['name']) ?></strong>
            </h1>

            <?php
            if (isset($_SESSION['success_message'])) {
                echo '<div class="alert alert-success">' . htmlspecialchars($_SESSION['success_message']) . '</div>';
                unset($_SESSION['success_message']);
            }
            ?>

            <div class="d-flex justify-content-between mb-3">
                <a href="manage_attributes.php" class="btn btn-secondary">&laquo; Back to Attributes</a>
                <a href="add_option.php?attribute_id=<?= $attribute_id ?>" class="btn btn-success">Add New Option</a>
            </div>

            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Option Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <?php if (!empty($options)): ?>
                        <?php foreach ($options as $option): ?>
                            <tr>
                                <td><?= htmlspecialchars($option['value']) ?></td>
                                <td>
                                    <a href="edit_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-primary btn-sm">Edit</a>
                                    <a href="delete_option.php?id=<?= $option['option_id'] ?>&attribute_id=<?= $attribute_id ?>" class="btn btn-danger btn-sm">Delete</a>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <tr>
                            <td colspan="2" class="text-center">No options found for this attribute.</td>
                        </tr>
                    <?php endif; ?>
                </tbody>
            </table>
        <?php endif; ?>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
--- END FILE: admin/manage_options.php ---
--- START FILE: admin/manage_products.php ---
`$language
--- END FILE: public_html/events.html ---
--- START FILE: public_html/event_detail.html ---
`$language
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ALSM - Event Details</title>
        <link rel="stylesheet" href="assets/css/reset.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
<link rel="stylesheet" href="assets/css/style.css">
</head>
<body>
    <header>
        <h1>Australian Large Scale Models</h1>
    </header>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="index.html">ALSM</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a class="nav-link" href="index.html">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="events.html">Events</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="merchandise.html">Merchandise</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="campsite_booking.html">Campsite Booking</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="about.html">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="contact.html">Contact</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="login.php">Login</a>
                </li>
                 <li class="nav-item">
                    <a class="nav-link" href="register.php">Register</a>
                </li>
            </ul>
        </div>
    </div>
</nav>
    <main>
        <h2>Event Detail Page</h2>
        <p>This page will serve as a template for individual event details.</p>
    </main>
    <footer>
        <p>&copy; 2025 Australian Large Scale Models</p>
    </footer>
</body><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
<script src="assets/js/main.js"></script>
</html>
